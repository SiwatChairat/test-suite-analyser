NO.,HEAD,CHANGE TYPE,CHANGED STATEMENT,PARENT ENTITY,ROOT ENTITY,SIGNIFICANCE LEVEL
1,2b55799273247661132f999d66943c6adb6ccc35,"STATEMENT_DELETE","METHOD_INVOCATION: java8CompatibilityCheck();","METHOD: com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","MEDIUM"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.MoreObjects.ToStringHelper.java8CompatibilityCheck()","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.MoreObjects.ToStringHelper.performedJava8CompatibilityCheck : boolean","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"STATEMENT_DELETE","METHOD_INVOCATION: java8CompatibilityCheck();","METHOD: com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","MEDIUM"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.MoreObjects.ToStringHelper.java8CompatibilityCheck()","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.MoreObjects.ToStringHelper.performedJava8CompatibilityCheck : boolean","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"STATEMENT_DELETE","METHOD_INVOCATION: java8CompatibilityCheck();","METHOD: com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","MEDIUM"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.MoreObjects.ToStringHelper.java8CompatibilityCheck()","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.MoreObjects.ToStringHelper.performedJava8CompatibilityCheck : boolean","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"STATEMENT_DELETE","METHOD_INVOCATION: java8CompatibilityCheck();","METHOD: com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","MEDIUM"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.MoreObjects.ToStringHelper.java8CompatibilityCheck()","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.MoreObjects.ToStringHelper.performedJava8CompatibilityCheck : boolean","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"STATEMENT_DELETE","METHOD_INVOCATION: java8CompatibilityCheck();","METHOD: com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","com.google.common.base.MoreObjects.ToStringHelper.ToStringHelper(String)","MEDIUM"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.MoreObjects.ToStringHelper.java8CompatibilityCheck()","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
1,2b55799273247661132f999d66943c6adb6ccc35,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.MoreObjects.ToStringHelper.performedJava8CompatibilityCheck : boolean","CLASS: com.google.common.base.MoreObjects.ToStringHelper","com.google.common.base.MoreObjects.ToStringHelper","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testToImmutableSet_java7()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_customComparator_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(3, 5).isConnected(Range.closed(5, 6)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(5, 6).isConnected(Range.closed(3, 5)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_invalidRangesWithInfinity()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.testing.EqualsTesterTest.testEqualityBasedOnToString()","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_CLASS","CLASS: com.google.common.testing.EqualsTesterTest.EqualsBasedOnToString","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.TreeRangeSetTest.testSubRangeSetReplaceAdd()","CLASS: com.google.common.collect.TreeRangeSetTest","com.google.common.collect.TreeRangeSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.TreeRangeSetTest.testSubRangeSetAdd()","CLASS: com.google.common.collect.TreeRangeSetTest","com.google.common.collect.TreeRangeSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testToImmutableSet_java7()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableRangeMapTest.testToImmutableRangeMap()","CLASS: com.google.common.collect.ImmutableRangeMapTest","com.google.common.collect.ImmutableRangeMapTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_customComparator_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(3, 5).isConnected(Range.closed(5, 6)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(5, 6).isConnected(Range.closed(3, 5)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_invalidRangesWithInfinity()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart_singleServiceCallsHealthy()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart_singleServiceCallsHealthy()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testEmptyServiceManager()","com.google.common.util.concurrent.ServiceManagerTest.testEmptyServiceManager()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStop()","com.google.common.util.concurrent.ServiceManagerTest.testFailStop()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(new Listener() {
  public @Override void failure(Service service) {
    manager.stopAsync();
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart_stopOthers()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart_stopOthers()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testSingleFailedServiceCallsStopped()","com.google.common.util.concurrent.ServiceManagerTest.testSingleFailedServiceCallsStopped()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailRun()","com.google.common.util.concurrent.ServiceManagerTest.testFailRun()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(new ServiceManager.Listener() {
  public @Override void failure(Service service) {
    failEnter.countDown();
    Uninterruptibles.awaitUninterruptibly(failLeave);
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testListenerDeadlock()","com.google.common.util.concurrent.ServiceManagerTest.testListenerDeadlock()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testServiceStartStop()","com.google.common.util.concurrent.ServiceManagerTest.testServiceStartStop()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: Arrays.fill(zeros, (byte) 0x00);","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testZeros()","com.google.common.hash.Crc32cHashFunctionTest.testZeros()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(String.format("expected: %08x, actual: %08x", expectedCrc, actualCrc), expectedCrc, actualCrc);","METHOD: com.google.common.hash.Crc32cHashFunctionTest.assertCrc(int,byte[])","com.google.common.hash.Crc32cHashFunctionTest.assertCrc(int,byte[])","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testZeros100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testDescending100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testEmpty()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testFull100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.testing.EqualsTesterTest.testEqualityBasedOnToString()","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_CLASS","CLASS: com.google.common.testing.EqualsTesterTest.EqualsBasedOnToString","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: delegate().remove(key);","METHOD: com.google.common.collect.ForwardingMap.remove(Object)","com.google.common.collect.ForwardingMap.remove(Object)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_RENAMING","PARAMETER: key","PARAMETERS: ","com.google.common.collect.ForwardingMap.remove(Object)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ConcurrentLinkedQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newConcurrentLinkedQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ArrayDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newArrayDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: TreeRangeSet.this.add(rangeToAdd);","METHOD: com.google.common.collect.TreeRangeSet.SubRangeSet.add(Range<C>)","com.google.common.collect.TreeRangeSet.SubRangeSet.add(Range<C>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: collection.addAll((Collection<E>) iterable);","THEN_STATEMENT: (iterable instanceof Collection)","com.google.common.collect.FluentIterable.copyInto(C)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_REQUEST_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_ISOLATION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: crc ^= 0xFFFFFFFF;","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","ASSIGNMENT: crc = ((crc >>> 8) ^ CRC_TABLE[((crc ^ b) & 0xFF)]);","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: HashCode.fromInt((~ crc));","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.hash()","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.hash()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
   * Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.
   */","METHOD: com.google.common.hash.HashCode.toString()","com.google.common.hash.HashCode.toString()","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Appendable separatingAppendable = separatingAppendable(delegate, separator, afterEveryChars);","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new Writer() {
  public @Override void write(int c) throws IOException {
    separatingAppendable.append((char) c);
  }
  public @Override void write(char[] chars, int off, int len) throws IOException {
    throw new UnsupportedOperationException();
  }
  public @Override void flush() throws IOException {
    delegate.flush();
  }
  public @Override void close() throws IOException {
    delegate.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Encode all primes less than 66 into mask without 0 and 1.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long mask = ((((((((((((((((((1L << (2 - 2)) | (1L << (3 - 2))) | (1L << (5 - 2))) | (1L << (7 - 2))) | (1L << (11 - 2))) | (1L << (13 - 2))) | (1L << (17 - 2))) | (1L << (19 - 2))) | (1L << (23 - 2))) | (1L << (29 - 2))) | (1L << (31 - 2))) | (1L << (37 - 2))) | (1L << (41 - 2))) | (1L << (43 - 2))) | (1L << (47 - 2))) | (1L << (53 - 2))) | (1L << (59 - 2))) | (1L << (61 - 2)));","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Look up n within the mask.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","RETURN_STATEMENT: (((mask >> ((int) n - 2)) & 1) != 0);","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","IF_STATEMENT: (n < 66)","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_ORDERING_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
 * <b>Do not use this class directly. For access to public-suffix information, use {@link
 * com.google.common.net.InternetDomainName}.</b>
 *
 * <p>A generated static class containing public members which provide domain name patterns used in
 * determining whether a given domain name is an effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in a space-efficient manner.
 * {@see TrieParser}.
 *
 * @since 16.0
 */","CLASS: com.google.thirdparty.publicsuffix.PublicSuffixPatterns","com.google.thirdparty.publicsuffix.PublicSuffixPatterns","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedHashMultiset<?>)","com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedHashMultiset<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,UsingToStringOrdering)","com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,UsingToStringOrdering)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,HashBasedTable<?, ?, ?>)","com.google.common.collect.HashBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,HashBasedTable<?, ?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableSetMultimap)","com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableSetMultimap)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: delegate().remove(key);","METHOD: com.google.common.collect.ForwardingMap.remove(Object)","com.google.common.collect.ForwardingMap.remove(Object)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_RENAMING","PARAMETER: key","PARAMETERS: ","com.google.common.collect.ForwardingMap.remove(Object)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.TreeBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeBasedTable<?, ?, ?>)","com.google.common.collect.TreeBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeBasedTable<?, ?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.NaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.NaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.NaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,NaturalOrdering)","com.google.common.collect.NaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,NaturalOrdering)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,SparseImmutableTable<Object, Object, Object>)","com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,SparseImmutableTable<Object, Object, Object>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultimap<?, ?>)","com.google.common.collect.HashMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultimap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultiset<?>)","com.google.common.collect.HashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultiset<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ConcurrentLinkedQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newConcurrentLinkedQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ArrayDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newArrayDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumMap<?, ?>)","com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumMap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumSet<?>)","com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumSet<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ArrayListMultimap<?, ?>)","com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ArrayListMultimap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.TreeMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeMultimap<?, ?>)","com.google.common.collect.TreeMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeMultimap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Map.Entry<?, ? extends Collection<?>> entry:instance.asMap().entrySet()","METHOD: com.google.common.collect.Multimap_CustomFieldSerializerBase.serialize(SerializationStreamWriter,Multimap<?, ?>)","com.google.common.collect.Multimap_CustomFieldSerializerBase.serialize(SerializationStreamWriter,Multimap<?, ?>)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSortedMap<?, ?>)","com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSortedMap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableListMultimap)","com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableListMultimap)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableListMultimap<?, ?>)","com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableListMultimap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,DenseImmutableTable<Object, Object, Object>)","com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,DenseImmutableTable<Object, Object, Object>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableMultiset.copyOf(Multiset_CustomFieldSerializerBase.populate(reader, LinkedHashMultiset.create()));","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<Object> elements = Lists.newArrayList();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: Collection_CustomFieldSerializerBase.deserialize(reader, elements);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * For this custom field serializer to be invoked, the set must have been
     * RegularImmutableMultiset before it's serialized. Since
     * RegularImmutableMultiset always have one or more elements,
     * ImmutableMultiset.copyOf always return a RegularImmutableMultiset back.
     */","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","RETURN_STATEMENT: (RegularImmutableMultiset<Object>) ImmutableMultiset.copyOf(elements);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader): RegularImmutableMultiset<Object>","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: RegularImmutableMultiset<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.deserialize(SerializationStreamReader,ImmutableMultiset<?>)","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: RegularImmutableMultiset<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableMultiset<?>)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: Collection_CustomFieldSerializerBase.serialize(writer, instance);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableMultiset<?>)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSetMultimap<?, ?>)","com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSetMultimap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * For this custom field serializer to be invoked, the set must have been
     * RegularImmutableSet before it's serialized.  Since RegularImmutableSet
     * always have two or more elements, ImmutableSet.copyOf always return
     * a RegularImmutableSet back.
     */","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: (RegularImmutableSet<Object>) ImmutableSet.copyOf(elements);","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader): RegularImmutableSet<Object>","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: RegularImmutableSet<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.deserialize(SerializationStreamReader,ImmutableSet<?>)","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: RegularImmutableSet<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableSet<?>)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.Range_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.Range_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.Range_CustomFieldSerializer.serialize(SerializationStreamWriter,Range<?>)","com.google.common.collect.Range_CustomFieldSerializer.serialize(SerializationStreamWriter,Range<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: collection.addAll((Collection<E>) iterable);","THEN_STATEMENT: (iterable instanceof Collection)","com.google.common.collect.FluentIterable.copyInto(C)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,ReverseNaturalOrdering)","com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,ReverseNaturalOrdering)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Map.Entry<?, ?> entry:multimap.entries()","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,AllEqualOrdering)","com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,AllEqualOrdering)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_REQUEST_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_ISOLATION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Appendable separatingAppendable = separatingAppendable(delegate, separator, afterEveryChars);","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new Writer() {
  public @Override void write(int c) throws IOException {
    separatingAppendable.append((char) c);
  }
  public @Override void write(char[] chars, int off, int len) throws IOException {
    throw new UnsupportedOperationException();
  }
  public @Override void flush() throws IOException {
    delegate.flush();
  }
  public @Override void close() throws IOException {
    delegate.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Encode all primes less than 66 into mask without 0 and 1.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long mask = ((((((((((((((((((1L << (2 - 2)) | (1L << (3 - 2))) | (1L << (5 - 2))) | (1L << (7 - 2))) | (1L << (11 - 2))) | (1L << (13 - 2))) | (1L << (17 - 2))) | (1L << (19 - 2))) | (1L << (23 - 2))) | (1L << (29 - 2))) | (1L << (31 - 2))) | (1L << (37 - 2))) | (1L << (41 - 2))) | (1L << (43 - 2))) | (1L << (47 - 2))) | (1L << (53 - 2))) | (1L << (59 - 2))) | (1L << (61 - 2)));","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Look up n within the mask.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","RETURN_STATEMENT: (((mask >> ((int) n - 2)) & 1) != 0);","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","IF_STATEMENT: (n < 66)","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_ORDERING_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.primitives.UnsignedLong_CustomFieldSerializer.serialize(SerializationStreamWriter,UnsignedLong)","com.google.common.primitives.UnsignedLong_CustomFieldSerializer.serialize(SerializationStreamWriter,UnsignedLong)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.primitives.UnsignedLong_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.primitives.UnsignedLong_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.serialize(SerializationStreamWriter,PairwiseEquivalence<?>)","com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.serialize(SerializationStreamWriter,PairwiseEquivalence<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Present_CustomFieldSerializer.serialize(SerializationStreamWriter,Present<?>)","com.google.common.base.Present_CustomFieldSerializer.serialize(SerializationStreamWriter,Present<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Present_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.Present_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Absent_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.Absent_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Absent_CustomFieldSerializer.serialize(SerializationStreamWriter,Absent<?>)","com.google.common.base.Absent_CustomFieldSerializer.serialize(SerializationStreamWriter,Absent<?>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
 * <b>Do not use this class directly. For access to public-suffix information, use {@link
 * com.google.common.net.InternetDomainName}.</b>
 *
 * <p>A generated static class containing public members which provide domain name patterns used in
 * determining whether a given domain name is an effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in a space-efficient manner.
 * {@see TrieParser}.
 *
 * @since 16.0
 */","CLASS: com.google.thirdparty.publicsuffix.PublicSuffixPatterns","com.google.thirdparty.publicsuffix.PublicSuffixPatterns","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: delegate().remove(key);","METHOD: com.google.common.collect.ForwardingMap.remove(Object)","com.google.common.collect.ForwardingMap.remove(Object)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_RENAMING","PARAMETER: key","PARAMETERS: ","com.google.common.collect.ForwardingMap.remove(Object)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ConcurrentLinkedQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newConcurrentLinkedQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ArrayDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newArrayDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: collection.addAll((Collection<E>) iterable);","THEN_STATEMENT: (iterable instanceof Collection)","com.google.common.collect.FluentIterable.copyInto(C)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_REQUEST_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_ISOLATION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Appendable separatingAppendable = separatingAppendable(delegate, separator, afterEveryChars);","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new Writer() {
  public @Override void write(int c) throws IOException {
    separatingAppendable.append((char) c);
  }
  public @Override void write(char[] chars, int off, int len) throws IOException {
    throw new UnsupportedOperationException();
  }
  public @Override void flush() throws IOException {
    delegate.flush();
  }
  public @Override void close() throws IOException {
    delegate.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Encode all primes less than 66 into mask without 0 and 1.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long mask = ((((((((((((((((((1L << (2 - 2)) | (1L << (3 - 2))) | (1L << (5 - 2))) | (1L << (7 - 2))) | (1L << (11 - 2))) | (1L << (13 - 2))) | (1L << (17 - 2))) | (1L << (19 - 2))) | (1L << (23 - 2))) | (1L << (29 - 2))) | (1L << (31 - 2))) | (1L << (37 - 2))) | (1L << (41 - 2))) | (1L << (43 - 2))) | (1L << (47 - 2))) | (1L << (53 - 2))) | (1L << (59 - 2))) | (1L << (61 - 2)));","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Look up n within the mask.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","RETURN_STATEMENT: (((mask >> ((int) n - 2)) & 1) != 0);","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","IF_STATEMENT: (n < 66)","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_ORDERING_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
 * <b>Do not use this class directly. For access to public-suffix information, use {@link
 * com.google.common.net.InternetDomainName}.</b>
 *
 * <p>A generated static class containing public members which provide domain name patterns used in
 * determining whether a given domain name is an effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in a space-efficient manner.
 * {@see TrieParser}.
 *
 * @since 16.0
 */","CLASS: com.google.thirdparty.publicsuffix.PublicSuffixPatterns","com.google.thirdparty.publicsuffix.PublicSuffixPatterns","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testToImmutableSet_java7()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_customComparator_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(3, 5).isConnected(Range.closed(5, 6)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(5, 6).isConnected(Range.closed(3, 5)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_invalidRangesWithInfinity()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.testing.EqualsTesterTest.testEqualityBasedOnToString()","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_CLASS","CLASS: com.google.common.testing.EqualsTesterTest.EqualsBasedOnToString","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.testing.EqualsTesterTest.testEqualityBasedOnToString()","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_CLASS","CLASS: com.google.common.testing.EqualsTesterTest.EqualsBasedOnToString","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.TreeRangeSetTest.testSubRangeSetReplaceAdd()","CLASS: com.google.common.collect.TreeRangeSetTest","com.google.common.collect.TreeRangeSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.TreeRangeSetTest.testSubRangeSetAdd()","CLASS: com.google.common.collect.TreeRangeSetTest","com.google.common.collect.TreeRangeSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testToImmutableSet_java7()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableRangeMapTest.testToImmutableRangeMap()","CLASS: com.google.common.collect.ImmutableRangeMapTest","com.google.common.collect.ImmutableRangeMapTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_customComparator_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(3, 5).isConnected(Range.closed(5, 6)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(5, 6).isConnected(Range.closed(3, 5)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_invalidRangesWithInfinity()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart_singleServiceCallsHealthy()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart_singleServiceCallsHealthy()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testEmptyServiceManager()","com.google.common.util.concurrent.ServiceManagerTest.testEmptyServiceManager()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStop()","com.google.common.util.concurrent.ServiceManagerTest.testFailStop()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(new Listener() {
  public @Override void failure(Service service) {
    manager.stopAsync();
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart_stopOthers()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart_stopOthers()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testSingleFailedServiceCallsStopped()","com.google.common.util.concurrent.ServiceManagerTest.testSingleFailedServiceCallsStopped()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailRun()","com.google.common.util.concurrent.ServiceManagerTest.testFailRun()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(new ServiceManager.Listener() {
  public @Override void failure(Service service) {
    failEnter.countDown();
    Uninterruptibles.awaitUninterruptibly(failLeave);
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testListenerDeadlock()","com.google.common.util.concurrent.ServiceManagerTest.testListenerDeadlock()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testServiceStartStop()","com.google.common.util.concurrent.ServiceManagerTest.testServiceStartStop()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: Arrays.fill(zeros, (byte) 0x00);","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testZeros()","com.google.common.hash.Crc32cHashFunctionTest.testZeros()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(String.format("expected: %08x, actual: %08x", expectedCrc, actualCrc), expectedCrc, actualCrc);","METHOD: com.google.common.hash.Crc32cHashFunctionTest.assertCrc(int,byte[])","com.google.common.hash.Crc32cHashFunctionTest.assertCrc(int,byte[])","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testZeros100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testDescending100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testEmpty()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testFull100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: delegate().remove(key);","METHOD: com.google.common.collect.ForwardingMap.remove(Object)","com.google.common.collect.ForwardingMap.remove(Object)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_RENAMING","PARAMETER: key","PARAMETERS: ","com.google.common.collect.ForwardingMap.remove(Object)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ConcurrentLinkedQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newConcurrentLinkedQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ArrayDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newArrayDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: TreeRangeSet.this.add(rangeToAdd);","METHOD: com.google.common.collect.TreeRangeSet.SubRangeSet.add(Range<C>)","com.google.common.collect.TreeRangeSet.SubRangeSet.add(Range<C>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: collection.addAll((Collection<E>) iterable);","THEN_STATEMENT: (iterable instanceof Collection)","com.google.common.collect.FluentIterable.copyInto(C)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_REQUEST_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_ISOLATION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: crc ^= 0xFFFFFFFF;","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","ASSIGNMENT: crc = ((crc >>> 8) ^ CRC_TABLE[((crc ^ b) & 0xFF)]);","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: HashCode.fromInt((~ crc));","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.hash()","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.hash()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
   * Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.
   */","METHOD: com.google.common.hash.HashCode.toString()","com.google.common.hash.HashCode.toString()","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Appendable separatingAppendable = separatingAppendable(delegate, separator, afterEveryChars);","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new Writer() {
  public @Override void write(int c) throws IOException {
    separatingAppendable.append((char) c);
  }
  public @Override void write(char[] chars, int off, int len) throws IOException {
    throw new UnsupportedOperationException();
  }
  public @Override void flush() throws IOException {
    delegate.flush();
  }
  public @Override void close() throws IOException {
    delegate.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Encode all primes less than 66 into mask without 0 and 1.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long mask = ((((((((((((((((((1L << (2 - 2)) | (1L << (3 - 2))) | (1L << (5 - 2))) | (1L << (7 - 2))) | (1L << (11 - 2))) | (1L << (13 - 2))) | (1L << (17 - 2))) | (1L << (19 - 2))) | (1L << (23 - 2))) | (1L << (29 - 2))) | (1L << (31 - 2))) | (1L << (37 - 2))) | (1L << (41 - 2))) | (1L << (43 - 2))) | (1L << (47 - 2))) | (1L << (53 - 2))) | (1L << (59 - 2))) | (1L << (61 - 2)));","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Look up n within the mask.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","RETURN_STATEMENT: (((mask >> ((int) n - 2)) & 1) != 0);","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","IF_STATEMENT: (n < 66)","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_ORDERING_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
 * <b>Do not use this class directly. For access to public-suffix information, use {@link
 * com.google.common.net.InternetDomainName}.</b>
 *
 * <p>A generated static class containing public members which provide domain name patterns used in
 * determining whether a given domain name is an effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in a space-efficient manner.
 * {@see TrieParser}.
 *
 * @since 16.0
 */","CLASS: com.google.thirdparty.publicsuffix.PublicSuffixPatterns","com.google.thirdparty.publicsuffix.PublicSuffixPatterns","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.testing.EqualsTesterTest.testEqualityBasedOnToString()","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_CLASS","CLASS: com.google.common.testing.EqualsTesterTest.EqualsBasedOnToString","CLASS: com.google.common.testing.EqualsTesterTest","com.google.common.testing.EqualsTesterTest","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.TreeRangeSetTest.testSubRangeSetReplaceAdd()","CLASS: com.google.common.collect.TreeRangeSetTest","com.google.common.collect.TreeRangeSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.TreeRangeSetTest.testSubRangeSetAdd()","CLASS: com.google.common.collect.TreeRangeSetTest","com.google.common.collect.TreeRangeSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testToImmutableSet_java7()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableRangeMapTest.testToImmutableRangeMap()","CLASS: com.google.common.collect.ImmutableRangeMapTest","com.google.common.collect.ImmutableRangeMapTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_customComparator_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testToImmutableSortedSet_java7()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(3, 5).isConnected(Range.closed(5, 6)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: assertTrue(Range.closed(5, 6).isConnected(Range.closed(3, 5)));","METHOD: com.google.common.collect.RangeTest.testIsConnected()","com.google.common.collect.RangeTest.testIsConnected()","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_invalidRangesWithInfinity()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart_singleServiceCallsHealthy()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart_singleServiceCallsHealthy()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testEmptyServiceManager()","com.google.common.util.concurrent.ServiceManagerTest.testEmptyServiceManager()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStop()","com.google.common.util.concurrent.ServiceManagerTest.testFailStop()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(new Listener() {
  public @Override void failure(Service service) {
    manager.stopAsync();
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailStart_stopOthers()","com.google.common.util.concurrent.ServiceManagerTest.testFailStart_stopOthers()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testSingleFailedServiceCallsStopped()","com.google.common.util.concurrent.ServiceManagerTest.testSingleFailedServiceCallsStopped()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testFailRun()","com.google.common.util.concurrent.ServiceManagerTest.testFailRun()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(new ServiceManager.Listener() {
  public @Override void failure(Service service) {
    failEnter.countDown();
    Uninterruptibles.awaitUninterruptibly(failLeave);
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testListenerDeadlock()","com.google.common.util.concurrent.ServiceManagerTest.testListenerDeadlock()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.addListener(listener, directExecutor());","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testServiceStartStop()","com.google.common.util.concurrent.ServiceManagerTest.testServiceStartStop()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: Arrays.fill(zeros, (byte) 0x00);","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testZeros()","com.google.common.hash.Crc32cHashFunctionTest.testZeros()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(String.format("expected: %08x, actual: %08x", expectedCrc, actualCrc), expectedCrc, actualCrc);","METHOD: com.google.common.hash.Crc32cHashFunctionTest.assertCrc(int,byte[])","com.google.common.hash.Crc32cHashFunctionTest.assertCrc(int,byte[])","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testZeros100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testDescending100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testEmpty()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Crc32cHashFunctionTest.testFull100()","CLASS: com.google.common.hash.Crc32cHashFunctionTest","com.google.common.hash.Crc32cHashFunctionTest","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: delegate().remove(key);","METHOD: com.google.common.collect.ForwardingMap.remove(Object)","com.google.common.collect.ForwardingMap.remove(Object)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"PARAMETER_RENAMING","PARAMETER: key","PARAMETERS: ","com.google.common.collect.ForwardingMap.remove(Object)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableSet.Builder","com.google.common.collect.ImmutableSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ConcurrentLinkedQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newConcurrentLinkedQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityBlockingQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityBlockingQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new PriorityQueue<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newPriorityQueue(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new ArrayDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newArrayDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new LinkedBlockingDeque<E>((Collection<? extends E>) elements);","THEN_STATEMENT: (elements instanceof Collection)","com.google.common.collect.Queues.newLinkedBlockingDeque(Iterable<? extends E>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: TreeRangeSet.this.add(rangeToAdd);","METHOD: com.google.common.collect.TreeRangeSet.SubRangeSet.add(Range<C>)","com.google.common.collect.TreeRangeSet.SubRangeSet.add(Range<C>)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","METHOD_INVOCATION: collection.addAll((Collection<E>) iterable);","THEN_STATEMENT: (iterable instanceof Collection)","com.google.common.collect.FluentIterable.copyInto(C)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.Builder.combine(Builder<E>)","CLASS: com.google.common.collect.ImmutableList.Builder","com.google.common.collect.ImmutableList.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: checkElementsNotNull(elements);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: getReadyToExpandTo((size + elements.length));","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(elements, 0, contents, size, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: size += elements.length;","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","METHOD_INVOCATION: addAll(elements, elements.length);","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.add(E...)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder.addAll(Object[],int)","CLASS: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","com.google.common.collect.ImmutableCollection.ArrayBasedBuilder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSet.Builder.combine(ImmutableSet.Builder<E>)","CLASS: com.google.common.collect.ImmutableSortedSet.Builder","com.google.common.collect.ImmutableSortedSet.Builder","HIGH"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_REQUEST_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_ISOLATION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","ASSIGNMENT: crc ^= 0xFFFFFFFF;","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","ASSIGNMENT: crc = ((crc >>> 8) ^ CRC_TABLE[((crc ^ b) & 0xFF)]);","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.update(byte)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: HashCode.fromInt((~ crc));","METHOD: com.google.common.hash.Crc32cHashFunction.Crc32cHasher.hash()","com.google.common.hash.Crc32cHashFunction.Crc32cHasher.hash()","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
   * Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.
   */","METHOD: com.google.common.hash.HashCode.toString()","com.google.common.hash.HashCode.toString()","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Appendable separatingAppendable = separatingAppendable(delegate, separator, afterEveryChars);","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_UPDATE","RETURN_STATEMENT: new Writer() {
  public @Override void write(int c) throws IOException {
    separatingAppendable.append((char) c);
  }
  public @Override void write(char[] chars, int off, int len) throws IOException {
    throw new UnsupportedOperationException();
  }
  public @Override void flush() throws IOException {
    delegate.flush();
  }
  public @Override void close() throws IOException {
    delegate.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","com.google.common.io.BaseEncoding.separatingWriter(Writer,String,int)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_INSERT","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Encode all primes less than 66 into mask without 0 and 1.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long mask = ((((((((((((((((((1L << (2 - 2)) | (1L << (3 - 2))) | (1L << (5 - 2))) | (1L << (7 - 2))) | (1L << (11 - 2))) | (1L << (13 - 2))) | (1L << (17 - 2))) | (1L << (19 - 2))) | (1L << (23 - 2))) | (1L << (29 - 2))) | (1L << (31 - 2))) | (1L << (37 - 2))) | (1L << (41 - 2))) | (1L << (43 - 2))) | (1L << (47 - 2))) | (1L << (53 - 2))) | (1L << (59 - 2))) | (1L << (61 - 2)));","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"COMMENT_DELETE","LINE_COMMENT: // Look up n within the mask.","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","NONE"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","RETURN_STATEMENT: (((mask >> ((int) n - 2)) & 1) != 0);","THEN_STATEMENT: (n < 66)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_DELETE","IF_STATEMENT: (n < 66)","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_ORDERING_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","LOW"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: true;","THEN_STATEMENT: (n <= baseSet[0])","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (n < (17 * 17))","METHOD: com.google.common.math.LongMath.isPrime(long)","com.google.common.math.LongMath.isPrime(long)","MEDIUM"
2,597b86c45e53c60b20ddba85c0f8c5fc8e278d19,"DOC_UPDATE","JAVADOC: /**
 * <b>Do not use this class directly. For access to public-suffix information, use {@link
 * com.google.common.net.InternetDomainName}.</b>
 *
 * <p>A generated static class containing public members which provide domain name patterns used in
 * determining whether a given domain name is an effective top-level domain (public suffix).
 *
 * <p>Because this class is used in GWT, the data members are stored in a space-efficient manner.
 * {@see TrieParser}.
 *
 * @since 16.0
 */","CLASS: com.google.thirdparty.publicsuffix.PublicSuffixPatterns","com.google.thirdparty.publicsuffix.PublicSuffixPatterns","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.eventbus.EventBusTest.testPrimitiveSubscribeFails()","CLASS: com.google.common.eventbus.EventBusTest","com.google.common.eventbus.EventBusTest","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // too few parts","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", ".42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "42.42.42.ab", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "6:5:4:3:2:1:0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_ARCH : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: List<String> parts = IPV6_SPLITTER.splitToList(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Disregarding the endpoints, find "::" with nothing in between.
    // This indicates that a run of zeroes has been skipped.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int skipIndex = (- 1);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i < (parts.size() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int partsHi;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Number of parts to copy from above/before the "::"","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int partsLo;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Number of parts to copy from below/after the "::"","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","IF_STATEMENT: (skipIndex >= 0)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // If we found a ::, then we must have skipped at least one part.
    // Otherwise, we must have exactly the right number of parts.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Now parse the hextets into a byte array.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","IF_STATEMENT: (parts.get(i).length() == 0)","FOR_STATEMENT: (i < (parts.size() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (skipIndex >= 0)","IF_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 1;","FOR_INIT: int i = 1;","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // If we found a "::", then check if it also covers the endpoints.","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsHi = skipIndex;","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsLo = ((parts.size() - skipIndex) - 1);","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Otherwise, allocate the entire address to partsHi. The endpoints
      // could still be empty, but parseHextet() will check for that.","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsHi = parts.size();","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsLo = 0;","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i < partsHi)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i > 0)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: skipIndex = i;","THEN_STATEMENT: (parts.get(i).length() == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get((parts.size() - i))));","FOR_STATEMENT: (i > 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = partsLo;","FOR_INIT: int i = partsLo;","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i --;","FOR_INCR: i --","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int delimiterCount = IPV6_DELIMITER_MATCHER.countIn(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // estimate; may be modified later","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean hasSkip = false;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Scan for the appearance of ::, to mark a skip-format IPV6 string and adjust the partsSkipped
    // estimate.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: hasSkip = true;","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // :: means we skipped an extra part in between the two delimiters.","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: (i == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (i == 0)","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Begins with ::, so we skipped the part preceding the first :","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: (i == (ipString.length() - 2))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (i == (ipString.length() - 2))","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","FOR_STATEMENT: (i < (ipString.length() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","FOR_STATEMENT: (i < (ipString.length() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Ends with ::, so we skipped the part after the last :","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // :: must expand to at least one '0'","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: ((! hasSkip) && ((delimiterCount + 1) != IPV6_PART_COUNT))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Incorrect number of parts","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Iterate through the parts of the ip string.
      // Invariant: start is always the beginning of a hextet, or the second ':' of the skip
      // sequence "::"","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int start = 0;","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: start = 1;","THEN_STATEMENT: (ipString.charAt(0) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (ipString.charAt(0) == IPV6_DELIMITER)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int end = ipString.indexOf(IPV6_DELIMITER, start);","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: end = ipString.length();","THEN_STATEMENT: (end == (- 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (end == (- 1))","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // expand zeroes","THEN_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","IF_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: start = (end + 1);","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","WHILE_STATEMENT: (start < ipString.length())","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","RETURN_STATEMENT: null;","CATCH_CLAUSE: NumberFormatException","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: ((ipString.charAt(0) == IPV6_DELIMITER) && (ipString.charAt(1) != IPV6_DELIMITER))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // ^: requires ^::","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: ((ipString.charAt((ipString.length() - 1)) == IPV6_DELIMITER) && (ipString.charAt((ipString.length() - 2)) != IPV6_DELIMITER))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // :$ requires ::$","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","FOR_STATEMENT: (i < partsSkipped)","THEN_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: hasSkip","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // Can't have more than one ::","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(ipString, start, end));","ELSE_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: ((! hasSkip) && ((delimiterCount + 1) != IPV6_PART_COUNT))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_UPDATE","LINE_COMMENT: // An address can have [2..8] colons.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((delimiterCount < 2) || (delimiterCount > IPV6_PART_COUNT))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int partsSkipped = (IPV6_PART_COUNT - (delimiterCount + 1));","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (hasSkip && (partsSkipped <= 0))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((ipString.charAt(0) == IPV6_DELIMITER) && (ipString.charAt(1) != IPV6_DELIMITER))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((ipString.charAt((ipString.length() - 1)) == IPV6_DELIMITER) && (ipString.charAt((ipString.length() - 2)) != IPV6_DELIMITER))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: hasSkip","THEN_STATEMENT: (parts.get(i).length() == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(ipString, start, end));","FOR_STATEMENT: (i < partsHi)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_DELIMITER_MATCHER : CharMatcher","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_DELIMITER : char","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ListenableFutureTask.get(long,TimeUnit)","CLASS: com.google.common.util.concurrent.ListenableFutureTask","com.google.common.util.concurrent.ListenableFutureTask","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: scratch.clear();","FINALLY: ","com.google.common.hash.AbstractByteHasher.update(int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(scratch);","FINALLY: ","com.google.common.hash.AbstractByteHasher.update(int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(b, b.limit());","THEN_STATEMENT: b.hasArray()","com.google.common.hash.AbstractByteHasher.update(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buffer.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.munch()","com.google.common.hash.AbstractStreamingHasher.munch()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buffer);","METHOD: com.google.common.hash.AbstractStreamingHasher.munch()","com.google.common.hash.AbstractStreamingHasher.munch()","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: bb.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(bb);","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(bb, bb.limit());","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bb, (chunkSize + 7));","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bb, chunkSize);","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buffer.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.hash()","com.google.common.hash.AbstractStreamingHasher.hash()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buffer);","METHOD: com.google.common.hash.AbstractStreamingHasher.hash()","com.google.common.hash.AbstractStreamingHasher.hash()","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(buffer, buffer.limit());","THEN_STATEMENT: (buffer.remaining() > 0)","com.google.common.hash.AbstractStreamingHasher.hash()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","RETURN_STATEMENT: new Hasher() {
  public @Override Hasher putByte(byte b) {
    for (Hasher hasher : hashers) 
      {
        hasher.putByte(b);
      }
    return this;
  }
  public @Override Hasher putBytes(byte[] bytes) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBytes(bytes);
      }
    return this;
  }
  public @Override Hasher putBytes(byte[] bytes, int off, int len) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBytes(bytes, off, len);
      }
    return this;
  }
  public @Override Hasher putBytes(ByteBuffer bytes) {
    int pos = bytes.position();
    for (Hasher hasher : hashers) 
      {
        Java8Compatibility.position(bytes, pos);
        hasher.putBytes(bytes);
      }
    return this;
  }
  public @Override Hasher putShort(short s) {
    for (Hasher hasher : hashers) 
      {
        hasher.putShort(s);
      }
    return this;
  }
  public @Override Hasher putInt(int i) {
    for (Hasher hasher : hashers) 
      {
        hasher.putInt(i);
      }
    return this;
  }
  public @Override Hasher putLong(long l) {
    for (Hasher hasher : hashers) 
      {
        hasher.putLong(l);
      }
    return this;
  }
  public @Override Hasher putFloat(float f) {
    for (Hasher hasher : hashers) 
      {
        hasher.putFloat(f);
      }
    return this;
  }
  public @Override Hasher putDouble(double d) {
    for (Hasher hasher : hashers) 
      {
        hasher.putDouble(d);
      }
    return this;
  }
  public @Override Hasher putBoolean(boolean b) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBoolean(b);
      }
    return this;
  }
  public @Override Hasher putChar(char c) {
    for (Hasher hasher : hashers) 
      {
        hasher.putChar(c);
      }
    return this;
  }
  public @Override Hasher putUnencodedChars(CharSequence chars) {
    for (Hasher hasher : hashers) 
      {
        hasher.putUnencodedChars(chars);
      }
    return this;
  }
  public @Override Hasher putString(CharSequence chars, Charset charset) {
    for (Hasher hasher : hashers) 
      {
        hasher.putString(chars, charset);
      }
    return this;
  }
  public @Override <T>Hasher putObject(T instance, Funnel<? super T> funnel) {
    for (Hasher hasher : hashers) 
      {
        hasher.putObject(instance, funnel);
      }
    return this;
  }
  public @Override HashCode hash() {
    return makeHash(hashers);
  }
};","METHOD: com.google.common.hash.AbstractCompositeHashFunction.fromHashers(Hasher[])","com.google.common.hash.AbstractCompositeHashFunction.fromHashers(Hasher[])","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(b, b.limit());","THEN_STATEMENT: b.hasArray()","com.google.common.hash.AbstractHasher.putBytes(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(bigger, buf.position());","METHOD: com.google.common.io.ReaderInputStream.grow(CharBuffer)","com.google.common.io.ReaderInputStream.grow(CharBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bigger, buf.limit());","METHOD: com.google.common.io.ReaderInputStream.grow(CharBuffer)","com.google.common.io.ReaderInputStream.grow(CharBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(charBuffer, (limit + numChars));","ELSE_STATEMENT: (numChars == (- 1))","com.google.common.io.ReaderInputStream.readMoreChars()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.flip(charBuffer.compact());","THEN_STATEMENT: (charBuffer.position() > 0)","com.google.common.io.ReaderInputStream.readMoreChars()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: byteBuffer.clear();","THEN_STATEMENT: draining","com.google.common.io.ReaderInputStream.read(byte[],int,int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(byteBuffer);","THEN_STATEMENT: draining","com.google.common.io.ReaderInputStream.read(byte[],int,int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: byteBuffer.flip();","METHOD: com.google.common.io.ReaderInputStream.startDraining(boolean)","com.google.common.io.ReaderInputStream.startDraining(boolean)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(byteBuffer);","METHOD: com.google.common.io.ReaderInputStream.startDraining(boolean)","com.google.common.io.ReaderInputStream.startDraining(boolean)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: charBuffer.flip();","METHOD: com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(charBuffer);","METHOD: com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","WHILE_STATEMENT: (from.read(buf) != (- 1))","METHOD: com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buf.flip();","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buf.clear();","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buf);","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(buf);","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","WHILE_STATEMENT: (from.read(buf) != (- 1))","METHOD: com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_ORDERING_CHANGE","WHILE_STATEMENT: buf.hasRemaining()","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_ARCH : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_ARCH : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.eventbus.EventBusTest.testPrimitiveSubscribeFails()","CLASS: com.google.common.eventbus.EventBusTest","com.google.common.eventbus.EventBusTest","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // too few parts","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", ".42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "42.42.42.ab", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "6:5:4:3:2:1:0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_ARCH : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: List<String> parts = IPV6_SPLITTER.splitToList(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Disregarding the endpoints, find "::" with nothing in between.
    // This indicates that a run of zeroes has been skipped.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int skipIndex = (- 1);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i < (parts.size() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int partsHi;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Number of parts to copy from above/before the "::"","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int partsLo;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Number of parts to copy from below/after the "::"","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","IF_STATEMENT: (skipIndex >= 0)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // If we found a ::, then we must have skipped at least one part.
    // Otherwise, we must have exactly the right number of parts.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Now parse the hextets into a byte array.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","IF_STATEMENT: (parts.get(i).length() == 0)","FOR_STATEMENT: (i < (parts.size() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (skipIndex >= 0)","IF_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 1;","FOR_INIT: int i = 1;","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // If we found a "::", then check if it also covers the endpoints.","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsHi = skipIndex;","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsLo = ((parts.size() - skipIndex) - 1);","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Otherwise, allocate the entire address to partsHi. The endpoints
      // could still be empty, but parseHextet() will check for that.","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsHi = parts.size();","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsLo = 0;","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i < partsHi)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i > 0)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: skipIndex = i;","THEN_STATEMENT: (parts.get(i).length() == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get((parts.size() - i))));","FOR_STATEMENT: (i > 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = partsLo;","FOR_INIT: int i = partsLo;","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i --;","FOR_INCR: i --","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int delimiterCount = IPV6_DELIMITER_MATCHER.countIn(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // estimate; may be modified later","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean hasSkip = false;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Scan for the appearance of ::, to mark a skip-format IPV6 string and adjust the partsSkipped
    // estimate.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: hasSkip = true;","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // :: means we skipped an extra part in between the two delimiters.","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: (i == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (i == 0)","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Begins with ::, so we skipped the part preceding the first :","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: (i == (ipString.length() - 2))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (i == (ipString.length() - 2))","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","FOR_STATEMENT: (i < (ipString.length() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","FOR_STATEMENT: (i < (ipString.length() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Ends with ::, so we skipped the part after the last :","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // :: must expand to at least one '0'","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: ((! hasSkip) && ((delimiterCount + 1) != IPV6_PART_COUNT))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Incorrect number of parts","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Iterate through the parts of the ip string.
      // Invariant: start is always the beginning of a hextet, or the second ':' of the skip
      // sequence "::"","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int start = 0;","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: start = 1;","THEN_STATEMENT: (ipString.charAt(0) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (ipString.charAt(0) == IPV6_DELIMITER)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int end = ipString.indexOf(IPV6_DELIMITER, start);","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: end = ipString.length();","THEN_STATEMENT: (end == (- 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (end == (- 1))","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // expand zeroes","THEN_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","IF_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: start = (end + 1);","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","WHILE_STATEMENT: (start < ipString.length())","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","RETURN_STATEMENT: null;","CATCH_CLAUSE: NumberFormatException","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: ((ipString.charAt(0) == IPV6_DELIMITER) && (ipString.charAt(1) != IPV6_DELIMITER))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // ^: requires ^::","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: ((ipString.charAt((ipString.length() - 1)) == IPV6_DELIMITER) && (ipString.charAt((ipString.length() - 2)) != IPV6_DELIMITER))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // :$ requires ::$","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","FOR_STATEMENT: (i < partsSkipped)","THEN_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: hasSkip","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // Can't have more than one ::","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(ipString, start, end));","ELSE_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: ((! hasSkip) && ((delimiterCount + 1) != IPV6_PART_COUNT))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_UPDATE","LINE_COMMENT: // An address can have [2..8] colons.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((delimiterCount < 2) || (delimiterCount > IPV6_PART_COUNT))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int partsSkipped = (IPV6_PART_COUNT - (delimiterCount + 1));","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (hasSkip && (partsSkipped <= 0))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((ipString.charAt(0) == IPV6_DELIMITER) && (ipString.charAt(1) != IPV6_DELIMITER))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((ipString.charAt((ipString.length() - 1)) == IPV6_DELIMITER) && (ipString.charAt((ipString.length() - 2)) != IPV6_DELIMITER))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: hasSkip","THEN_STATEMENT: (parts.get(i).length() == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(ipString, start, end));","FOR_STATEMENT: (i < partsHi)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_DELIMITER_MATCHER : CharMatcher","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_DELIMITER : char","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ListenableFutureTask.get(long,TimeUnit)","CLASS: com.google.common.util.concurrent.ListenableFutureTask","com.google.common.util.concurrent.ListenableFutureTask","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: scratch.clear();","FINALLY: ","com.google.common.hash.AbstractByteHasher.update(int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(scratch);","FINALLY: ","com.google.common.hash.AbstractByteHasher.update(int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(b, b.limit());","THEN_STATEMENT: b.hasArray()","com.google.common.hash.AbstractByteHasher.update(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buffer.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.munch()","com.google.common.hash.AbstractStreamingHasher.munch()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buffer);","METHOD: com.google.common.hash.AbstractStreamingHasher.munch()","com.google.common.hash.AbstractStreamingHasher.munch()","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: bb.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(bb);","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(bb, bb.limit());","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bb, (chunkSize + 7));","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bb, chunkSize);","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buffer.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.hash()","com.google.common.hash.AbstractStreamingHasher.hash()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buffer);","METHOD: com.google.common.hash.AbstractStreamingHasher.hash()","com.google.common.hash.AbstractStreamingHasher.hash()","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(buffer, buffer.limit());","THEN_STATEMENT: (buffer.remaining() > 0)","com.google.common.hash.AbstractStreamingHasher.hash()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","RETURN_STATEMENT: new Hasher() {
  public @Override Hasher putByte(byte b) {
    for (Hasher hasher : hashers) 
      {
        hasher.putByte(b);
      }
    return this;
  }
  public @Override Hasher putBytes(byte[] bytes) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBytes(bytes);
      }
    return this;
  }
  public @Override Hasher putBytes(byte[] bytes, int off, int len) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBytes(bytes, off, len);
      }
    return this;
  }
  public @Override Hasher putBytes(ByteBuffer bytes) {
    int pos = bytes.position();
    for (Hasher hasher : hashers) 
      {
        Java8Compatibility.position(bytes, pos);
        hasher.putBytes(bytes);
      }
    return this;
  }
  public @Override Hasher putShort(short s) {
    for (Hasher hasher : hashers) 
      {
        hasher.putShort(s);
      }
    return this;
  }
  public @Override Hasher putInt(int i) {
    for (Hasher hasher : hashers) 
      {
        hasher.putInt(i);
      }
    return this;
  }
  public @Override Hasher putLong(long l) {
    for (Hasher hasher : hashers) 
      {
        hasher.putLong(l);
      }
    return this;
  }
  public @Override Hasher putFloat(float f) {
    for (Hasher hasher : hashers) 
      {
        hasher.putFloat(f);
      }
    return this;
  }
  public @Override Hasher putDouble(double d) {
    for (Hasher hasher : hashers) 
      {
        hasher.putDouble(d);
      }
    return this;
  }
  public @Override Hasher putBoolean(boolean b) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBoolean(b);
      }
    return this;
  }
  public @Override Hasher putChar(char c) {
    for (Hasher hasher : hashers) 
      {
        hasher.putChar(c);
      }
    return this;
  }
  public @Override Hasher putUnencodedChars(CharSequence chars) {
    for (Hasher hasher : hashers) 
      {
        hasher.putUnencodedChars(chars);
      }
    return this;
  }
  public @Override Hasher putString(CharSequence chars, Charset charset) {
    for (Hasher hasher : hashers) 
      {
        hasher.putString(chars, charset);
      }
    return this;
  }
  public @Override <T>Hasher putObject(T instance, Funnel<? super T> funnel) {
    for (Hasher hasher : hashers) 
      {
        hasher.putObject(instance, funnel);
      }
    return this;
  }
  public @Override HashCode hash() {
    return makeHash(hashers);
  }
};","METHOD: com.google.common.hash.AbstractCompositeHashFunction.fromHashers(Hasher[])","com.google.common.hash.AbstractCompositeHashFunction.fromHashers(Hasher[])","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(b, b.limit());","THEN_STATEMENT: b.hasArray()","com.google.common.hash.AbstractHasher.putBytes(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(bigger, buf.position());","METHOD: com.google.common.io.ReaderInputStream.grow(CharBuffer)","com.google.common.io.ReaderInputStream.grow(CharBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bigger, buf.limit());","METHOD: com.google.common.io.ReaderInputStream.grow(CharBuffer)","com.google.common.io.ReaderInputStream.grow(CharBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(charBuffer, (limit + numChars));","ELSE_STATEMENT: (numChars == (- 1))","com.google.common.io.ReaderInputStream.readMoreChars()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.flip(charBuffer.compact());","THEN_STATEMENT: (charBuffer.position() > 0)","com.google.common.io.ReaderInputStream.readMoreChars()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: byteBuffer.clear();","THEN_STATEMENT: draining","com.google.common.io.ReaderInputStream.read(byte[],int,int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(byteBuffer);","THEN_STATEMENT: draining","com.google.common.io.ReaderInputStream.read(byte[],int,int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: byteBuffer.flip();","METHOD: com.google.common.io.ReaderInputStream.startDraining(boolean)","com.google.common.io.ReaderInputStream.startDraining(boolean)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(byteBuffer);","METHOD: com.google.common.io.ReaderInputStream.startDraining(boolean)","com.google.common.io.ReaderInputStream.startDraining(boolean)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: charBuffer.flip();","METHOD: com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(charBuffer);","METHOD: com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","WHILE_STATEMENT: (from.read(buf) != (- 1))","METHOD: com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buf.flip();","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buf.clear();","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buf);","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(buf);","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","WHILE_STATEMENT: (from.read(buf) != (- 1))","METHOD: com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_ORDERING_CHANGE","WHILE_STATEMENT: buf.hasRemaining()","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.eventbus.EventBusTest.testPrimitiveSubscribeFails()","CLASS: com.google.common.eventbus.EventBusTest","com.google.common.eventbus.EventBusTest","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // too few parts","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", ".42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "42.42.42.ab", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "6:5:4:3:2:1:0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_ARCH : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: List<String> parts = IPV6_SPLITTER.splitToList(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Disregarding the endpoints, find "::" with nothing in between.
    // This indicates that a run of zeroes has been skipped.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int skipIndex = (- 1);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i < (parts.size() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int partsHi;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Number of parts to copy from above/before the "::"","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int partsLo;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Number of parts to copy from below/after the "::"","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","IF_STATEMENT: (skipIndex >= 0)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // If we found a ::, then we must have skipped at least one part.
    // Otherwise, we must have exactly the right number of parts.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Now parse the hextets into a byte array.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","IF_STATEMENT: (parts.get(i).length() == 0)","FOR_STATEMENT: (i < (parts.size() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (skipIndex >= 0)","IF_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 1;","FOR_INIT: int i = 1;","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // If we found a "::", then check if it also covers the endpoints.","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsHi = skipIndex;","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsLo = ((parts.size() - skipIndex) - 1);","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_INSERT","LINE_COMMENT: // Otherwise, allocate the entire address to partsHi. The endpoints
      // could still be empty, but parseHextet() will check for that.","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsHi = parts.size();","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: partsLo = 0;","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i < partsHi)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","FOR_STATEMENT: (i > 0)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","ASSIGNMENT: skipIndex = i;","THEN_STATEMENT: (parts.get(i).length() == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get((parts.size() - i))));","FOR_STATEMENT: (i > 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = partsLo;","FOR_INIT: int i = partsLo;","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i --;","FOR_INCR: i --","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int delimiterCount = IPV6_DELIMITER_MATCHER.countIn(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // estimate; may be modified later","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean hasSkip = false;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Scan for the appearance of ::, to mark a skip-format IPV6 string and adjust the partsSkipped
    // estimate.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: hasSkip = true;","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // :: means we skipped an extra part in between the two delimiters.","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: (i == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (i == 0)","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Begins with ::, so we skipped the part preceding the first :","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","POSTFIX_EXPRESSION: partsSkipped ++;","THEN_STATEMENT: (i == (ipString.length() - 2))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (i == (ipString.length() - 2))","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","FOR_STATEMENT: (i < (ipString.length() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","FOR_STATEMENT: (i < (ipString.length() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Ends with ::, so we skipped the part after the last :","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // :: must expand to at least one '0'","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: ((! hasSkip) && ((delimiterCount + 1) != IPV6_PART_COUNT))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Incorrect number of parts","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // Iterate through the parts of the ip string.
      // Invariant: start is always the beginning of a hextet, or the second ':' of the skip
      // sequence "::"","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int start = 0;","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: start = 1;","THEN_STATEMENT: (ipString.charAt(0) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (ipString.charAt(0) == IPV6_DELIMITER)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int end = ipString.indexOf(IPV6_DELIMITER, start);","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: end = ipString.length();","THEN_STATEMENT: (end == (- 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (end == (- 1))","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_DELETE","LINE_COMMENT: // expand zeroes","THEN_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","IF_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","ASSIGNMENT: start = (end + 1);","WHILE_STATEMENT: (start < ipString.length())","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","WHILE_STATEMENT: (start < ipString.length())","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","RETURN_STATEMENT: null;","CATCH_CLAUSE: NumberFormatException","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: ((ipString.charAt(0) == IPV6_DELIMITER) && (ipString.charAt(1) != IPV6_DELIMITER))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // ^: requires ^::","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: ((ipString.charAt((ipString.length() - 1)) == IPV6_DELIMITER) && (ipString.charAt((ipString.length() - 2)) != IPV6_DELIMITER))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // :$ requires ::$","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","FOR_STATEMENT: (i < partsSkipped)","THEN_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: hasSkip","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_MOVE","LINE_COMMENT: // Can't have more than one ::","THEN_STATEMENT: ((ipString.charAt(i) == IPV6_DELIMITER) && (ipString.charAt((i + 1)) == IPV6_DELIMITER))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(ipString, start, end));","ELSE_STATEMENT: (ipString.charAt(start) == IPV6_DELIMITER)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: ((! hasSkip) && ((delimiterCount + 1) != IPV6_PART_COUNT))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"COMMENT_UPDATE","LINE_COMMENT: // An address can have [2..8] colons.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","NONE"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((delimiterCount < 2) || (delimiterCount > IPV6_PART_COUNT))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int partsSkipped = (IPV6_PART_COUNT - (delimiterCount + 1));","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (hasSkip && (partsSkipped <= 0))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((ipString.charAt(0) == IPV6_DELIMITER) && (ipString.charAt(1) != IPV6_DELIMITER))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((ipString.charAt((ipString.length() - 1)) == IPV6_DELIMITER) && (ipString.charAt((ipString.length() - 2)) != IPV6_DELIMITER))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: hasSkip","THEN_STATEMENT: (parts.get(i).length() == 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(ipString, start, end));","FOR_STATEMENT: (i < partsHi)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_DELIMITER_MATCHER : CharMatcher","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_DELIMITER : char","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
4,7fad458114db33674e5fd563f5688eba24e0612e,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ListenableFutureTask.get(long,TimeUnit)","CLASS: com.google.common.util.concurrent.ListenableFutureTask","com.google.common.util.concurrent.ListenableFutureTask","CRUCIAL"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: scratch.clear();","FINALLY: ","com.google.common.hash.AbstractByteHasher.update(int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(scratch);","FINALLY: ","com.google.common.hash.AbstractByteHasher.update(int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(b, b.limit());","THEN_STATEMENT: b.hasArray()","com.google.common.hash.AbstractByteHasher.update(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buffer.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.munch()","com.google.common.hash.AbstractStreamingHasher.munch()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buffer);","METHOD: com.google.common.hash.AbstractStreamingHasher.munch()","com.google.common.hash.AbstractStreamingHasher.munch()","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: bb.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(bb);","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(bb, bb.limit());","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bb, (chunkSize + 7));","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bb, chunkSize);","METHOD: com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","com.google.common.hash.AbstractStreamingHasher.processRemaining(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buffer.flip();","METHOD: com.google.common.hash.AbstractStreamingHasher.hash()","com.google.common.hash.AbstractStreamingHasher.hash()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buffer);","METHOD: com.google.common.hash.AbstractStreamingHasher.hash()","com.google.common.hash.AbstractStreamingHasher.hash()","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(buffer, buffer.limit());","THEN_STATEMENT: (buffer.remaining() > 0)","com.google.common.hash.AbstractStreamingHasher.hash()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","RETURN_STATEMENT: new Hasher() {
  public @Override Hasher putByte(byte b) {
    for (Hasher hasher : hashers) 
      {
        hasher.putByte(b);
      }
    return this;
  }
  public @Override Hasher putBytes(byte[] bytes) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBytes(bytes);
      }
    return this;
  }
  public @Override Hasher putBytes(byte[] bytes, int off, int len) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBytes(bytes, off, len);
      }
    return this;
  }
  public @Override Hasher putBytes(ByteBuffer bytes) {
    int pos = bytes.position();
    for (Hasher hasher : hashers) 
      {
        Java8Compatibility.position(bytes, pos);
        hasher.putBytes(bytes);
      }
    return this;
  }
  public @Override Hasher putShort(short s) {
    for (Hasher hasher : hashers) 
      {
        hasher.putShort(s);
      }
    return this;
  }
  public @Override Hasher putInt(int i) {
    for (Hasher hasher : hashers) 
      {
        hasher.putInt(i);
      }
    return this;
  }
  public @Override Hasher putLong(long l) {
    for (Hasher hasher : hashers) 
      {
        hasher.putLong(l);
      }
    return this;
  }
  public @Override Hasher putFloat(float f) {
    for (Hasher hasher : hashers) 
      {
        hasher.putFloat(f);
      }
    return this;
  }
  public @Override Hasher putDouble(double d) {
    for (Hasher hasher : hashers) 
      {
        hasher.putDouble(d);
      }
    return this;
  }
  public @Override Hasher putBoolean(boolean b) {
    for (Hasher hasher : hashers) 
      {
        hasher.putBoolean(b);
      }
    return this;
  }
  public @Override Hasher putChar(char c) {
    for (Hasher hasher : hashers) 
      {
        hasher.putChar(c);
      }
    return this;
  }
  public @Override Hasher putUnencodedChars(CharSequence chars) {
    for (Hasher hasher : hashers) 
      {
        hasher.putUnencodedChars(chars);
      }
    return this;
  }
  public @Override Hasher putString(CharSequence chars, Charset charset) {
    for (Hasher hasher : hashers) 
      {
        hasher.putString(chars, charset);
      }
    return this;
  }
  public @Override <T>Hasher putObject(T instance, Funnel<? super T> funnel) {
    for (Hasher hasher : hashers) 
      {
        hasher.putObject(instance, funnel);
      }
    return this;
  }
  public @Override HashCode hash() {
    return makeHash(hashers);
  }
};","METHOD: com.google.common.hash.AbstractCompositeHashFunction.fromHashers(Hasher[])","com.google.common.hash.AbstractCompositeHashFunction.fromHashers(Hasher[])","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(b, b.limit());","THEN_STATEMENT: b.hasArray()","com.google.common.hash.AbstractHasher.putBytes(ByteBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.position(bigger, buf.position());","METHOD: com.google.common.io.ReaderInputStream.grow(CharBuffer)","com.google.common.io.ReaderInputStream.grow(CharBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(bigger, buf.limit());","METHOD: com.google.common.io.ReaderInputStream.grow(CharBuffer)","com.google.common.io.ReaderInputStream.grow(CharBuffer)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.limit(charBuffer, (limit + numChars));","ELSE_STATEMENT: (numChars == (- 1))","com.google.common.io.ReaderInputStream.readMoreChars()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_UPDATE","METHOD_INVOCATION: Java8Compatibility.flip(charBuffer.compact());","THEN_STATEMENT: (charBuffer.position() > 0)","com.google.common.io.ReaderInputStream.readMoreChars()","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: byteBuffer.clear();","THEN_STATEMENT: draining","com.google.common.io.ReaderInputStream.read(byte[],int,int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(byteBuffer);","THEN_STATEMENT: draining","com.google.common.io.ReaderInputStream.read(byte[],int,int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: byteBuffer.flip();","METHOD: com.google.common.io.ReaderInputStream.startDraining(boolean)","com.google.common.io.ReaderInputStream.startDraining(boolean)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(byteBuffer);","METHOD: com.google.common.io.ReaderInputStream.startDraining(boolean)","com.google.common.io.ReaderInputStream.startDraining(boolean)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: charBuffer.flip();","METHOD: com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(charBuffer);","METHOD: com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","com.google.common.io.ReaderInputStream.ReaderInputStream(Reader,CharsetEncoder,int)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","WHILE_STATEMENT: (from.read(buf) != (- 1))","METHOD: com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buf.flip();","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: buf.clear();","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.flip(buf);","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","METHOD_INVOCATION: Java8Compatibility.clear(buf);","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","WHILE_STATEMENT: (from.read(buf) != (- 1))","METHOD: com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_ORDERING_CHANGE","WHILE_STATEMENT: buf.hasRemaining()","WHILE_STATEMENT: (from.read(buf) != (- 1))","com.google.common.io.ByteStreams.copy(ReadableByteChannel,WritableByteChannel)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Floats.constrainToRange(float,float,float)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Floats.constrainToRange(float,float,float)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((min <= max), "min (%s) must be less than or equal to max (%s)", min, max);","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","LOW"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","IF_STATEMENT: (min <= max)","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_DELETE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat("min (%s) must be less than or equal to max (%s)", min, max));","METHOD: com.google.common.primitives.Doubles.constrainToRange(double,double,double)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
4,7fad458114db33674e5fd563f5688eba24e0612e,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Math.min(Math.max(value, min), max);","THEN_STATEMENT: (min <= max)","com.google.common.primitives.Doubles.constrainToRange(double,double,double)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.LenientSerializableTester.reserializeAndAssertElementsEqual(Collection<E>)","CLASS: com.google.common.collect.LenientSerializableTester","com.google.common.collect.LenientSerializableTester","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.LenientSerializableTester.reserializeAndAssertElementsEqual(Collection<E>)","CLASS: com.google.common.collect.LenientSerializableTester","com.google.common.collect.LenientSerializableTester","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", ".42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "42.42.42.ab", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final Runnable[] currentTask = new Runnable[1];","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String[] whileRunningToString = new String[1];","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","METHOD_INVOCATION: sequential1.execute(new Runnable() {
  public @Override void run() {
    whileRunningToString[0] = ("" + currentTask[0]);
  }
  public @Override String toString() {
    return "my runnable\'s toString";
  }
});","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(whileRunningToString[0]).contains("my runnable\'s toString");","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Executor delegate = new Executor() {
  public @Override void execute(Runnable task) {
    currentTask[0] = task;
    task.run();
    currentTask[0] = null;
  }
  public @Override String toString() {
    return "theDelegate";
  }
};","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'c');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'c');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.fixedSuccessors(Iterable<N>)","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirst_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirst_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","RETURN_STATEMENT: ((i == IPV4_PART_COUNT) ? bytes : null);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","FOREACH_STATEMENT: String octet:IPV4_SPLITTER.split(ipString)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: bytes[(i ++)] = parseOctet(octet);","FOREACH_STATEMENT: String octet:IPV4_SPLITTER.split(ipString)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: ((IPV4_DELIMITER_MATCHER.countIn(ipString) + 1) != IPV4_PART_COUNT)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Wrong number of parts","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int start = 0;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Iterate through the parts of the ip string.
    // Invariant: start is always the beginning of an octet.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int end = ipString.indexOf(IPV4_DELIMITER, start);","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: end = ipString.length();","THEN_STATEMENT: (end == (- 1))","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (end == (- 1))","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: bytes[i] = parseOctet(ipString, start, end);","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: null;","CATCH_CLAUSE: NumberFormatException","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","TRY_STATEMENT: ","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: start = (end + 1);","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","FOR_STATEMENT: (i < IPV4_PART_COUNT)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: bytes;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: ((IPV4_DELIMITER_MATCHER.countIn(ipString) + 1) != IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_INSERT","LINE_COMMENT: // Note: we already verified that this string contains only hex digits.","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int hextet = Integer.parseInt(ipPart, 16);","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: (hextet > 0xffff)","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","RETURN_STATEMENT: (short) hextet;","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (hextet > 0xffff)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: parseHextet(ipPart, 0, ipPart.length());","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (percentIndex != (- 1))","THEN_STATEMENT: hasDot","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Scope IDs are not supported for IPV4","THEN_STATEMENT: hasDot","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: null;","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: (percentIndex != (- 1))","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_DELETE","PARAMETER: end","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_ORDERING_CHANGE","PARAMETER: ipString","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_RENAMING","PARAMETER: ipString","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int octet = Integer.parseInt(ipPart);","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int length = (end - start);","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: ((length > 1) && (ipString.charAt(start) == '0'))","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: ((length > 1) && (ipString.charAt(start) == '0'))","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int octet = 0;","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: octet *= 10;","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int digit = Character.digit(ipString.charAt(i), 10);","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (digit < 0)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (digit < 0)","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: octet += digit;","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = start;","FOR_INIT: int i = start;","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","FOR_STATEMENT: (i < end)","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (octet > 255)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (octet > 255)","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_MOVE","LINE_COMMENT: // Disallow leading zeroes, because no clear standard exists on
    // whether these should be interpreted as decimal or octal.","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_UPDATE","LINE_COMMENT: // Note: we already verified that this string contains only hex digits, but the string may still
    // contain non-decimal characters.","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((length <= 0) || (length > 3))","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.parseHextet(String,int,int)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_DELIMITER : char","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_DELIMITER_MATCHER : CharMatcher","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: thrownByExecute","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.thrownByExecute : boolean","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Queue<byte[]> bufs = new ArrayDeque<byte[]>((TO_BYTE_ARRAY_DEQUE_SIZE + 2));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,long)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: bufs: Queue<byte[]>","PARAMETER: bufs","com.google.common.io.ByteStreams.toByteArrayInternal(InputStream,Deque<byte[]>,int)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: bufs: Queue<byte[]>","PARAMETER: bufs","com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: byte[] buf = bufs.remove();","WHILE_STATEMENT: (remaining > 0)","com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: thrownByExecute","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.thrownByExecute : boolean","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: thrownByExecute","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.thrownByExecute : boolean","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.LenientSerializableTester.reserializeAndAssertElementsEqual(Collection<E>)","CLASS: com.google.common.collect.LenientSerializableTester","com.google.common.collect.LenientSerializableTester","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.LenientSerializableTester.reserializeAndAssertElementsEqual(Collection<E>)","CLASS: com.google.common.collect.LenientSerializableTester","com.google.common.collect.LenientSerializableTester","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", ".42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "42.42.42.ab", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final Runnable[] currentTask = new Runnable[1];","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String[] whileRunningToString = new String[1];","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","METHOD_INVOCATION: sequential1.execute(new Runnable() {
  public @Override void run() {
    whileRunningToString[0] = ("" + currentTask[0]);
  }
  public @Override String toString() {
    return "my runnable\'s toString";
  }
});","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(whileRunningToString[0]).contains("my runnable\'s toString");","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Executor delegate = new Executor() {
  public @Override void execute(Runnable task) {
    currentTask[0] = task;
    task.run();
    currentTask[0] = null;
  }
  public @Override String toString() {
    return "theDelegate";
  }
};","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'c');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'c');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.fixedSuccessors(Iterable<N>)","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirst_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirst_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","RETURN_STATEMENT: ((i == IPV4_PART_COUNT) ? bytes : null);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","FOREACH_STATEMENT: String octet:IPV4_SPLITTER.split(ipString)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: bytes[(i ++)] = parseOctet(octet);","FOREACH_STATEMENT: String octet:IPV4_SPLITTER.split(ipString)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: ((IPV4_DELIMITER_MATCHER.countIn(ipString) + 1) != IPV4_PART_COUNT)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Wrong number of parts","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int start = 0;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Iterate through the parts of the ip string.
    // Invariant: start is always the beginning of an octet.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int end = ipString.indexOf(IPV4_DELIMITER, start);","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: end = ipString.length();","THEN_STATEMENT: (end == (- 1))","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (end == (- 1))","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: bytes[i] = parseOctet(ipString, start, end);","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: null;","CATCH_CLAUSE: NumberFormatException","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","TRY_STATEMENT: ","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: start = (end + 1);","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","FOR_STATEMENT: (i < IPV4_PART_COUNT)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: bytes;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: ((IPV4_DELIMITER_MATCHER.countIn(ipString) + 1) != IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_INSERT","LINE_COMMENT: // Note: we already verified that this string contains only hex digits.","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int hextet = Integer.parseInt(ipPart, 16);","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: (hextet > 0xffff)","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","RETURN_STATEMENT: (short) hextet;","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (hextet > 0xffff)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: parseHextet(ipPart, 0, ipPart.length());","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (percentIndex != (- 1))","THEN_STATEMENT: hasDot","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Scope IDs are not supported for IPV4","THEN_STATEMENT: hasDot","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: null;","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: (percentIndex != (- 1))","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_DELETE","PARAMETER: end","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_ORDERING_CHANGE","PARAMETER: ipString","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_RENAMING","PARAMETER: ipString","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int octet = Integer.parseInt(ipPart);","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int length = (end - start);","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: ((length > 1) && (ipString.charAt(start) == '0'))","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: ((length > 1) && (ipString.charAt(start) == '0'))","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int octet = 0;","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: octet *= 10;","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int digit = Character.digit(ipString.charAt(i), 10);","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (digit < 0)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (digit < 0)","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: octet += digit;","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = start;","FOR_INIT: int i = start;","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","FOR_STATEMENT: (i < end)","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (octet > 255)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (octet > 255)","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_MOVE","LINE_COMMENT: // Disallow leading zeroes, because no clear standard exists on
    // whether these should be interpreted as decimal or octal.","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_UPDATE","LINE_COMMENT: // Note: we already verified that this string contains only hex digits, but the string may still
    // contain non-decimal characters.","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((length <= 0) || (length > 3))","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.parseHextet(String,int,int)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_DELIMITER : char","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_DELIMITER_MATCHER : CharMatcher","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: thrownByExecute","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.thrownByExecute : boolean","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Queue<byte[]> bufs = new ArrayDeque<byte[]>((TO_BYTE_ARRAY_DEQUE_SIZE + 2));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,long)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: bufs: Queue<byte[]>","PARAMETER: bufs","com.google.common.io.ByteStreams.toByteArrayInternal(InputStream,Deque<byte[]>,int)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: bufs: Queue<byte[]>","PARAMETER: bufs","com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: byte[] buf = bufs.remove();","WHILE_STATEMENT: (remaining > 0)","com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.LenientSerializableTester.reserializeAndAssertElementsEqual(Collection<E>)","CLASS: com.google.common.collect.LenientSerializableTester","com.google.common.collect.LenientSerializableTester","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", ".42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "42.42.42.ab", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final Runnable[] currentTask = new Runnable[1];","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String[] whileRunningToString = new String[1];","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","METHOD_INVOCATION: sequential1.execute(new Runnable() {
  public @Override void run() {
    whileRunningToString[0] = ("" + currentTask[0]);
  }
  public @Override String toString() {
    return "my runnable\'s toString";
  }
});","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(whileRunningToString[0]).contains("my runnable\'s toString");","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final Executor delegate = new Executor() {
  public @Override void execute(Runnable task) {
    currentTask[0] = task;
    task.run();
    currentTask[0] = null;
  }
  public @Override String toString() {
    return "theDelegate";
  }
};","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","com.google.common.util.concurrent.SequentialExecutorTest.testToString()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'c');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'c');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_iterableIsLazy()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.fixedSuccessors(Iterable<N>)","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirst_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrder_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirst_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_infinite()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","RETURN_STATEMENT: ((i == IPV4_PART_COUNT) ? bytes : null);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","FOREACH_STATEMENT: String octet:IPV4_SPLITTER.split(ipString)","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: bytes[(i ++)] = parseOctet(octet);","FOREACH_STATEMENT: String octet:IPV4_SPLITTER.split(ipString)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: ((IPV4_DELIMITER_MATCHER.countIn(ipString) + 1) != IPV4_PART_COUNT)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Wrong number of parts","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int start = 0;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Iterate through the parts of the ip string.
    // Invariant: start is always the beginning of an octet.","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int end = ipString.indexOf(IPV4_DELIMITER, start);","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: end = ipString.length();","THEN_STATEMENT: (end == (- 1))","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (end == (- 1))","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: bytes[i] = parseOctet(ipString, start, end);","BODY: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: null;","CATCH_CLAUSE: NumberFormatException","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","CATCH_CLAUSE: NumberFormatException","CATCH_CLAUSES: ","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","TRY_STATEMENT: ","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: start = (end + 1);","FOR_STATEMENT: (i < IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","FOR_STATEMENT: (i < IPV4_PART_COUNT)","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: bytes;","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV4(String)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: ((IPV4_DELIMITER_MATCHER.countIn(ipString) + 1) != IPV4_PART_COUNT)","com.google.common.net.InetAddresses.textToNumericFormatV4(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_INSERT","LINE_COMMENT: // Note: we already verified that this string contains only hex digits.","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int hextet = Integer.parseInt(ipPart, 16);","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: (hextet > 0xffff)","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","RETURN_STATEMENT: (short) hextet;","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (hextet > 0xffff)","com.google.common.net.InetAddresses.parseHextet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: parseHextet(ipPart, 0, ipPart.length());","METHOD: com.google.common.net.InetAddresses.parseHextet(String)","com.google.common.net.InetAddresses.parseHextet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (percentIndex != (- 1))","THEN_STATEMENT: hasDot","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_DELETE","LINE_COMMENT: // Scope IDs are not supported for IPV4","THEN_STATEMENT: hasDot","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","RETURN_STATEMENT: null;","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: null;","THEN_STATEMENT: (percentIndex != (- 1))","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_DELETE","PARAMETER: end","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_ORDERING_CHANGE","PARAMETER: ipString","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_RENAMING","PARAMETER: ipString","PARAMETERS: ","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int octet = Integer.parseInt(ipPart);","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int length = (end - start);","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: ((length > 1) && (ipString.charAt(start) == '0'))","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: ((length > 1) && (ipString.charAt(start) == '0'))","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int octet = 0;","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: octet *= 10;","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int digit = Character.digit(ipString.charAt(i), 10);","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (digit < 0)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (digit < 0)","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","ASSIGNMENT: octet += digit;","FOR_STATEMENT: (i < end)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = start;","FOR_INIT: int i = start;","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","FOR_STATEMENT: (i < end)","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","THROW_STATEMENT: new NumberFormatException();","THEN_STATEMENT: (octet > 255)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_DELETE","IF_STATEMENT: (octet > 255)","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_MOVE","LINE_COMMENT: // Disallow leading zeroes, because no clear standard exists on
    // whether these should be interpreted as decimal or octal.","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"COMMENT_UPDATE","LINE_COMMENT: // Note: we already verified that this string contains only hex digits, but the string may still
    // contain non-decimal characters.","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","NONE"
5,081c486173032e6096c912e3c297c1d74eddcf93,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((length <= 0) || (length > 3))","METHOD: com.google.common.net.InetAddresses.parseOctet(String,int,int)","com.google.common.net.InetAddresses.parseOctet(String)","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.parseHextet(String,int,int)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_DELIMITER : char","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV4_DELIMITER_MATCHER : CharMatcher","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly(ExecutorService,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","IF_STATEMENT: thrownByExecute","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","CATCH_CLAUSE: RejectedExecutionException","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","MEDIUM"
5,081c486173032e6096c912e3c297c1d74eddcf93,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.thrownByExecute : boolean","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_INSERT","ASSIGNMENT: thrownByExecute = false;","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Queue<byte[]> bufs = new ArrayDeque<byte[]>((TO_BYTE_ARRAY_DEQUE_SIZE + 2));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,long)","LOW"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: bufs: Queue<byte[]>","PARAMETER: bufs","com.google.common.io.ByteStreams.toByteArrayInternal(InputStream,Deque<byte[]>,int)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: bufs: Queue<byte[]>","PARAMETER: bufs","com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","HIGH"
5,081c486173032e6096c912e3c297c1d74eddcf93,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: byte[] buf = bufs.remove();","WHILE_STATEMENT: (remaining > 0)","com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_CLASS","CLASS: com.google.common.collect.ComparatorsTest.Foo","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreateFontType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64Url()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64UrlInvalidDecodings()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testDecodesByBytes(BaseEncoding,String,byte[])","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigInteger()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigIntegerUnnecessary()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.LongMathTest.roundToDoubleTestCandidates : long[]","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_CLASS","CLASS: com.google.common.collect.ComparatorsTest.Foo","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue("Some worker didn\'t finish in time", threadPool.awaitTermination(10, SECONDS));","METHOD: com.google.common.collect.QueuesTest.tearDown()","com.google.common.collect.QueuesTest.tearDown()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> uppercaseAcronyms = ImmutableSet.of("CH", "ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UA", "UID", "URL", "WWW", "XSS");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreateFontType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Thread.interrupted()).isTrue();","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_beforeRunRestoresInterruption()","com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_beforeRunRestoresInterruption()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Thread.interrupted()).isTrue();","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_doesNotInterruptSubsequentTask()","com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_doesNotInterruptSubsequentTask()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","CLASS: com.google.common.util.concurrent.SequentialExecutorTest","com.google.common.util.concurrent.SequentialExecutorTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64Url()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64UrlInvalidDecodings()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testDecodesByBytes(BaseEncoding,String,byte[])","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null);","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, 0, 4);","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, (- 1), 4);","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: fail();","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","CATCH_CLAUSE: IndexOutOfBoundsException","CATCH_CLAUSES: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, 0, 5);","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: fail();","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","CATCH_CLAUSE: IndexOutOfBoundsException","CATCH_CLAUSES: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteSourceTest.testSlice_returnEmptySource()","CLASS: com.google.common.io.ByteSourceTest","com.google.common.io.ByteSourceTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.createGraph()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_parallelEdge()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelEdges_directed()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelEdges_undirected()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_parallelSelfLoopEdge()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelSelfLoopEdges()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.adjacentEdges_parallelEdges()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(N2, N1, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: addEdge(N1, N2, E12);","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N2, N1, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N2N1 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N1N2 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getMessage()).contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getMessage()).contains(ERROR_PARALLEL_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.BigIntegerMathRoundingBenchmark.roundToDouble(int)","CLASS: com.google.common.math.BigIntegerMathRoundingBenchmark","com.google.common.math.BigIntegerMathRoundingBenchmark","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigInteger()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigIntegerUnnecessary()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.LongMathTest.roundToDoubleTestCandidates : long[]","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @NullableDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MODEL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY_REPORT_ONLY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_FULL_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MOBILE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_SFNT
   * font/sfnt} to be the correct media type for SFNT, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.SFNT : MediaType","com.google.common.net.MediaType.SFNT : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF2
   * font/woff2} to be the correct media type for WOFF2, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 20.0
   */","FIELD: com.google.common.net.MediaType.WOFF2 : MediaType","com.google.common.net.MediaType.WOFF2 : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF
   * font/woff} to be the correct media type for WOFF, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.WOFF : MediaType","com.google.common.net.MediaType.WOFF : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.createFontType(String)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.ANY_FONT_TYPE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_COLLECTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF2 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_OTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TYPE : String","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_SFNT : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * Invoked to request the service to stop.
   *
   * <p>By default this method does nothing.
   *
   * <p>Currently, this method is invoked while holding a lock. If an implementation of this method
   * blocks, it can prevent this service from changing state. If you need to performing a blocking
   * operation in order to trigger shutdown, consider instead registering a listener and
   * implementing {@code stopping}. Note, however, that {@code stopping} does not run at exactly the
   * same times as {@code triggerShutdown}.
   */","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadService.triggerShutdown()","com.google.common.util.concurrent.AbstractExecutionThreadService.triggerShutdown()","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.hash.SipHashFunction.SipHasher.makeHash()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.hash.Murmur3_128HashFunction.Murmur3_128Hasher.makeHash()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: ((maxLength <= 0) ? ByteSource.empty() : ByteSource.this.slice((this.offset + offset), Math.min(length, maxLength)));","METHOD: com.google.common.io.ByteSource.SlicedByteSource.slice(long,long)","com.google.common.io.ByteSource.SlicedByteSource.slice(long,long)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMath.roundToDouble(long,RoundingMode)","CLASS: com.google.common.math.LongMath","com.google.common.math.LongMath","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: FloatsMethodsForWeb","CLASS: com.google.common.primitives.Floats","com.google.common.primitives.Floats","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: ShortsMethodsForWeb","CLASS: com.google.common.primitives.Shorts","com.google.common.primitives.Shorts","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: DoublesMethodsForWeb","CLASS: com.google.common.primitives.Doubles","com.google.common.primitives.Doubles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: IntsMethodsForWeb","CLASS: com.google.common.primitives.Ints","com.google.common.primitives.Ints","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double[] newArray = new double[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: long[] newArray = new long[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int[] newArray = new int[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @NullableDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MODEL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY_REPORT_ONLY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_FULL_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MOBILE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_SFNT
   * font/sfnt} to be the correct media type for SFNT, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.SFNT : MediaType","com.google.common.net.MediaType.SFNT : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF2
   * font/woff2} to be the correct media type for WOFF2, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 20.0
   */","FIELD: com.google.common.net.MediaType.WOFF2 : MediaType","com.google.common.net.MediaType.WOFF2 : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF
   * font/woff} to be the correct media type for WOFF, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.WOFF : MediaType","com.google.common.net.MediaType.WOFF : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.createFontType(String)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.ANY_FONT_TYPE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_COLLECTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF2 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_OTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TYPE : String","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_SFNT : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMath.roundToDouble(long,RoundingMode)","CLASS: com.google.common.math.LongMath","com.google.common.math.LongMath","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: FloatsMethodsForWeb","CLASS: com.google.common.primitives.Floats","com.google.common.primitives.Floats","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: ShortsMethodsForWeb","CLASS: com.google.common.primitives.Shorts","com.google.common.primitives.Shorts","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: DoublesMethodsForWeb","CLASS: com.google.common.primitives.Doubles","com.google.common.primitives.Doubles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: IntsMethodsForWeb","CLASS: com.google.common.primitives.Ints","com.google.common.primitives.Ints","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double[] newArray = new double[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: long[] newArray = new long[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int[] newArray = new int[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @NullableDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MODEL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY_REPORT_ONLY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_FULL_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MOBILE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_SFNT
   * font/sfnt} to be the correct media type for SFNT, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.SFNT : MediaType","com.google.common.net.MediaType.SFNT : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF2
   * font/woff2} to be the correct media type for WOFF2, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 20.0
   */","FIELD: com.google.common.net.MediaType.WOFF2 : MediaType","com.google.common.net.MediaType.WOFF2 : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF
   * font/woff} to be the correct media type for WOFF, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.WOFF : MediaType","com.google.common.net.MediaType.WOFF : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.createFontType(String)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.ANY_FONT_TYPE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_COLLECTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF2 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_OTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TYPE : String","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_SFNT : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMath.roundToDouble(long,RoundingMode)","CLASS: com.google.common.math.LongMath","com.google.common.math.LongMath","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: FloatsMethodsForWeb","CLASS: com.google.common.primitives.Floats","com.google.common.primitives.Floats","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: ShortsMethodsForWeb","CLASS: com.google.common.primitives.Shorts","com.google.common.primitives.Shorts","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: DoublesMethodsForWeb","CLASS: com.google.common.primitives.Doubles","com.google.common.primitives.Doubles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: IntsMethodsForWeb","CLASS: com.google.common.primitives.Ints","com.google.common.primitives.Ints","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double[] newArray = new double[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: long[] newArray = new long[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int[] newArray = new int[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_CLASS","CLASS: com.google.common.collect.ComparatorsTest.Foo","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreateFontType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64Url()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64UrlInvalidDecodings()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testDecodesByBytes(BaseEncoding,String,byte[])","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigInteger()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigIntegerUnnecessary()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.LongMathTest.roundToDoubleTestCandidates : long[]","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.BigIntegerMathRoundingBenchmark.roundToDouble(int)","CLASS: com.google.common.math.BigIntegerMathRoundingBenchmark","com.google.common.math.BigIntegerMathRoundingBenchmark","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_CLASS","CLASS: com.google.common.collect.ComparatorsTest.Foo","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue("Some worker didn\'t finish in time", threadPool.awaitTermination(10, SECONDS));","METHOD: com.google.common.collect.QueuesTest.tearDown()","com.google.common.collect.QueuesTest.tearDown()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> uppercaseAcronyms = ImmutableSet.of("CH", "ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UA", "UID", "URL", "WWW", "XSS");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreateFontType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Thread.interrupted()).isTrue();","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_beforeRunRestoresInterruption()","com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_beforeRunRestoresInterruption()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Thread.interrupted()).isTrue();","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_doesNotInterruptSubsequentTask()","com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_doesNotInterruptSubsequentTask()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","CLASS: com.google.common.util.concurrent.SequentialExecutorTest","com.google.common.util.concurrent.SequentialExecutorTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64Url()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64UrlInvalidDecodings()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testDecodesByBytes(BaseEncoding,String,byte[])","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null);","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, 0, 4);","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, (- 1), 4);","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: fail();","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","CATCH_CLAUSE: IndexOutOfBoundsException","CATCH_CLAUSES: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, 0, 5);","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: fail();","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","CATCH_CLAUSE: IndexOutOfBoundsException","CATCH_CLAUSES: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteSourceTest.testSlice_returnEmptySource()","CLASS: com.google.common.io.ByteSourceTest","com.google.common.io.ByteSourceTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.successors_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.successors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_allowsSelfLoops()","com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_allowsSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.inDegree_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.inDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.removeEdge_existingSelfLoopEdge()","com.google.common.graph.AbstractStandardDirectedGraphTest.removeEdge_existingSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.adjacentNodes_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.adjacentNodes_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.degree_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.degree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.outDegree_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.outDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.predecessors_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.predecessors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.incidentEdges_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.incidentEdges_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","com.google.common.graph.AbstractStandardDirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isFalse();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_doesntAllowSelfLoops()","com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_doesntAllowSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.createGraph()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_parallelEdge()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelEdges_directed()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelEdges_undirected()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_parallelSelfLoopEdge()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelSelfLoopEdges()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.adjacentEdges_parallelEdges()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableDirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardMutableDirectedGraphTest","com.google.common.graph.StandardMutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableDirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardMutableDirectedGraphTest","com.google.common.graph.StandardMutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableUndirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardMutableUndirectedGraphTest","com.google.common.graph.StandardMutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableUndirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardMutableUndirectedGraphTest","com.google.common.graph.StandardMutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.successors_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.successors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_allowsSelfLoops()","com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_allowsSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.inDegree_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.inDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.removeEdge_existingSelfLoopEdge()","com.google.common.graph.AbstractStandardUndirectedGraphTest.removeEdge_existingSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.adjacentNodes_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.adjacentNodes_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.degree_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.degree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.outDegree_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.outDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.predecessors_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.predecessors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.incidentEdges_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.incidentEdges_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","com.google.common.graph.AbstractStandardUndirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isFalse();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_doesntAllowSelfLoops()","com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_doesntAllowSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","ASSIGNMENT: graphBuilder = GraphBuilder.undirected().allowsSelfLoops(allowsSelfLoops).immutable();","METHOD: com.google.common.graph.StandardImmutableUndirectedGraphTest.createGraph()","com.google.common.graph.StandardImmutableUndirectedGraphTest.createGraph()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableUndirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardImmutableUndirectedGraphTest","com.google.common.graph.StandardImmutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableUndirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardImmutableUndirectedGraphTest","com.google.common.graph.StandardImmutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","ASSIGNMENT: graphBuilder = GraphBuilder.directed().allowsSelfLoops(allowsSelfLoops).immutable();","METHOD: com.google.common.graph.StandardImmutableDirectedGraphTest.createGraph()","com.google.common.graph.StandardImmutableDirectedGraphTest.createGraph()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableDirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardImmutableDirectedGraphTest","com.google.common.graph.StandardImmutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableDirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardImmutableDirectedGraphTest","com.google.common.graph.StandardImmutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigInteger()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigIntegerUnnecessary()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.LongMathTest.roundToDoubleTestCandidates : long[]","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @NullableDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MODEL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY_REPORT_ONLY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_FULL_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MOBILE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_SFNT
   * font/sfnt} to be the correct media type for SFNT, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.SFNT : MediaType","com.google.common.net.MediaType.SFNT : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF2
   * font/woff2} to be the correct media type for WOFF2, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 20.0
   */","FIELD: com.google.common.net.MediaType.WOFF2 : MediaType","com.google.common.net.MediaType.WOFF2 : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF
   * font/woff} to be the correct media type for WOFF, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.WOFF : MediaType","com.google.common.net.MediaType.WOFF : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.createFontType(String)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.ANY_FONT_TYPE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_COLLECTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF2 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_OTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TYPE : String","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_SFNT : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * Invoked to request the service to stop.
   *
   * <p>By default this method does nothing.
   *
   * <p>Currently, this method is invoked while holding a lock. If an implementation of this method
   * blocks, it can prevent this service from changing state. If you need to performing a blocking
   * operation in order to trigger shutdown, consider instead registering a listener and
   * implementing {@code stopping}. Note, however, that {@code stopping} does not run at exactly the
   * same times as {@code triggerShutdown}.
   */","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadService.triggerShutdown()","com.google.common.util.concurrent.AbstractExecutionThreadService.triggerShutdown()","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.hash.SipHashFunction.SipHasher.makeHash()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.hash.Murmur3_128HashFunction.Murmur3_128Hasher.makeHash()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: ((maxLength <= 0) ? ByteSource.empty() : ByteSource.this.slice((this.offset + offset), Math.min(length, maxLength)));","METHOD: com.google.common.io.ByteSource.SlicedByteSource.slice(long,long)","com.google.common.io.ByteSource.SlicedByteSource.slice(long,long)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMath.roundToDouble(long,RoundingMode)","CLASS: com.google.common.math.LongMath","com.google.common.math.LongMath","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: FloatsMethodsForWeb","CLASS: com.google.common.primitives.Floats","com.google.common.primitives.Floats","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: ShortsMethodsForWeb","CLASS: com.google.common.primitives.Shorts","com.google.common.primitives.Shorts","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: DoublesMethodsForWeb","CLASS: com.google.common.primitives.Doubles","com.google.common.primitives.Doubles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: IntsMethodsForWeb","CLASS: com.google.common.primitives.Ints","com.google.common.primitives.Ints","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double[] newArray = new double[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: long[] newArray = new long[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int[] newArray = new int[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.BigIntegerMathRoundingBenchmark.roundToDouble(int)","CLASS: com.google.common.math.BigIntegerMathRoundingBenchmark","com.google.common.math.BigIntegerMathRoundingBenchmark","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxComparator_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ComparatorsTest.testMinMaxNatural_equalInstances()","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_CLASS","CLASS: com.google.common.collect.ComparatorsTest.Foo","CLASS: com.google.common.collect.ComparatorsTest","com.google.common.collect.ComparatorsTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementAbsent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_elementPresent()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testCeiling_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSortedSetTest.testFloor_emptySet()","CLASS: com.google.common.collect.ImmutableSortedSetTest","com.google.common.collect.ImmutableSortedSetTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue("Some worker didn\'t finish in time", threadPool.awaitTermination(10, SECONDS));","METHOD: com.google.common.collect.QueuesTest.tearDown()","com.google.common.collect.QueuesTest.tearDown()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> uppercaseAcronyms = ImmutableSet.of("CH", "ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UA", "UID", "URL", "WWW", "XSS");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreateFontType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Thread.interrupted()).isTrue();","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_beforeRunRestoresInterruption()","com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_beforeRunRestoresInterruption()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Thread.interrupted()).isTrue();","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_doesNotInterruptSubsequentTask()","com.google.common.util.concurrent.SequentialExecutorTest.testInterrupt_doesNotInterruptSubsequentTask()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testToString()","CLASS: com.google.common.util.concurrent.SequentialExecutorTest","com.google.common.util.concurrent.SequentialExecutorTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64Url()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testBase64UrlInvalidDecodings()","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.BaseEncodingTest.testDecodesByBytes(BaseEncoding,String,byte[])","CLASS: com.google.common.io.BaseEncodingTest","com.google.common.io.BaseEncodingTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null);","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, 0, 4);","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, (- 1), 4);","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: fail();","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","CATCH_CLAUSE: IndexOutOfBoundsException","CATCH_CLAUSES: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: nullWriter.append(null, 0, 5);","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","METHOD_INVOCATION: fail();","BODY: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","CATCH_CLAUSE: IndexOutOfBoundsException","CATCH_CLAUSES: ","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.io.CharStreamsTest.testNullWriter()","com.google.common.io.CharStreamsTest.testNullWriter()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteSourceTest.testSlice_returnEmptySource()","CLASS: com.google.common.io.ByteSourceTest","com.google.common.io.ByteSourceTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.successors_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.successors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_allowsSelfLoops()","com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_allowsSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.inDegree_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.inDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.removeEdge_existingSelfLoopEdge()","com.google.common.graph.AbstractStandardDirectedGraphTest.removeEdge_existingSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.adjacentNodes_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.adjacentNodes_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.degree_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.degree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.outDegree_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.outDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.predecessors_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.predecessors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.incidentEdges_selfLoop()","com.google.common.graph.AbstractStandardDirectedGraphTest.incidentEdges_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","com.google.common.graph.AbstractStandardDirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isFalse();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_doesntAllowSelfLoops()","com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_doesntAllowSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardDirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","com.google.common.graph.AbstractStandardDirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.createGraph()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_parallelEdge()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelEdges_directed()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelEdges_undirected()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_parallelSelfLoopEdge()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.edgesConnecting_parallelSelfLoopEdges()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.adjacentEdges_parallelEdges()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableDirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardMutableDirectedGraphTest","com.google.common.graph.StandardMutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableDirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardMutableDirectedGraphTest","com.google.common.graph.StandardMutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableUndirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardMutableUndirectedGraphTest","com.google.common.graph.StandardMutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardMutableUndirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardMutableUndirectedGraphTest","com.google.common.graph.StandardMutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.successors_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.successors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_predecessors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_allowsSelfLoops()","com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_allowsSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.inDegree_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.inDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_withSelfLoop_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.removeEdge_existingSelfLoopEdge()","com.google.common.graph.AbstractStandardUndirectedGraphTest.removeEdge_existingSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.adjacentNodes_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.adjacentNodes_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.degree_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.degree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.outDegree_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.outDegree_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.predecessors_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.predecessors_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.incidentEdges_selfLoop()","com.google.common.graph.AbstractStandardUndirectedGraphTest.incidentEdges_selfLoop()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","com.google.common.graph.AbstractStandardUndirectedGraphTest.removeNode_existingNodeWithSelfLoopEdge()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isFalse();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_doesntAllowSelfLoops()","com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_doesntAllowSelfLoops()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_successors_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_edges_returnsInStableOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_adjacentNodes_returnsInConnectingEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.incidentEdgeOrder().type()).isEqualTo(ElementOrder.Type.STABLE);","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","com.google.common.graph.AbstractStandardUndirectedGraphTest.stableIncidentEdgeOrder_incidentEdges_returnsInEdgeInsertionOrder()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","METHOD_INVOCATION: assume().that(graph.allowsSelfLoops()).isTrue();","METHOD: com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","com.google.common.graph.AbstractStandardUndirectedGraphTest.putEdge_existingSelfLoopEdgeBetweenSameNodes()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","ASSIGNMENT: graphBuilder = GraphBuilder.undirected().allowsSelfLoops(allowsSelfLoops).immutable();","METHOD: com.google.common.graph.StandardImmutableUndirectedGraphTest.createGraph()","com.google.common.graph.StandardImmutableUndirectedGraphTest.createGraph()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableUndirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardImmutableUndirectedGraphTest","com.google.common.graph.StandardImmutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableUndirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardImmutableUndirectedGraphTest","com.google.common.graph.StandardImmutableUndirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","ASSIGNMENT: graphBuilder = GraphBuilder.directed().allowsSelfLoops(allowsSelfLoops).immutable();","METHOD: com.google.common.graph.StandardImmutableDirectedGraphTest.createGraph()","com.google.common.graph.StandardImmutableDirectedGraphTest.createGraph()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableDirectedGraphTest.allowsSelfLoops()","CLASS: com.google.common.graph.StandardImmutableDirectedGraphTest","com.google.common.graph.StandardImmutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.StandardImmutableDirectedGraphTest.incidentEdgeOrder()","CLASS: com.google.common.graph.StandardImmutableDirectedGraphTest","com.google.common.graph.StandardImmutableDirectedGraphTest","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigInteger()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMathTest.testRoundToDoubleAgainstBigIntegerUnnecessary()","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.LongMathTest.roundToDoubleTestCandidates : long[]","CLASS: com.google.common.math.LongMathTest","com.google.common.math.LongMathTest","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @NullableDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.min(T,T,Comparator<T>)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Comparators.max(T,T)","CLASS: com.google.common.collect.Comparators","com.google.common.collect.Comparators","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MODEL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_EMBEDDER_POLICY_REPORT_ONLY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_FULL_VERSION : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_PLATFORM : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_CH_UA_MOBILE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_SFNT
   * font/sfnt} to be the correct media type for SFNT, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.SFNT : MediaType","com.google.common.net.MediaType.SFNT : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF2
   * font/woff2} to be the correct media type for WOFF2, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 20.0
   */","FIELD: com.google.common.net.MediaType.WOFF2 : MediaType","com.google.common.net.MediaType.WOFF2 : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * <a href="https://tools.ietf.org/html/rfc8081">RFC 8081</a> declares {@link #FONT_WOFF
   * font/woff} to be the correct media type for WOFF, but this may be necessary in certain
   * situations for compatibility.
   *
   * @since 17.0
   */","FIELD: com.google.common.net.MediaType.WOFF : MediaType","com.google.common.net.MediaType.WOFF : MediaType","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.createFontType(String)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.ANY_FONT_TYPE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_COLLECTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF2 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_OTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TYPE : String","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","HIGH"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_WOFF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_TTF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.FONT_SFNT : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly(Lock,long,TimeUnit)","CLASS: com.google.common.util.concurrent.Uninterruptibles","com.google.common.util.concurrent.Uninterruptibles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"DOC_UPDATE","JAVADOC: /**
   * Invoked to request the service to stop.
   *
   * <p>By default this method does nothing.
   *
   * <p>Currently, this method is invoked while holding a lock. If an implementation of this method
   * blocks, it can prevent this service from changing state. If you need to performing a blocking
   * operation in order to trigger shutdown, consider instead registering a listener and
   * implementing {@code stopping}. Note, however, that {@code stopping} does not run at exactly the
   * same times as {@code triggerShutdown}.
   */","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadService.triggerShutdown()","com.google.common.util.concurrent.AbstractExecutionThreadService.triggerShutdown()","NONE"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.hash.SipHashFunction.SipHasher.makeHash()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.hash.Murmur3_128HashFunction.Murmur3_128Hasher.makeHash()","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_UPDATE","RETURN_STATEMENT: ((maxLength <= 0) ? ByteSource.empty() : ByteSource.this.slice((this.offset + offset), Math.min(length, maxLength)));","METHOD: com.google.common.io.ByteSource.SlicedByteSource.slice(long,long)","com.google.common.io.ByteSource.SlicedByteSource.slice(long,long)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.LongMath.roundToDouble(long,RoundingMode)","CLASS: com.google.common.math.LongMath","com.google.common.math.LongMath","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: FloatsMethodsForWeb","CLASS: com.google.common.primitives.Floats","com.google.common.primitives.Floats","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: ShortsMethodsForWeb","CLASS: com.google.common.primitives.Shorts","com.google.common.primitives.Shorts","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: DoublesMethodsForWeb","CLASS: com.google.common.primitives.Doubles","com.google.common.primitives.Doubles","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"PARENT_CLASS_DELETE","SINGLE_TYPE: IntsMethodsForWeb","CLASS: com.google.common.primitives.Ints","com.google.common.primitives.Ints","CRUCIAL"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double[] newArray = new double[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableDoubleArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: long[] newArray = new long[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableLongArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int[] newArray = new int[expandedCapacity(array.length, newCount)];","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(array, 0, newArray, 0, count);","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_INSERT","ASSIGNMENT: this.array = newArray;","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","LOW"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","ASSIGNMENT: array = Arrays.copyOf(array, expandedCapacity(array.length, newCount));","THEN_STATEMENT: (newCount > array.length)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
6,e352076da65aa3afb5dc59cfd3c1f41574b5ebeb,"STATEMENT_DELETE","IF_STATEMENT: (newCount > array.length)","METHOD: com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","com.google.common.primitives.ImmutableIntArray.Builder.ensureRoomFor(int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.CollectionIteratorTester.testIterator_nullElement()","CLASS: com.google.common.collect.testing.testers.CollectionIteratorTester","com.google.common.collect.testing.testers.CollectionIteratorTester","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(StringLiteralConcatenation{"text/plain; something=\"cr@zy\"; something-else=\"crazy with spaces\";"+
" and-another-thing=\"\"; normal-thing=foo"+
}, MediaType.create("text", "plain").withParameter("something", "cr@zy").withParameter("something-else", "crazy with spaces").withParameter("and-another-thing", "").withParameter("normal-thing", "foo").toString());","METHOD: com.google.common.net.MediaTypeTest.testToString()","com.google.common.net.MediaTypeTest.testToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptyType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiSubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptySubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_emptyParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_ATTRIBUTE_MODIFIABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AtomicLongMapTest.random : Random","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AtomicLongMapTest.testModify_basher()","CLASS: com.google.common.util.concurrent.AtomicLongMapTest","com.google.common.util.concurrent.AtomicLongMapTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getCause()).isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decode(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected IllegalArgumentException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalArgumentException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decodeChecked(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected DecodingException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: DecodingException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: IllegalArgumentException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: DecodingException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // We use this somewhat weird pattern with an enum for each assertion we want to make as a way
    // of dealing with the fact that one of the assertions is @GwtIncompatible but we don't want to
    // have to have duplicate @GwtIncompatible test methods just to make that assertion.","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(template, args).fail();","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_extraValueDelimiter()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Optional<Number> first = (Optional<Number>) numbers.first();","METHOD: com.google.common.base.OptionalTest.testSampleCodeFine2()","com.google.common.base.OptionalTest.testSampleCodeFine2()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(onlyPresent).containsExactly(2);","METHOD: com.google.common.base.OptionalTest.testPresentInstances_wildcards()","com.google.common.base.OptionalTest.testPresentInstances_wildcards()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetRootCause_Loop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetCasualChainLoop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, SomeCheckedException.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, Exception.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) entry;","THEN_STATEMENT: (maker.getKeyStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainKeyReferenceQueueOnRead()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // TODO(b/145386688): This access should be guarded by 'segment', which is not currently
        // held","THEN_STATEMENT: (i > 1)","com.google.common.collect.MapMakerInternalMapTest.testExpand_cleanup()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) valueReference;","THEN_STATEMENT: (maker.getValueStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainValueReferenceQueueOnWrite()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) valueReference;","THEN_STATEMENT: (maker.getValueStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainValueReferenceQueueOnRead()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // TODO(b/145386688): This access should be guarded by 'segment', which is not currently
        // held","THEN_STATEMENT: (i > 1)","com.google.common.collect.MapMakerInternalMapTest.testExpand()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) entry;","THEN_STATEMENT: (maker.getKeyStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainKeyReferenceQueueOnWrite()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.CollectionIteratorTester.testIterator_nullElement()","CLASS: com.google.common.collect.testing.testers.CollectionIteratorTester","com.google.common.collect.testing.testers.CollectionIteratorTester","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableBiMap<String, String> specialCases = ImmutableBiMap.<String, String>builder().put("CDN_LOOP", "CDN-Loop").put("ETAG", "ETag").put("SOURCE_MAP", "SourceMap").put("SEC_WEBSOCKET_ACCEPT", "Sec-WebSocket-Accept").put("SEC_WEBSOCKET_EXTENSIONS", "Sec-WebSocket-Extensions").put("SEC_WEBSOCKET_KEY", "Sec-WebSocket-Key").put("SEC_WEBSOCKET_PROTOCOL", "Sec-WebSocket-Protocol").put("SEC_WEBSOCKET_VERSION", "Sec-WebSocket-Version").put("X_WEBKIT_CSP", "X-WebKit-CSP").put("X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only").build();","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.fromInteger(0x7f000001)).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testFromInteger()","com.google.common.net.InetAddressesTest.testFromInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> ipStrings = ImmutableSet.of("7::0.128.0.127", "7::0.128.0.128", "7::128.128.0.127", "7::0.128.128.127");","METHOD: com.google.common.net.InetAddressesTest.testConvertDottedQuadToHex()","com.google.common.net.InetAddressesTest.testConvertDottedQuadToHex()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonCompatAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < validCompatAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonCompatAddress);","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validCompatAddress);","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), (ip instanceof Inet6Address));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals((("checking \'" + validCompatAddress) + "\'"), compat, InetAddresses.getCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonCompatAddresses = ImmutableSet.of("3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> validCompatAddresses = ImmutableSet.of("::1.2.3.4", "::102:304");","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonCompatAddress);","FOR_STATEMENT: (i < nonCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validCompatAddress);","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), (ip instanceof Inet6Address));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals((("checking \'" + validCompatAddress) + "\'"), compat, InetAddresses.getCompatIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonCompatAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: InetAddress localHost4 = InetAddresses.forString("127.0.0.1");","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(localHost4, InetAddresses.getCoercedIPv4Address(localHost4));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertTrue((0xe0000000 <= InetAddresses.coerceToInteger(coerced)));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertTrue((InetAddresses.coerceToInteger(coerced) <= 0xfffffffe));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("127.0.0.1"))).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(coercedInt).isAtLeast(0xe0000000);","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(coercedInt).isAtMost(0xfffffffe);","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::1"))).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::"))).isEqualTo(InetAddresses.forString("0.0.0.0"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::1.2.3.4"))).isNotEqualTo(InetAddresses.forString("1.2.3.4"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isNotEqualTo(InetAddresses.forString("1.2.3.4"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isNotEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0506:0708::1")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::2")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isNotEqualTo(InetAddresses.forString("192.0.2.45"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","LINE_COMMENT: // 2 Teredo addresses differing in their embedded IPv4 addresses should hash to different
    // values.","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isNotEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd3")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","LINE_COMMENT: // 2 Teredo addresses NOT differing in the their embedded IPv4 addresses should hash to the same
    // value.","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:5136:f378:9000:73bf:3fff:fdd2")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int coercedInt = InetAddresses.coerceToInteger(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:4860::1")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < bogusInputs.length)","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String bogusInput:bogusInputs","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String bogusInput:bogusInputs","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isInetAddress(bogusInput));","FOREACH_STATEMENT: String bogusInput:bogusInputs","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(InetAddresses.isInetAddress(bogusInput));","FOR_STATEMENT: (i < bogusInputs.length)","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: InetAddresses.forString(bogusInput);","BODY: ","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + bogusInput) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < non6to4Addresses.length)","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(non6to4Address);","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.is6to4Address((Inet6Address) ip));","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> non6to4Addresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(non6to4Address);","FOR_STATEMENT: (i < non6to4Addresses.length)","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + non6to4Address) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonTeredoAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonTeredoAddress);","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isTeredoAddress((Inet6Address) ip));","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonTeredoAddresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonTeredoAddress);","FOR_STATEMENT: (i < nonTeredoAddresses.length)","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonTeredoAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < validIsatapAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonIsatapAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validIsatapAddress);","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue(InetAddresses.isIsatapAddress((Inet6Address) ip));","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals((("checking \'" + validIsatapAddress) + "\'"), ipv4, InetAddresses.getIsatapIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonIsatapAddress);","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isIsatapAddress((Inet6Address) ip));","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> validIsatapAddresses = ImmutableSet.of("2001:db8::5efe:102:304", "2001:db8::100:5efe:102:304", "2001:db8::200:5efe:102:304", "2001:db8::300:5efe:102:304");","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonIsatapAddresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1", "2001:db8::0040:5efe:102:304", "2001:db8::5ffe:102:304", "2001:db8::5eff:102:304", "2001:0:102:203:200:5efe:506:708");","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validIsatapAddress);","FOR_STATEMENT: (i < validIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals((("checking \'" + validIsatapAddress) + "\'"), ipv4, InetAddresses.getIsatapIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonIsatapAddress);","FOR_STATEMENT: (i < nonIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonIsatapAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < eightColons.length)","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv6Addr = InetAddress.getByName(eightColons[i]);","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String ipString:eightColons","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipString);","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_MOVE","LINE_COMMENT: // Shouldn't hit DNS, because it's an IP string literal.","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals(ipv6Addr, InetAddresses.forString(ipString));","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue(InetAddresses.isInetAddress(ipString));","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> eightColons = ImmutableSet.of("::7:6:5:4:3:2:1", "::7:6:5:4:3:2:0", "7:6:5:4:3:2:1::", "0:6:5:4:3:2:1::");","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipString);","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ipv6Addr, InetAddresses.forString(ipString));","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(InetAddresses.isInetAddress(ipString));","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddresses.forString("127.0.0.1");","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.coerceToInteger(InetAddresses.forString("127.0.0.1"))).isEqualTo(0x7f000001);","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testIPv6AddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerInputTooLarge()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerThrowsLessThanZero()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.checkBigIntegerConversion(String,BigInteger)","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testDottedQuadAddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerInputTooLarge()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerValid()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testIPv4AddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerValid()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerThrowsLessThanZero()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddressesTest.SCOPE_IDS : ImmutableSet<String>","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(StringLiteralConcatenation{"text/plain; something=\"cr@zy\"; something-else=\"crazy with spaces\";"+
" and-another-thing=\"\"; normal-thing=foo"+
}, MediaType.create("text", "plain").withParameter("something", "cr@zy").withParameter("something-else", "crazy with spaces").withParameter("and-another-thing", "").withParameter("normal-thing", "foo").toString());","METHOD: com.google.common.net.MediaTypeTest.testToString()","com.google.common.net.MediaTypeTest.testToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptyType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiSubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptySubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_emptyParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(uee).hasCauseThat().isSameInstanceAs(e);","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;","THEN_STATEMENT: hasLocalCache(cache)","com.google.common.cache.CacheTesting.checkRecency(LoadingCache<Integer, Integer>,int,Receiver<ReferenceEntry<Integer, Integer>>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Unit tests for {@link LongAdder}. */","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: TestCase","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_DELETE","JAVADOC: /**
   * No-op null-pointer test for {@link LongAdder} to override the {@link PackageSanityTests}
   * version, which checks package-private methods that we don't want to have to annotate as {@code
   * Nullable} because we don't want diffs from jsr166e.
   */","METHOD: com.google.common.cache.LongAdderTest.testNulls()","com.google.common.cache.LongAdderTest.testNulls()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.LongAdderTest.testOverflows()","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheStatsTest.testPlusLarge()","CLASS: com.google.common.cache.CacheStatsTest","com.google.common.cache.CacheStatsTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries).containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries.toArray()).asList().containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries.toArray(new Object[0])).asList().containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_ATTRIBUTE_MODIFIABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AtomicLongMapTest.random : Random","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AtomicLongMapTest.testModify_basher()","CLASS: com.google.common.util.concurrent.AtomicLongMapTest","com.google.common.util.concurrent.AtomicLongMapTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final AtomicInteger stoppingCount = new AtomicInteger();","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: service.addListener(new Listener() {
  public @Override void stopping(State from) {
    stoppingCount.incrementAndGet();
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, stoppingCount.get());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, stoppingCount.get());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.stopAsync().awaitStopped(10, TimeUnit.SECONDS);","FOR_STATEMENT: (k < 1000)","com.google.common.util.concurrent.ServiceManagerTest.testTransitionRace()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStart_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStart_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStop_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStop_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ee).hasCauseThat().isSameInstanceAs(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getCause()).isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(hashFunction.newHasher().putBytes(littleEndian).hash(), hashFunction.newHasher().putBytes(bigEndian).hash());","METHOD: com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());","METHOD: com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));","METHOD: com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());","METHOD: com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // go/do-not-mock-common-types-lsc","METHOD: com.google.common.hash.FunnelsTest.testSequential()","com.google.common.hash.FunnelsTest.testSequential()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings({"unchecked", "DoNotMock"}) Funnel<Object> elementFunnel = mock(Funnel.class);","METHOD: com.google.common.hash.FunnelsTest.testSequential()","com.google.common.hash.FunnelsTest.testSequential()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is subtype of %s", paramType, returnType).that(TypeToken.of(paramType).isSubtypeOf(returnType)).isTrue();","METHOD: com.google.common.reflect.SubtypeTester.isSubtype(T)","com.google.common.reflect.SubtypeTester.isSubtype(T)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is supertype of %s", returnType, paramType).that(TypeToken.of(returnType).isSupertypeOf(paramType)).isTrue();","METHOD: com.google.common.reflect.SubtypeTester.isSubtype(T)","com.google.common.reflect.SubtypeTester.isSubtype(T)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is subtype of %s", paramType, returnType).that(TypeToken.of(paramType).isSubtypeOf(returnType)).isFalse();","METHOD: com.google.common.reflect.SubtypeTester.notSubtype(Object)","com.google.common.reflect.SubtypeTester.notSubtype(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is supertype of %s", returnType, paramType).that(TypeToken.of(returnType).isSupertypeOf(paramType)).isFalse();","METHOD: com.google.common.reflect.SubtypeTester.notSubtype(Object)","com.google.common.reflect.SubtypeTester.notSubtype(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decode(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected IllegalArgumentException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalArgumentException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decodeChecked(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected DecodingException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: DecodingException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: IllegalArgumentException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: DecodingException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // We use this somewhat weird pattern with an enum for each assertion we want to make as a way
    // of dealing with the fact that one of the assertions is @GwtIncompatible but we don't want to
    // have to have duplicate @GwtIncompatible test methods just to make that assertion.","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(network2).isSameInstanceAs(network1);","METHOD: com.google.common.graph.ImmutableNetworkTest.copyOfImmutableNetwork_optimized()","com.google.common.graph.ImmutableNetworkTest.copyOfImmutableNetwork_optimized()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactly(N2, N4);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E41);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(endpoints.nodeV());","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addEdge(endpoints, e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(endpoints.nodeU(), endpoints.nodeV(), e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.graph.AbstractNetworkTest.createGraph(): Network<Integer, String>","METHOD: com.google.common.graph.AbstractNetworkTest.createGraph()","com.google.common.graph.AbstractNetworkTest.createGraph()","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unused") EndpointPair<Integer> unused = networkAsMutableNetwork.incidentNodes(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.incidentNodes(E12);","BODY: ","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> edges = ImmutableSet.copyOf(networkAsMutableNetwork.edges());","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeEdge(EDGE_NOT_IN_GRAPH));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactlyElementsIn(edges);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: networkAsMutableNetwork = (MutableNetwork<Integer, String>) network;","THEN_STATEMENT: (network instanceof MutableNetwork)","com.google.common.graph.AbstractNetworkTest.init()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (network instanceof MutableNetwork)","METHOD: com.google.common.graph.AbstractNetworkTest.init()","com.google.common.graph.AbstractNetworkTest.init()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edgesConnecting(N1, N2)).isEmpty();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.addNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).contains(N1);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<Integer> nodes = ImmutableSet.copyOf(networkAsMutableNetwork.nodes());","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeNode(NODE_NOT_IN_GRAPH));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactlyElementsIn(nodes);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addNode(n);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A proxy method that adds the node {@code n} to the graph being tested. In case of Immutable
   * graph implementations, this method should replace {@link #network} with a new graph that
   * includes this node.
   */","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addNode(Integer): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(n1);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(n2);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addEdge(n1, n2, e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A proxy method that adds the edge {@code e} to the graph being tested. In case of Immutable
   * graph implementations, this method should replace {@link #network} with a new graph that
   * includes this edge.
   */","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<Integer> nodes = ImmutableSet.copyOf(networkAsMutableNetwork.nodes());","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.addNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactlyElementsIn(nodes);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactly(E12, E13, E14);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E13));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactly(E12, E14);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unused") Set<Integer> unused = networkAsMutableNetwork.adjacentNodes(N1);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.adjacentNodes(N1);","BODY: ","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.hasEdgeConnecting_disconnectedNodes()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.concurrentIteration()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.hasEdgesConnecting_nodesNotInGraph()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.graphIsMutable()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: Network<Integer, String>","FIELD: com.google.common.graph.AbstractNetworkTest.network : Network<Integer, String>","com.google.common.graph.AbstractNetworkTest.network : MutableNetwork<Integer, String>","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractNetworkTest.networkAsMutableNetwork : MutableNetwork<Integer, String>","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N2, N1, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N2, N1, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(endpoints, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableDirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableDirectedGraphTest","com.google.common.graph.ConfigurableDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(fooReference1).isNotSameInstanceAs(fooReference2);","METHOD: com.google.common.graph.MapCacheTest.testRemoveEqualKeyWithDifferentReference()","com.google.common.graph.MapCacheTest.testRemoveEqualKeyWithDifferentReference()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_SELF_LOOP);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.GraphsTest.createUndirected()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedNetwork()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedNetwork()","com.google.common.graph.GraphsTest.transpose_undirectedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedValueGraph()","com.google.common.graph.GraphsTest.transpose_undirectedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedValueGraph()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedGraph()","com.google.common.graph.GraphsTest.transpose_undirectedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_SELF_LOOP);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.GraphsTest.createDirected()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedGraph()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Tests for {@link StandardMutableValueGraph} and related functionality. */","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());","METHOD: com.google.common.graph.ValueGraphTest.validateGraphState()","com.google.common.graph.ValueGraphTest.validateGraphState()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdgeOrder_unordered()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_undirected()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.concurrentIteration()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_directed()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(endpoints, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleDirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleDirectedGraphTest","com.google.common.graph.ConfigurableSimpleDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableUndirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableUndirectedGraphTest","com.google.common.graph.ConfigurableUndirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Tests for {@link ImmutableGraph} and {@link ImmutableValueGraph} . */","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_addNode()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_appliesGraphBuilderConfig()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_copiesGraphBuilder()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.copyOfImmutableValueGraph_optimized()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableValueGraph()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: putEdge(N1, N2);","METHOD: com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.removeEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_backwards()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isWithin(ALLOWED_ERROR).of((stats.populationCovariance() / (stats.xStats().populationStandardDeviation() * stats.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulator.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulator.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulatorByAddAllStats.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterable.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterator.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByRepeatedAdd.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAndAddAll.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStats.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.mean()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationVariance()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance by addAll(Stats) of " + values)).that(populationVarianceByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance by addAll(Stats) of " + values)).that(populationVarianceByAddAllStats).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sum()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_MEAN * MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleVariance()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationStandardDeviation()).isWithin(ALLOWED_ERROR).of(sqrt((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleStandardDeviation()).isWithin(ALLOWED_ERROR).of(sqrt((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: manyValuesAccumulatorByAddAllStatsAccumulator = new StatsAccumulator();","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: manyValuesAccumulatorByAddAllStatsAccumulator.addAll(statsAccumulatorOf(MANY_VALUES.subList(0, (MANY_VALUES.size() / 2))));","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: manyValuesAccumulatorByAddAllStatsAccumulator.addAll(statsAccumulatorOf(MANY_VALUES.subList((MANY_VALUES.size() / 2), MANY_VALUES.size())));","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulator.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulator.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulatorByAddAllStats.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterable.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterator.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByRepeatedAdd.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAndAddAll.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStats.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.count()).isEqualTo(MANY_VALUES_COUNT);","METHOD: com.google.common.math.StatsAccumulatorTest.testCount()","com.google.common.math.StatsAccumulatorTest.testCount()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulatorTest.statsAccumulatorOf(Iterable<? extends Number>)","CLASS: com.google.common.math.StatsAccumulatorTest","com.google.common.math.StatsAccumulatorTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.StatsAccumulatorTest.manyValuesAccumulatorByAddAllStatsAccumulator : StatsAccumulator","CLASS: com.google.common.math.StatsAccumulatorTest","com.google.common.math.StatsAccumulatorTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertLinearTransformationNaN(LinearTransformation)","com.google.common.math.StatsTesting.assertLinearTransformationNaN(LinearTransformation)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildConstantValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildLongManyValuesStatsSnapshot()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildHorizontalValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildManyValuesStatsSnapshot()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildVerticalValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildManyValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ONE_VALUE_STATS.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(TWO_VALUES_STATS.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_VARARGS.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ONE_VALUE_STATS.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(TWO_VALUES_STATS.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_VARARGS.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(INTEGER_MANY_VALUES)).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(Ints.toArray(INTEGER_MANY_VALUES))).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(LONG_MANY_VALUES)).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(Longs.toArray(LONG_MANY_VALUES))).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient by addAll(PairedStats) of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isWithin(ALLOWED_ERROR).of((accumulator.populationCovariance() / (accumulator.xStats().populationStandardDeviation() * accumulator.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient by addAll(PairedStats) of " + values)).that(pearsonsCorrelationCoefficientByAddAllPartitionedPairedStats).isWithin(ALLOWED_ERROR).of((accumulatorByAddAllPartitionedPairedStats.populationCovariance() / (accumulatorByAddAllPartitionedPairedStats.xStats().populationStandardDeviation() * accumulatorByAddAllPartitionedPairedStats.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance by addAll(PairedStats) of " + values)).that(populationCovarianceByAddAllPartitionedPairedStats).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance by addAll(PairedStats) of " + values)).that(populationCovarianceByAddAllPartitionedPairedStats).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(template, args).fail();","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTest_ignoreUnderscores()","METHOD: com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTest_ignoreUnderscores()","com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTeset_ignoreUnderscores()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_extraValueDelimiter()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Optional<Number> first = (Optional<Number>) numbers.first();","METHOD: com.google.common.base.OptionalTest.testSampleCodeFine2()","com.google.common.base.OptionalTest.testSampleCodeFine2()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(onlyPresent).containsExactly(2);","METHOD: com.google.common.base.OptionalTest.testPresentInstances_wildcards()","com.google.common.base.OptionalTest.testPresentInstances_wildcards()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetRootCause_Loop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetCasualChainLoop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, SomeCheckedException.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, Exception.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered
   */","METHOD: com.google.common.escape.UnicodeEscaper.escape(String)","com.google.common.escape.UnicodeEscaper.escape(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((k <= (Integer.MAX_VALUE / 2)), "k (%s) must be <= Integer.MAX_VALUE / 2", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: checkArgument((k >= 0), "k (%s) must be >= 0", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.buffer = (T[]) new Object[IntMath.checkedMultiply(k, 2)];","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue()} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link SortedSet}. To
   * obtain this map with the more specific generic type {@code Map<K, SortedSet<V>>}, call {@link
   * Multimaps#asMap(SortedSetMultimap)} instead. <b>However</b>, the returned map <i>itself</i> is
   * not necessarily a {@link SortedMap}: A {@code SortedSetMultimap} must expose the <i>values</i>
   * for a given key in sorted order, but it need not expose the <i>keys</i> in sorted order.
   * Individual {@code SortedSetMultimap} implementations, like those built with {@link
   * MultimapBuilder#treeKeys()}, may make additional guarantees.
   */","METHOD: com.google.common.collect.SortedSetMultimap.asMap()","com.google.common.collect.SortedSetMultimap.asMap()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Multiset<Object> multiset = (Multiset<Object>) multiset();","THEN_STATEMENT: (entryCount != 0)","com.google.common.collect.Multisets.EntrySet.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=
 * "https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description"
 * >streams library</a> in a slightly different way.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a id="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>Starting with Java 8, the core Java class libraries provide a new "Streams" library (in {@code
 * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key
 * differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency (but do render your code
 *       incompatible with Java 7 and earlier).
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */","CLASS: com.google.common.collect.FluentIterable","com.google.common.collect.FluentIterable","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","BLOCK_COMMENT: /*
     * GWT claims to support java.lang.Character's char-classification methods, but it actually only
     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this
     * seems to be documented is here:
     * https://groups.google.com/d/topic/google-web-toolkit-contributors/1UEzsryq1XI
     *
     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also
     * being allowed due to widespread practice.
     */","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isFinalPart && DIGIT_MATCHER.matches(part.charAt(0)))","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DIGIT_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.LETTER_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Protocol}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Key}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Extensions}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Accept}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Version}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.UPGRADE_INSECURE_REQUESTS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_RESOURCE_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CDN_LOOP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_OPENER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // for GWT","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument(ascii().matchesAllOf(value), "parameter values must be ASCII: %s", value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters, new Function<String, String>() {
  public @Override String apply(String value) {
    return ((TOKEN_MATCHER.matchesAllOf(value) && (! value.isEmpty())) ? value : escapeAndQuote(value));
  }
});","THEN_STATEMENT: (! parameters.isEmpty())","com.google.common.net.MediaType.computeToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((! token.isEmpty()));","METHOD: com.google.common.net.MediaType.normalizeToken(String)","com.google.common.net.MediaType.normalizeToken(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MEDIA_PRESENTATION_DESCRIPTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HEIF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.OPENSEARCH_DESCRIPTION_UTF_8 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JP2K : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.GEO_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int percentIndex = (- 1);","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: percentIndex = i;","THEN_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","BREAK_STATEMENT: ","THEN_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // everything after a '%' is ignored (it's a Scope ID): http://superuser.com/a/99753","ELSE_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (c == '.')","IF_STATEMENT: (c == '.')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (c == '.')","FOR_STATEMENT: (i < ipString.length())","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: ipString = ipString.substring(0, percentIndex);","THEN_STATEMENT: (percentIndex != (- 1))","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (percentIndex != (- 1))","THEN_STATEMENT: hasColon","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (c == ':')","ELSE_STATEMENT: (c == '.')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (c == ':')","FOR_STATEMENT: (i < ipString.length())","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (c == '%')","ELSE_STATEMENT: (c == ':')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_DELETE","JAVADOC: /** Returns {@code null} if unable to parse into a {@code byte[]}. */","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.toBigInteger(InetAddress)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromIPv4BigInteger(BigInteger)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromBigInteger(BigInteger,boolean)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromIPv6BigInteger(BigInteger)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(hitCount, missCount);","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(Math.max(0, saturatedSubtract(hitCount, other.hitCount)), Math.max(0, saturatedSubtract(missCount, other.missCount)), Math.max(0, saturatedSubtract(loadSuccessCount, other.loadSuccessCount)), Math.max(0, saturatedSubtract(loadExceptionCount, other.loadExceptionCount)), Math.max(0, saturatedSubtract(totalLoadTime, other.totalLoadTime)), Math.max(0, saturatedSubtract(evictionCount, other.evictionCount)));","METHOD: com.google.common.cache.CacheStats.minus(CacheStats)","com.google.common.cache.CacheStats.minus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(saturatedAdd(hitCount, other.hitCount), saturatedAdd(missCount, other.missCount), saturatedAdd(loadSuccessCount, other.loadSuccessCount), saturatedAdd(loadExceptionCount, other.loadExceptionCount), saturatedAdd(totalLoadTime, other.totalLoadTime), saturatedAdd(evictionCount, other.evictionCount));","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0
   */","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations, as well as those that threw exceptions.
   * This is defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(negativeToMaxValue(hitCount.sum()), negativeToMaxValue(missCount.sum()), negativeToMaxValue(loadSuccessCount.sum()), negativeToMaxValue(loadExceptionCount.sum()), negativeToMaxValue(totalLoadTime.sum()), negativeToMaxValue(evictionCount.sum()));","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.negativeToMaxValue(long)","CLASS: com.google.common.cache.AbstractCache.SimpleStatsCounter","com.google.common.cache.AbstractCache.SimpleStatsCounter","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_INSERT","JAVADOC: /** Returns the time that this entry was last written, in ns. */","METHOD: com.google.common.cache.ReferenceEntry.getWriteTime()","com.google.common.cache.ReferenceEntry.getWriteTime()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: AggregateFutureState<OutputT>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_INSERT","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState != null)","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // Let go of the memory held by the running state","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.runningState = null;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: wasInterrupted","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: localRunningState.interruptTask();","THEN_STATEMENT: wasInterrupted","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: releaseResources(OUTPUT_FUTURE_DONE);","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // nulls out `futures`","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: boolean wasInterrupted = wasInterrupted();","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Future<?> future:localFutures","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState == null)","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","THEN_STATEMENT: (localRunningState == null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ("futures=" + localFutures);","THEN_STATEMENT: (localFutures != null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init(RunningState)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleException(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture(ImmutableCollection<? extends ListenableFuture<? extends InputT>>,boolean,boolean)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectOneValue(int,InputT)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.addInitialException(Set<Throwable>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.log(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.decrementCountAndMaybeComplete(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectValueFromNonCancelledFuture(int,Future<? extends InputT>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.processCompleted(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.runningState : RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.allMustSucceed : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.futures : ImmutableCollection<? extends ListenableFuture<? extends InputT>>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.collectsValues : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.AggregateFuture.RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ForwardingFluentFuture.toString()","CLASS: com.google.common.util.concurrent.ForwardingFluentFuture","com.google.common.util.concurrent.ForwardingFluentFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new ListFutureRunningState(futures, allMustSucceed));","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed);","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,V)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CollectionFuture.values : List<Optional<V>>","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new AsyncCallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new AsyncCallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.CombinedFutureInterruptibleTask(Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","THEN_STATEMENT: thrownByExecute","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","BLOCK_COMMENT: /*
       * The future no longer needs to interrupt this task, so it no longer needs a reference to it.
       *
       * TODO(cpovirk): It might be nice for our InterruptibleTask subclasses to null out their
       *  `callable` fields automatically. That would make it less important for us to null out the
       * reference to `task` here (though it's still nice to do so in case our reference to the
       * executor keeps it alive). Ideally, nulling out `callable` would be the responsibility of
       * InterruptibleTask itself so that its other subclasses also benefit. (Handling `callable` in
       * InterruptibleTask itself might also eliminate some of the existing boilerplate for, e.g.,
       * pendingToString().)
       */","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: CombinedFuture.this.task = null;","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error.getCause());","THEN_STATEMENT: (error instanceof ExecutionException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error);","ELSE_STATEMENT: (error instanceof CancellationException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.CallableInterruptibleTask(Callable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new CallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new CallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setFuture(value);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.AsyncCallableInterruptibleTask(AsyncCallable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.interruptTask()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.collectOneValue(int,Object)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.task : CombinedFutureInterruptibleTask<?>","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureRunningState","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: Longs.constrainToRange(timeoutNanos, 0L, ((Long.MAX_VALUE / 4) * 3));","METHOD: com.google.common.util.concurrent.Monitor.toSafeNanos(long,TimeUnit)","com.google.common.util.concurrent.Monitor.toSafeNanos(long,TimeUnit)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: annotations.toArray(new Annotation[0]);","METHOD: com.google.common.reflect.Parameter.getDeclaredAnnotations()","com.google.common.reflect.Parameter.getDeclaredAnnotations()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new InputStream() {
  int bitBuffer = 0;
  int bitBufferLength = 0;
  int readChars = 0;
  boolean hitPadding = false;
  public @Override int read() throws IOException {
    while (true)      {
        int readChar = reader.read();
        if ((readChar == (- 1)))
            {
              if (((! hitPadding) && (! alphabet.isValidPaddingStartPosition(readChars))))
                  {
                    throw new DecodingException(("Invalid input length " + readChars));
                  }
              return (- 1);
            }
        readChars ++;
        char ch = (char) readChar;
        if (((paddingChar != null) && (paddingChar.charValue() == ch)))
            {
              if (((! hitPadding) && ((readChars == 1) || (! alphabet.isValidPaddingStartPosition((readChars - 1))))))
                  {
                    throw new DecodingException(("Padding cannot start at index " + readChars));
                  }
              hitPadding = true;
            }
        else
            if (hitPadding)
                {
                  throw new DecodingException(((("Expected padding character but found \'" + ch) + "\' at index ") + readChars));
                }
            else
                {
                  bitBuffer <<= alphabet.bitsPerChar;
                  bitBuffer |= alphabet.decode(ch);
                  bitBufferLength += alphabet.bitsPerChar;
                  if ((bitBufferLength >= 8))
                      {
                        bitBufferLength -= 8;
                        return ((bitBuffer >> bitBufferLength) & 0xFF);
                      }
                }
      }
  }
  public @Override int read(byte[] buf, int off, int len) throws IOException {
    checkPositionIndexes(off, (off + len), buf.length);
    int i = off;
    for (; (i < (off + len)); i ++) 
      {
        int b = read();
        if ((b == (- 1)))
            {
              int read = (i - off);
              return ((read == 0) ? (- 1) : read);
            }
        buf[i] = (byte) b;
      }
    return (i - off);
  }
  public @Override void close() throws IOException {
    reader.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.byteArrayOutputStream = byteArrayOutputStream;","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: output = new DataOutputStream(byteArrayOutputStream);","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARAMETER_RENAMING","PARAMETER: byteArrayOutputStream","PARAMETERS: ","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: byteArrayOutputStream.toByteArray();","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.toByteArray()","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.toByteArray()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputStream : ByteArrayOutputStream","FIELD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputStream : ByteArrayOutputStream","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputSteam : ByteArrayOutputStream","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkPositionIndexes(off, (off + len), b.length);","METHOD: com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","THROW_STATEMENT: new IndexOutOfBoundsException(String.format("len (%s) cannot be negative", len));","THEN_STATEMENT: (len < 0)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}
   */","METHOD: com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new ByteArrayDataOutputStream(checkNotNull(byteArrayOutputStream));","METHOD: com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARAMETER_RENAMING","PARAMETER: byteArrayOutputStream","PARAMETERS: ","com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: byte[] buf = createBuffer();","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // A buffer is allocated if skipSafely does not skip any bytes.","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: byte[] buf = null;","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // Allocate a buffer bounded by the maximum size that can be requested, for
          // example an array of BUFFER_SIZE is unnecessary when the value of remaining
          // is smaller.","THEN_STATEMENT: (buf == null)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: buf = new byte[skip];","THEN_STATEMENT: (buf == null)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (buf == null)","THEN_STATEMENT: (skipped == 0)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int skip = (int) Math.min(remaining, BUFFER_SIZE);","THEN_STATEMENT: (skipped == 0)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An {@link OutputStream} that starts buffering to a byte array, but switches to file buffering
 * once the data reaches a configurable size.
 *
 * <p>Temporary files created by this stream may live in the local filesystem until either:
 *
 * <ul>
 *   <li>{@link #reset} is called (removing the data in this stream and deleting the file), or...
 *   <li>this stream (or, more precisely, its {@link #asByteSource} view) is finalized during
 *       garbage collection, <strong>AND</strong> this stream was not constructed with {@linkplain
 *       #FileBackedOutputStream(int) the 1-arg constructor} or the {@linkplain
 *       #FileBackedOutputStream(int, boolean) 2-arg constructor} passing {@code false} in the
 *       second parameter.
 * </ul>
 *
 * <p>This class is thread-safe.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: File temp = File.createTempFile("FileBackedOutputStream", null, parentDirectory);","THEN_STATEMENT: ((file == null) && ((memory.getCount() + len) > fileThreshold))","com.google.common.io.FileBackedOutputStream.update(int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.fileThreshold = fileThreshold;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.resetOnFinalize = resetOnFinalize;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: memory = new MemoryOutput();","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: out = memory;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: resetOnFinalize","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: resetOnFinalize","IF_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: source = new ByteSource() {
  public @Override InputStream openStream() throws IOException {
    return openInputStream();
  }
  protected @Override void finalize() {
    try
      {
        reset();
      }
    catch (Throwable t)
      {
        t.printStackTrace(System.err);
      }
  }
};","THEN_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: source = new ByteSource() {
  public @Override InputStream openStream() throws IOException {
    return openInputStream();
  }
};","ELSE_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: this(fileThreshold, resetOnFinalize, null);","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   */","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean,File)","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.FileBackedOutputStream.parentDirectory : File","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractValueGraph.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    return AbstractValueGraph.this.edges();
  }
  public @Override boolean isDirected() {
    return AbstractValueGraph.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractValueGraph.this.allowsSelfLoops();
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractValueGraph.this.nodeOrder();
  }
  public @Override ElementOrder<N> incidentEdgeOrder() {
    return AbstractValueGraph.this.incidentEdgeOrder();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractValueGraph.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractValueGraph.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractValueGraph.this.successors(node);
  }
  public @Override int degree(N node) {
    return AbstractValueGraph.this.degree(node);
  }
  public @Override int inDegree(N node) {
    return AbstractValueGraph.this.inDegree(node);
  }
  public @Override int outDegree(N node) {
    return AbstractValueGraph.this.outDegree(node);
  }
};","METHOD: com.google.common.graph.AbstractValueGraph.asGraph()","com.google.common.graph.AbstractValueGraph.asGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new ElementOrder<S>(Type.SORTED, checkNotNull(comparator));","METHOD: com.google.common.graph.ElementOrder.sorted(Comparator<S>)","com.google.common.graph.ElementOrder.sorted(Comparator<S>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","SWITCH_CASE: STABLE","SWITCH_STATEMENT: type","com.google.common.graph.ElementOrder.createMap(int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ElementOrder.stable()","CLASS: com.google.common.graph.ElementOrder","com.google.common.graph.ElementOrder","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.adjacentNodes(N)","com.google.common.graph.Graph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.incidentEdgeOrder()","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the edges whose {@link #incidentNodes(Object) incident nodes} in this network include
   * {@code node}.
   *
   * <p>This is equal to the union of {@link #inEdges(Object)} and {@link #outEdges(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this network
   */","METHOD: com.google.common.graph.Network.incidentEdges(N)","com.google.common.graph.Network.incidentEdges(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this network.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this network
   */","METHOD: com.google.common.graph.Network.adjacentNodes(N)","com.google.common.graph.Network.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: (! edgesConnecting(nodeU, nodeV).isEmpty());","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: (nodes().contains(nodeU) && successors(nodeU).contains(nodeV));","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV());","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractNetwork.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    if (allowsParallelEdges())
        {
          return super.edges();
        }
    return new AbstractSet<EndpointPair<N>>() {
  public @Override Iterator<EndpointPair<N>> iterator() {
    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {
  public @Override EndpointPair<N> apply(E edge) {
    return incidentNodes(edge);
  }
});
  }
  public @Override int size() {
    return AbstractNetwork.this.edges().size();
  }
  public @SuppressWarnings("unchecked") @Override boolean contains(@NullableDecl Object obj) {
    if ((! (obj instanceof EndpointPair)))
        {
          return false;
        }
    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
    return ((isOrderingCompatible(endpointPair) && nodes().contains(endpointPair.nodeU())) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV()));
  }
};
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractNetwork.this.nodeOrder();
  }
  public @Override ElementOrder<N> incidentEdgeOrder() {
    return ElementOrder.unordered();
  }
  public @Override boolean isDirected() {
    return AbstractNetwork.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractNetwork.this.allowsSelfLoops();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractNetwork.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractNetwork.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractNetwork.this.successors(node);
  }
};","METHOD: com.google.common.graph.AbstractNetwork.asGraph()","com.google.common.graph.AbstractNetwork.asGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: StandardValueGraph<N, V>","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: (graph.isDirected() ? DirectedGraphConnections.ofImmutable(node, graph.incidentEdges(node), successorNodeToValueFn) : UndirectedGraphConnections.ofImmutable(Maps.asMap(graph.adjacentNodes(node), successorNodeToValueFn)));","METHOD: com.google.common.graph.ImmutableValueGraph.connectionsOf(ValueGraph<N, V>,N)","com.google.common.graph.ImmutableValueGraph.connectionsOf(ValueGraph<N, V>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A builder for creating {@link ImmutableValueGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableValueGraph<City, Distance> CITY_ROAD_DISTANCE_GRAPH =
   *     ValueGraphBuilder.undirected()
   *         .<City, Distance>immutable()
   *         .putEdgeValue(PARIS, BERLIN, kilometers(1060))
   *         .putEdgeValue(PARIS, BRUSSELS, kilometers(317))
   *         .putEdgeValue(BERLIN, BRUSSELS, kilometers(764))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */","CLASS: com.google.common.graph.ImmutableValueGraph.Builder","com.google.common.graph.ImmutableValueGraph.Builder","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // The incidentEdgeOrder for immutable graphs is always stable. However, we don't want to
      // modify this builder, so we make a copy instead.","METHOD: com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.mutableValueGraph = graphBuilder.copy().incidentEdgeOrder(ElementOrder.<N>stable()).build();","METHOD: com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.clear()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: cacheEntry = null;","METHOD: com.google.common.graph.MapIteratorCache.clearCache()","com.google.common.graph.MapIteratorCache.clearCache()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Entry<K, V> entry = cacheEntry;","METHOD: com.google.common.graph.MapIteratorCache.getIfCached(Object)","com.google.common.graph.MapIteratorCache.getIfCached(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.put(K,V)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractSet<K>() {
  public @Override UnmodifiableIterator<K> iterator() {
    final Iterator<Entry<K, V>> entryIterator = backingMap.entrySet().iterator();
    return new UnmodifiableIterator<K>() {
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    Entry<K, V> entry = entryIterator.next();
    cacheEntry = entry;
    return entry.getKey();
  }
};
  }
  public @Override int size() {
    return backingMap.size();
  }
  public @Override boolean contains(@NullableDecl Object key) {
    return containsKey(key);
  }
};","METHOD: com.google.common.graph.MapIteratorCache.unmodifiableKeySet()","com.google.common.graph.MapIteratorCache.unmodifiableKeySet()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.graph.MapIteratorCache.cacheEntry : Entry<K, V>","FIELD: com.google.common.graph.MapIteratorCache.cacheEntry : Entry<K, V>","com.google.common.graph.MapIteratorCache.entrySetCache : Entry<K, V>","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapIteratorCache.entrySetCache : Entry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.GraphConnections.incidentEdgeIterator(N)","CLASS: com.google.common.graph.GraphConnections","com.google.common.graph.GraphConnections","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ((graph instanceof ImmutableGraph) ? (ImmutableGraph<N>) graph : new ImmutableGraph<N>(new StandardValueGraph<N, Presence>(GraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size())));","METHOD: com.google.common.graph.ImmutableGraph.copyOf(Graph<N>)","com.google.common.graph.ImmutableGraph.copyOf(Graph<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A builder for creating {@link ImmutableGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableGraph<Country> COUNTRY_ADJACENCY_GRAPH =
   *     GraphBuilder.undirected()
   *         .<Country>immutable()
   *         .putEdge(FRANCE, GERMANY)
   *         .putEdge(FRANCE, BELGIUM)
   *         .putEdge(GERMANY, BELGIUM)
   *         .addNode(ICELAND)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */","CLASS: com.google.common.graph.ImmutableGraph.Builder","com.google.common.graph.ImmutableGraph.Builder","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // The incidentEdgeOrder for immutable graphs is always stable. However, we don't want to
      // modify this builder, so we make a copy instead.","METHOD: com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.mutableGraph = graphBuilder.copy().incidentEdgeOrder(ElementOrder.<N>stable()).build();","METHOD: com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Function<N, Presence> edgeValueFn = (Function<N, Presence>) Functions.constant(Presence.EDGE_EXISTS);","METHOD: com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: (graph.isDirected() ? DirectedGraphConnections.ofImmutable(node, graph.incidentEdges(node), edgeValueFn) : UndirectedGraphConnections.ofImmutable(Maps.asMap(graph.adjacentNodes(node), edgeValueFn)));","METHOD: com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ImmutableGraph","com.google.common.graph.ImmutableGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.adjacentNodes(N)","com.google.common.graph.ValueGraph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.BaseGraph.adjacentNodes(N)","com.google.common.graph.BaseGraph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.incidentEdges(N)","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractGraphBuilder.incidentEdgeOrder : ElementOrder<N>","CLASS: com.google.common.graph.AbstractGraphBuilder","com.google.common.graph.AbstractGraphBuilder","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(edge);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(node);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(edge);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(node);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Configurable implementation of {@link ValueGraph} that supports the options supplied by {@link
 * AbstractGraphBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link GraphConnections}.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */","CLASS: com.google.common.graph.StandardValueGraph","com.google.common.graph.StandardValueGraph","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapRetrievalCache.cacheEntry1 : CacheEntry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapRetrievalCache.cacheEntry2 : CacheEntry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty
   */","METHOD: com.google.common.math.Stats.mean()","com.google.common.math.Stats.mean()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value >= 1.0)","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value <= (- 1.0))","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: value;","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: 1.0;","THEN_STATEMENT: (value >= 1.0)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: (- 1.0);","THEN_STATEMENT: (value <= (- 1.0))","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: Doubles.constrainToRange(value, (- 1.0), 1.0);","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value > 0.0)","METHOD: com.google.common.math.DoubleUtils.ensureNonNegative(double)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (value > 0.0)","IF_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: value;","THEN_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: 0.0;","ELSE_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: Math.max(value, 0.0);","METHOD: com.google.common.math.DoubleUtils.ensureNonNegative(double)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (count == 0)","METHOD: com.google.common.math.StatsAccumulator.addAll(Stats)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (count == 0)","IF_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: count = values.count();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean = values.mean();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas = values.sumOfSquaresOfDeltas();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: min = values.min();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: max = values.max();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: count += values.count();","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: min = Math.min(min, values.min());","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: max = Math.max(max, values.max());","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","IF_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // This is a generalized version of the calculation in add(double) above.","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double delta = (values.mean() - mean);","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean += ((delta * values.count()) / count);","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas += (values.sumOfSquaresOfDeltas() + ((delta * (values.mean() - mean)) * values.count()));","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean = calculateNewMeanNonFinite(mean, values.mean());","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas = NaN;","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: merge(values.count(), values.mean(), values.sumOfSquaresOfDeltas(), values.min(), values.max());","METHOD: com.google.common.math.StatsAccumulator.addAll(Stats)","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulator.merge(long,double,double,double,double)","CLASS: com.google.common.math.StatsAccumulator","com.google.common.math.StatsAccumulator","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulator.addAll(StatsAccumulator)","CLASS: com.google.common.math.StatsAccumulator","com.google.common.math.StatsAccumulator","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a single-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code float} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code float} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Floats.tryParse(String)","com.google.common.primitives.Floats.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a double-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code double} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code double} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Doubles.tryParse(String)","com.google.common.primitives.Doubles.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String)} for that version.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String)","com.google.common.primitives.Ints.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String, int)} for that version.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String,int)","com.google.common.primitives.Ints.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the least value present in {@code array}, treating values as unsigned.
   *
   * @param array a <i>nonempty</i> array of {@code byte} values
   * @return the value present in {@code array} that is less than or equal to every other value in
   *     the array according to {@link #compare}
   * @throws IllegalArgumentException if {@code array} is empty
   */","METHOD: com.google.common.primitives.UnsignedBytes.min(byte...)","com.google.common.primitives.UnsignedBytes.min(byte...)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the greatest value present in {@code array}, treating values as unsigned.
   *
   * @param array a <i>nonempty</i> array of {@code byte} values
   * @return the value present in {@code array} that is greater than or equal to every other value
   *     in the array according to {@link #compare}
   * @throws IllegalArgumentException if {@code array} is empty
   */","METHOD: com.google.common.primitives.UnsignedBytes.max(byte...)","com.google.common.primitives.UnsignedBytes.max(byte...)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String)} for that version.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String)","com.google.common.primitives.Longs.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String, int)} for that version.
   *
   * @param string the string representation of an long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String,int)","com.google.common.primitives.Longs.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: String.valueOf(o);","BODY: ","com.google.common.base.Strings.lenientToString(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: "null";","THEN_STATEMENT: (o == null)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (o == null)","METHOD: com.google.common.base.Strings.lenientToString(Object)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: o.toString();","BODY: ","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered
   */","METHOD: com.google.common.escape.UnicodeEscaper.escape(String)","com.google.common.escape.UnicodeEscaper.escape(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedHashMultiset<?>)","com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedHashMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((k <= (Integer.MAX_VALUE / 2)), "k (%s) must be <= Integer.MAX_VALUE / 2", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: checkArgument((k >= 0), "k (%s) must be >= 0", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.buffer = (T[]) new Object[IntMath.checkedMultiply(k, 2)];","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,UsingToStringOrdering)","com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,UsingToStringOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,HashBasedTable<?, ?, ?>)","com.google.common.collect.HashBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,HashBasedTable<?, ?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableSetMultimap)","com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableSetMultimap)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.TreeBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeBasedTable<?, ?, ?>)","com.google.common.collect.TreeBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeBasedTable<?, ?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.NaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.NaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.NaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,NaturalOrdering)","com.google.common.collect.NaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,NaturalOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,SparseImmutableTable<Object, Object, Object>)","com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,SparseImmutableTable<Object, Object, Object>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue()} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link SortedSet}. To
   * obtain this map with the more specific generic type {@code Map<K, SortedSet<V>>}, call {@link
   * Multimaps#asMap(SortedSetMultimap)} instead. <b>However</b>, the returned map <i>itself</i> is
   * not necessarily a {@link SortedMap}: A {@code SortedSetMultimap} must expose the <i>values</i>
   * for a given key in sorted order, but it need not expose the <i>keys</i> in sorted order.
   * Individual {@code SortedSetMultimap} implementations, like those built with {@link
   * MultimapBuilder#treeKeys()}, may make additional guarantees.
   */","METHOD: com.google.common.collect.SortedSetMultimap.asMap()","com.google.common.collect.SortedSetMultimap.asMap()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultimap<?, ?>)","com.google.common.collect.HashMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultiset<?>)","com.google.common.collect.HashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumMap<?, ?>)","com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumMap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumSet<?>)","com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumSet<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ArrayListMultimap<?, ?>)","com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ArrayListMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.TreeMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeMultimap<?, ?>)","com.google.common.collect.TreeMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSortedMap<?, ?>)","com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSortedMap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Multiset<Object> multiset = (Multiset<Object>) multiset();","THEN_STATEMENT: (entryCount != 0)","com.google.common.collect.Multisets.EntrySet.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableListMultimap)","com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableListMultimap)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableListMultimap<?, ?>)","com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableListMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,DenseImmutableTable<Object, Object, Object>)","com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,DenseImmutableTable<Object, Object, Object>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSetMultimap<?, ?>)","com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSetMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.Range_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.Range_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.Range_CustomFieldSerializer.serialize(SerializationStreamWriter,Range<?>)","com.google.common.collect.Range_CustomFieldSerializer.serialize(SerializationStreamWriter,Range<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=
 * "https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description"
 * >streams library</a> in a slightly different way.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a id="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>Starting with Java 8, the core Java class libraries provide a new "Streams" library (in {@code
 * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key
 * differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency (but do render your code
 *       incompatible with Java 7 and earlier).
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */","CLASS: com.google.common.collect.FluentIterable","com.google.common.collect.FluentIterable","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,ReverseNaturalOrdering)","com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,ReverseNaturalOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,AllEqualOrdering)","com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,AllEqualOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","BLOCK_COMMENT: /*
     * GWT claims to support java.lang.Character's char-classification methods, but it actually only
     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this
     * seems to be documented is here:
     * https://groups.google.com/d/topic/google-web-toolkit-contributors/1UEzsryq1XI
     *
     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also
     * being allowed due to widespread practice.
     */","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isFinalPart && DIGIT_MATCHER.matches(part.charAt(0)))","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DIGIT_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.LETTER_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Protocol}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Key}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Extensions}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Accept}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Version}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.UPGRADE_INSECURE_REQUESTS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_RESOURCE_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CDN_LOOP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_OPENER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // for GWT","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument(ascii().matchesAllOf(value), "parameter values must be ASCII: %s", value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters, new Function<String, String>() {
  public @Override String apply(String value) {
    return ((TOKEN_MATCHER.matchesAllOf(value) && (! value.isEmpty())) ? value : escapeAndQuote(value));
  }
});","THEN_STATEMENT: (! parameters.isEmpty())","com.google.common.net.MediaType.computeToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((! token.isEmpty()));","METHOD: com.google.common.net.MediaType.normalizeToken(String)","com.google.common.net.MediaType.normalizeToken(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MEDIA_PRESENTATION_DESCRIPTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HEIF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.OPENSEARCH_DESCRIPTION_UTF_8 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JP2K : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.GEO_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(hitCount, missCount);","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(Math.max(0, saturatedSubtract(hitCount, other.hitCount)), Math.max(0, saturatedSubtract(missCount, other.missCount)), Math.max(0, saturatedSubtract(loadSuccessCount, other.loadSuccessCount)), Math.max(0, saturatedSubtract(loadExceptionCount, other.loadExceptionCount)), Math.max(0, saturatedSubtract(totalLoadTime, other.totalLoadTime)), Math.max(0, saturatedSubtract(evictionCount, other.evictionCount)));","METHOD: com.google.common.cache.CacheStats.minus(CacheStats)","com.google.common.cache.CacheStats.minus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(saturatedAdd(hitCount, other.hitCount), saturatedAdd(missCount, other.missCount), saturatedAdd(loadSuccessCount, other.loadSuccessCount), saturatedAdd(loadExceptionCount, other.loadExceptionCount), saturatedAdd(totalLoadTime, other.totalLoadTime), saturatedAdd(evictionCount, other.evictionCount));","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0
   */","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations, as well as those that threw exceptions.
   * This is defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(negativeToMaxValue(hitCount.sum()), negativeToMaxValue(missCount.sum()), negativeToMaxValue(loadSuccessCount.sum()), negativeToMaxValue(loadExceptionCount.sum()), negativeToMaxValue(totalLoadTime.sum()), negativeToMaxValue(evictionCount.sum()));","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.negativeToMaxValue(long)","CLASS: com.google.common.cache.AbstractCache.SimpleStatsCounter","com.google.common.cache.AbstractCache.SimpleStatsCounter","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: AggregateFutureState<OutputT>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_INSERT","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState != null)","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // Let go of the memory held by the running state","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.runningState = null;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: wasInterrupted","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: localRunningState.interruptTask();","THEN_STATEMENT: wasInterrupted","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: releaseResources(OUTPUT_FUTURE_DONE);","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // nulls out `futures`","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: boolean wasInterrupted = wasInterrupted();","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Future<?> future:localFutures","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState == null)","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","THEN_STATEMENT: (localRunningState == null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ("futures=" + localFutures);","THEN_STATEMENT: (localFutures != null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init(RunningState)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleException(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture(ImmutableCollection<? extends ListenableFuture<? extends InputT>>,boolean,boolean)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectOneValue(int,InputT)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.addInitialException(Set<Throwable>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.log(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.decrementCountAndMaybeComplete(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectValueFromNonCancelledFuture(int,Future<? extends InputT>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.processCompleted(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.runningState : RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.allMustSucceed : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.futures : ImmutableCollection<? extends ListenableFuture<? extends InputT>>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.collectsValues : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.AggregateFuture.RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ForwardingFluentFuture.toString()","CLASS: com.google.common.util.concurrent.ForwardingFluentFuture","com.google.common.util.concurrent.ForwardingFluentFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new ListFutureRunningState(futures, allMustSucceed));","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed);","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,V)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CollectionFuture.values : List<Optional<V>>","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new AsyncCallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new AsyncCallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.CombinedFutureInterruptibleTask(Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","THEN_STATEMENT: thrownByExecute","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","BLOCK_COMMENT: /*
       * The future no longer needs to interrupt this task, so it no longer needs a reference to it.
       *
       * TODO(cpovirk): It might be nice for our InterruptibleTask subclasses to null out their
       *  `callable` fields automatically. That would make it less important for us to null out the
       * reference to `task` here (though it's still nice to do so in case our reference to the
       * executor keeps it alive). Ideally, nulling out `callable` would be the responsibility of
       * InterruptibleTask itself so that its other subclasses also benefit. (Handling `callable` in
       * InterruptibleTask itself might also eliminate some of the existing boilerplate for, e.g.,
       * pendingToString().)
       */","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: CombinedFuture.this.task = null;","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error.getCause());","THEN_STATEMENT: (error instanceof ExecutionException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error);","ELSE_STATEMENT: (error instanceof CancellationException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.CallableInterruptibleTask(Callable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new CallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new CallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setFuture(value);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.AsyncCallableInterruptibleTask(AsyncCallable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.interruptTask()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.collectOneValue(int,Object)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.task : CombinedFutureInterruptibleTask<?>","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureRunningState","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new InputStream() {
  int bitBuffer = 0;
  int bitBufferLength = 0;
  int readChars = 0;
  boolean hitPadding = false;
  public @Override int read() throws IOException {
    while (true)      {
        int readChar = reader.read();
        if ((readChar == (- 1)))
            {
              if (((! hitPadding) && (! alphabet.isValidPaddingStartPosition(readChars))))
                  {
                    throw new DecodingException(("Invalid input length " + readChars));
                  }
              return (- 1);
            }
        readChars ++;
        char ch = (char) readChar;
        if (((paddingChar != null) && (paddingChar.charValue() == ch)))
            {
              if (((! hitPadding) && ((readChars == 1) || (! alphabet.isValidPaddingStartPosition((readChars - 1))))))
                  {
                    throw new DecodingException(("Padding cannot start at index " + readChars));
                  }
              hitPadding = true;
            }
        else
            if (hitPadding)
                {
                  throw new DecodingException(((("Expected padding character but found \'" + ch) + "\' at index ") + readChars));
                }
            else
                {
                  bitBuffer <<= alphabet.bitsPerChar;
                  bitBuffer |= alphabet.decode(ch);
                  bitBufferLength += alphabet.bitsPerChar;
                  if ((bitBufferLength >= 8))
                      {
                        bitBufferLength -= 8;
                        return ((bitBuffer >> bitBufferLength) & 0xFF);
                      }
                }
      }
  }
  public @Override int read(byte[] buf, int off, int len) throws IOException {
    checkPositionIndexes(off, (off + len), buf.length);
    int i = off;
    for (; (i < (off + len)); i ++) 
      {
        int b = read();
        if ((b == (- 1)))
            {
              int read = (i - off);
              return ((read == 0) ? (- 1) : read);
            }
        buf[i] = (byte) b;
      }
    return (i - off);
  }
  public @Override void close() throws IOException {
    reader.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a single-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code float} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code float} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Floats.tryParse(String)","com.google.common.primitives.Floats.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a double-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code double} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code double} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Doubles.tryParse(String)","com.google.common.primitives.Doubles.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String)} for that version.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String)","com.google.common.primitives.Ints.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String, int)} for that version.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String,int)","com.google.common.primitives.Ints.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.primitives.UnsignedLong_CustomFieldSerializer.serialize(SerializationStreamWriter,UnsignedLong)","com.google.common.primitives.UnsignedLong_CustomFieldSerializer.serialize(SerializationStreamWriter,UnsignedLong)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.primitives.UnsignedLong_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.primitives.UnsignedLong_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String)} for that version.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String)","com.google.common.primitives.Longs.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String, int)} for that version.
   *
   * @param string the string representation of an long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String,int)","com.google.common.primitives.Longs.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.serialize(SerializationStreamWriter,PairwiseEquivalence<?>)","com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.serialize(SerializationStreamWriter,PairwiseEquivalence<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: String.valueOf(o);","BODY: ","com.google.common.base.Strings.lenientToString(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: "null";","THEN_STATEMENT: (o == null)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (o == null)","METHOD: com.google.common.base.Strings.lenientToString(Object)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: o.toString();","BODY: ","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Present_CustomFieldSerializer.serialize(SerializationStreamWriter,Present<?>)","com.google.common.base.Present_CustomFieldSerializer.serialize(SerializationStreamWriter,Present<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Present_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.Present_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Absent_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.Absent_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Absent_CustomFieldSerializer.serialize(SerializationStreamWriter,Absent<?>)","com.google.common.base.Absent_CustomFieldSerializer.serialize(SerializationStreamWriter,Absent<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered
   */","METHOD: com.google.common.escape.UnicodeEscaper.escape(String)","com.google.common.escape.UnicodeEscaper.escape(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((k <= (Integer.MAX_VALUE / 2)), "k (%s) must be <= Integer.MAX_VALUE / 2", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: checkArgument((k >= 0), "k (%s) must be >= 0", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.buffer = (T[]) new Object[IntMath.checkedMultiply(k, 2)];","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue()} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link SortedSet}. To
   * obtain this map with the more specific generic type {@code Map<K, SortedSet<V>>}, call {@link
   * Multimaps#asMap(SortedSetMultimap)} instead. <b>However</b>, the returned map <i>itself</i> is
   * not necessarily a {@link SortedMap}: A {@code SortedSetMultimap} must expose the <i>values</i>
   * for a given key in sorted order, but it need not expose the <i>keys</i> in sorted order.
   * Individual {@code SortedSetMultimap} implementations, like those built with {@link
   * MultimapBuilder#treeKeys()}, may make additional guarantees.
   */","METHOD: com.google.common.collect.SortedSetMultimap.asMap()","com.google.common.collect.SortedSetMultimap.asMap()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Multiset<Object> multiset = (Multiset<Object>) multiset();","THEN_STATEMENT: (entryCount != 0)","com.google.common.collect.Multisets.EntrySet.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=
 * "https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description"
 * >streams library</a> in a slightly different way.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a id="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>Starting with Java 8, the core Java class libraries provide a new "Streams" library (in {@code
 * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key
 * differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency (but do render your code
 *       incompatible with Java 7 and earlier).
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */","CLASS: com.google.common.collect.FluentIterable","com.google.common.collect.FluentIterable","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","BLOCK_COMMENT: /*
     * GWT claims to support java.lang.Character's char-classification methods, but it actually only
     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this
     * seems to be documented is here:
     * https://groups.google.com/d/topic/google-web-toolkit-contributors/1UEzsryq1XI
     *
     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also
     * being allowed due to widespread practice.
     */","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isFinalPart && DIGIT_MATCHER.matches(part.charAt(0)))","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DIGIT_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.LETTER_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Protocol}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Key}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Extensions}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Accept}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Version}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.UPGRADE_INSECURE_REQUESTS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_RESOURCE_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CDN_LOOP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_OPENER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // for GWT","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument(ascii().matchesAllOf(value), "parameter values must be ASCII: %s", value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters, new Function<String, String>() {
  public @Override String apply(String value) {
    return ((TOKEN_MATCHER.matchesAllOf(value) && (! value.isEmpty())) ? value : escapeAndQuote(value));
  }
});","THEN_STATEMENT: (! parameters.isEmpty())","com.google.common.net.MediaType.computeToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((! token.isEmpty()));","METHOD: com.google.common.net.MediaType.normalizeToken(String)","com.google.common.net.MediaType.normalizeToken(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MEDIA_PRESENTATION_DESCRIPTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HEIF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.OPENSEARCH_DESCRIPTION_UTF_8 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JP2K : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.GEO_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(hitCount, missCount);","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(Math.max(0, saturatedSubtract(hitCount, other.hitCount)), Math.max(0, saturatedSubtract(missCount, other.missCount)), Math.max(0, saturatedSubtract(loadSuccessCount, other.loadSuccessCount)), Math.max(0, saturatedSubtract(loadExceptionCount, other.loadExceptionCount)), Math.max(0, saturatedSubtract(totalLoadTime, other.totalLoadTime)), Math.max(0, saturatedSubtract(evictionCount, other.evictionCount)));","METHOD: com.google.common.cache.CacheStats.minus(CacheStats)","com.google.common.cache.CacheStats.minus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(saturatedAdd(hitCount, other.hitCount), saturatedAdd(missCount, other.missCount), saturatedAdd(loadSuccessCount, other.loadSuccessCount), saturatedAdd(loadExceptionCount, other.loadExceptionCount), saturatedAdd(totalLoadTime, other.totalLoadTime), saturatedAdd(evictionCount, other.evictionCount));","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0
   */","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations, as well as those that threw exceptions.
   * This is defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(negativeToMaxValue(hitCount.sum()), negativeToMaxValue(missCount.sum()), negativeToMaxValue(loadSuccessCount.sum()), negativeToMaxValue(loadExceptionCount.sum()), negativeToMaxValue(totalLoadTime.sum()), negativeToMaxValue(evictionCount.sum()));","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.negativeToMaxValue(long)","CLASS: com.google.common.cache.AbstractCache.SimpleStatsCounter","com.google.common.cache.AbstractCache.SimpleStatsCounter","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: AggregateFutureState<OutputT>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_INSERT","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState != null)","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // Let go of the memory held by the running state","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.runningState = null;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: wasInterrupted","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: localRunningState.interruptTask();","THEN_STATEMENT: wasInterrupted","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: releaseResources(OUTPUT_FUTURE_DONE);","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // nulls out `futures`","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: boolean wasInterrupted = wasInterrupted();","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Future<?> future:localFutures","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState == null)","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","THEN_STATEMENT: (localRunningState == null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ("futures=" + localFutures);","THEN_STATEMENT: (localFutures != null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init(RunningState)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleException(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture(ImmutableCollection<? extends ListenableFuture<? extends InputT>>,boolean,boolean)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectOneValue(int,InputT)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.addInitialException(Set<Throwable>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.log(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.decrementCountAndMaybeComplete(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectValueFromNonCancelledFuture(int,Future<? extends InputT>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.processCompleted(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.runningState : RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.allMustSucceed : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.futures : ImmutableCollection<? extends ListenableFuture<? extends InputT>>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.collectsValues : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.AggregateFuture.RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ForwardingFluentFuture.toString()","CLASS: com.google.common.util.concurrent.ForwardingFluentFuture","com.google.common.util.concurrent.ForwardingFluentFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new ListFutureRunningState(futures, allMustSucceed));","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed);","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,V)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CollectionFuture.values : List<Optional<V>>","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new AsyncCallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new AsyncCallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.CombinedFutureInterruptibleTask(Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","THEN_STATEMENT: thrownByExecute","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","BLOCK_COMMENT: /*
       * The future no longer needs to interrupt this task, so it no longer needs a reference to it.
       *
       * TODO(cpovirk): It might be nice for our InterruptibleTask subclasses to null out their
       *  `callable` fields automatically. That would make it less important for us to null out the
       * reference to `task` here (though it's still nice to do so in case our reference to the
       * executor keeps it alive). Ideally, nulling out `callable` would be the responsibility of
       * InterruptibleTask itself so that its other subclasses also benefit. (Handling `callable` in
       * InterruptibleTask itself might also eliminate some of the existing boilerplate for, e.g.,
       * pendingToString().)
       */","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: CombinedFuture.this.task = null;","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error.getCause());","THEN_STATEMENT: (error instanceof ExecutionException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error);","ELSE_STATEMENT: (error instanceof CancellationException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.CallableInterruptibleTask(Callable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new CallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new CallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setFuture(value);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.AsyncCallableInterruptibleTask(AsyncCallable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.interruptTask()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.collectOneValue(int,Object)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.task : CombinedFutureInterruptibleTask<?>","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureRunningState","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new InputStream() {
  int bitBuffer = 0;
  int bitBufferLength = 0;
  int readChars = 0;
  boolean hitPadding = false;
  public @Override int read() throws IOException {
    while (true)      {
        int readChar = reader.read();
        if ((readChar == (- 1)))
            {
              if (((! hitPadding) && (! alphabet.isValidPaddingStartPosition(readChars))))
                  {
                    throw new DecodingException(("Invalid input length " + readChars));
                  }
              return (- 1);
            }
        readChars ++;
        char ch = (char) readChar;
        if (((paddingChar != null) && (paddingChar.charValue() == ch)))
            {
              if (((! hitPadding) && ((readChars == 1) || (! alphabet.isValidPaddingStartPosition((readChars - 1))))))
                  {
                    throw new DecodingException(("Padding cannot start at index " + readChars));
                  }
              hitPadding = true;
            }
        else
            if (hitPadding)
                {
                  throw new DecodingException(((("Expected padding character but found \'" + ch) + "\' at index ") + readChars));
                }
            else
                {
                  bitBuffer <<= alphabet.bitsPerChar;
                  bitBuffer |= alphabet.decode(ch);
                  bitBufferLength += alphabet.bitsPerChar;
                  if ((bitBufferLength >= 8))
                      {
                        bitBufferLength -= 8;
                        return ((bitBuffer >> bitBufferLength) & 0xFF);
                      }
                }
      }
  }
  public @Override int read(byte[] buf, int off, int len) throws IOException {
    checkPositionIndexes(off, (off + len), buf.length);
    int i = off;
    for (; (i < (off + len)); i ++) 
      {
        int b = read();
        if ((b == (- 1)))
            {
              int read = (i - off);
              return ((read == 0) ? (- 1) : read);
            }
        buf[i] = (byte) b;
      }
    return (i - off);
  }
  public @Override void close() throws IOException {
    reader.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a single-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code float} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code float} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Floats.tryParse(String)","com.google.common.primitives.Floats.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a double-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code double} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code double} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Doubles.tryParse(String)","com.google.common.primitives.Doubles.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String)} for that version.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String)","com.google.common.primitives.Ints.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String, int)} for that version.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String,int)","com.google.common.primitives.Ints.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String)} for that version.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String)","com.google.common.primitives.Longs.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String, int)} for that version.
   *
   * @param string the string representation of an long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String,int)","com.google.common.primitives.Longs.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: String.valueOf(o);","BODY: ","com.google.common.base.Strings.lenientToString(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: "null";","THEN_STATEMENT: (o == null)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (o == null)","METHOD: com.google.common.base.Strings.lenientToString(Object)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: o.toString();","BODY: ","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.CollectionIteratorTester.testIterator_nullElement()","CLASS: com.google.common.collect.testing.testers.CollectionIteratorTester","com.google.common.collect.testing.testers.CollectionIteratorTester","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(StringLiteralConcatenation{"text/plain; something=\"cr@zy\"; something-else=\"crazy with spaces\";"+
" and-another-thing=\"\"; normal-thing=foo"+
}, MediaType.create("text", "plain").withParameter("something", "cr@zy").withParameter("something-else", "crazy with spaces").withParameter("and-another-thing", "").withParameter("normal-thing", "foo").toString());","METHOD: com.google.common.net.MediaTypeTest.testToString()","com.google.common.net.MediaTypeTest.testToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptyType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiSubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptySubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_emptyParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_ATTRIBUTE_MODIFIABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AtomicLongMapTest.random : Random","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AtomicLongMapTest.testModify_basher()","CLASS: com.google.common.util.concurrent.AtomicLongMapTest","com.google.common.util.concurrent.AtomicLongMapTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getCause()).isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decode(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected IllegalArgumentException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalArgumentException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decodeChecked(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected DecodingException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: DecodingException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: IllegalArgumentException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: DecodingException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // We use this somewhat weird pattern with an enum for each assertion we want to make as a way
    // of dealing with the fact that one of the assertions is @GwtIncompatible but we don't want to
    // have to have duplicate @GwtIncompatible test methods just to make that assertion.","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(template, args).fail();","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_extraValueDelimiter()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Optional<Number> first = (Optional<Number>) numbers.first();","METHOD: com.google.common.base.OptionalTest.testSampleCodeFine2()","com.google.common.base.OptionalTest.testSampleCodeFine2()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(onlyPresent).containsExactly(2);","METHOD: com.google.common.base.OptionalTest.testPresentInstances_wildcards()","com.google.common.base.OptionalTest.testPresentInstances_wildcards()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetRootCause_Loop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetCasualChainLoop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, SomeCheckedException.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, Exception.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedHashMultiset<?>)","com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedHashMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,UsingToStringOrdering)","com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,UsingToStringOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,HashBasedTable<?, ?, ?>)","com.google.common.collect.HashBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,HashBasedTable<?, ?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableSetMultimap)","com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableSetMultimap)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.TreeBasedTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeBasedTable<?, ?, ?>)","com.google.common.collect.TreeBasedTable_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeBasedTable<?, ?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.NaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.NaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.NaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,NaturalOrdering)","com.google.common.collect.NaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,NaturalOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,SparseImmutableTable<Object, Object, Object>)","com.google.common.collect.SparseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,SparseImmutableTable<Object, Object, Object>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultimap<?, ?>)","com.google.common.collect.HashMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultiset<?>)","com.google.common.collect.HashMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,HashMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.HashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.HashMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumMap<?, ?>)","com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumMap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumSet<?>)","com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableEnumSet<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ArrayListMultimap<?, ?>)","com.google.common.collect.ArrayListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ArrayListMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.TreeMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.TreeMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeMultimap<?, ?>)","com.google.common.collect.TreeMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,TreeMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSortedMap<?, ?>)","com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSortedMap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableListMultimap)","com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,EmptyImmutableListMultimap)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableListMultimap<?, ?>)","com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableListMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,DenseImmutableTable<Object, Object, Object>)","com.google.common.collect.DenseImmutableTable_CustomFieldSerializer.serialize(SerializationStreamWriter,DenseImmutableTable<Object, Object, Object>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.JdkBackedImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","com.google.common.collect.JdkBackedImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.JdkBackedImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.JdkBackedImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSetMultimap<?, ?>)","com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSetMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableSet<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.Range_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.Range_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.Range_CustomFieldSerializer.serialize(SerializationStreamWriter,Range<?>)","com.google.common.collect.Range_CustomFieldSerializer.serialize(SerializationStreamWriter,Range<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,ReverseNaturalOrdering)","com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,ReverseNaturalOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","com.google.common.collect.LinkedListMultimap_CustomFieldSerializer.serialize(SerializationStreamWriter,LinkedListMultimap<?, ?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,AllEqualOrdering)","com.google.common.collect.AllEqualOrdering_CustomFieldSerializer.serialize(SerializationStreamWriter,AllEqualOrdering)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.JdkBackedImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.JdkBackedImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.collect.JdkBackedImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","com.google.common.collect.JdkBackedImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.primitives.UnsignedLong_CustomFieldSerializer.serialize(SerializationStreamWriter,UnsignedLong)","com.google.common.primitives.UnsignedLong_CustomFieldSerializer.serialize(SerializationStreamWriter,UnsignedLong)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.primitives.UnsignedLong_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.primitives.UnsignedLong_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.serialize(SerializationStreamWriter,PairwiseEquivalence<?>)","com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.serialize(SerializationStreamWriter,PairwiseEquivalence<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.PairwiseEquivalence_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Present_CustomFieldSerializer.serialize(SerializationStreamWriter,Present<?>)","com.google.common.base.Present_CustomFieldSerializer.serialize(SerializationStreamWriter,Present<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Present_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.Present_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Absent_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.base.Absent_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkGwtRpcEnabled();","METHOD: com.google.common.base.Absent_CustomFieldSerializer.serialize(SerializationStreamWriter,Absent<?>)","com.google.common.base.Absent_CustomFieldSerializer.serialize(SerializationStreamWriter,Absent<?>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTest_ignoreUnderscores()","METHOD: com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTest_ignoreUnderscores()","com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTeset_ignoreUnderscores()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.CollectionIteratorTester.testIterator_nullElement()","CLASS: com.google.common.collect.testing.testers.CollectionIteratorTester","com.google.common.collect.testing.testers.CollectionIteratorTester","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) entry;","THEN_STATEMENT: (maker.getKeyStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainKeyReferenceQueueOnRead()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // TODO(b/145386688): This access should be guarded by 'segment', which is not currently
        // held","THEN_STATEMENT: (i > 1)","com.google.common.collect.MapMakerInternalMapTest.testExpand_cleanup()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) valueReference;","THEN_STATEMENT: (maker.getValueStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainValueReferenceQueueOnWrite()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) valueReference;","THEN_STATEMENT: (maker.getValueStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainValueReferenceQueueOnRead()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // TODO(b/145386688): This access should be guarded by 'segment', which is not currently
        // held","THEN_STATEMENT: (i > 1)","com.google.common.collect.MapMakerInternalMapTest.testExpand()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) entry;","THEN_STATEMENT: (maker.getKeyStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainKeyReferenceQueueOnWrite()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.entries).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.keys).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.values).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.links).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: map.remove(4);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: testHasMapEntriesInOrder(map, 1, "a", 3, "d", 2, "c");","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactHashSetTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(set.elements).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysDefault()","com.google.common.collect.CompactHashSetTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactHashMapTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.entries).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.keys).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.values).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(set.elements).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableBiMap<String, String> specialCases = ImmutableBiMap.<String, String>builder().put("CDN_LOOP", "CDN-Loop").put("ETAG", "ETag").put("SOURCE_MAP", "SourceMap").put("SEC_WEBSOCKET_ACCEPT", "Sec-WebSocket-Accept").put("SEC_WEBSOCKET_EXTENSIONS", "Sec-WebSocket-Extensions").put("SEC_WEBSOCKET_KEY", "Sec-WebSocket-Key").put("SEC_WEBSOCKET_PROTOCOL", "Sec-WebSocket-Protocol").put("SEC_WEBSOCKET_VERSION", "Sec-WebSocket-Version").put("X_WEBKIT_CSP", "X-WebKit-CSP").put("X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only").build();","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.fromInteger(0x7f000001)).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testFromInteger()","com.google.common.net.InetAddressesTest.testFromInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> ipStrings = ImmutableSet.of("7::0.128.0.127", "7::0.128.0.128", "7::128.128.0.127", "7::0.128.128.127");","METHOD: com.google.common.net.InetAddressesTest.testConvertDottedQuadToHex()","com.google.common.net.InetAddressesTest.testConvertDottedQuadToHex()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonCompatAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < validCompatAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonCompatAddress);","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validCompatAddress);","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), (ip instanceof Inet6Address));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals((("checking \'" + validCompatAddress) + "\'"), compat, InetAddresses.getCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonCompatAddresses = ImmutableSet.of("3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> validCompatAddresses = ImmutableSet.of("::1.2.3.4", "::102:304");","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonCompatAddress);","FOR_STATEMENT: (i < nonCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validCompatAddress);","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), (ip instanceof Inet6Address));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals((("checking \'" + validCompatAddress) + "\'"), compat, InetAddresses.getCompatIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonCompatAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: InetAddress localHost4 = InetAddresses.forString("127.0.0.1");","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(localHost4, InetAddresses.getCoercedIPv4Address(localHost4));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertTrue((0xe0000000 <= InetAddresses.coerceToInteger(coerced)));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertTrue((InetAddresses.coerceToInteger(coerced) <= 0xfffffffe));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("127.0.0.1"))).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(coercedInt).isAtLeast(0xe0000000);","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(coercedInt).isAtMost(0xfffffffe);","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::1"))).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::"))).isEqualTo(InetAddresses.forString("0.0.0.0"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::1.2.3.4"))).isNotEqualTo(InetAddresses.forString("1.2.3.4"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isNotEqualTo(InetAddresses.forString("1.2.3.4"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isNotEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0506:0708::1")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::2")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isNotEqualTo(InetAddresses.forString("192.0.2.45"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","LINE_COMMENT: // 2 Teredo addresses differing in their embedded IPv4 addresses should hash to different
    // values.","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isNotEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd3")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","LINE_COMMENT: // 2 Teredo addresses NOT differing in the their embedded IPv4 addresses should hash to the same
    // value.","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:5136:f378:9000:73bf:3fff:fdd2")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int coercedInt = InetAddresses.coerceToInteger(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:4860::1")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < bogusInputs.length)","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String bogusInput:bogusInputs","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String bogusInput:bogusInputs","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isInetAddress(bogusInput));","FOREACH_STATEMENT: String bogusInput:bogusInputs","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(InetAddresses.isInetAddress(bogusInput));","FOR_STATEMENT: (i < bogusInputs.length)","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: InetAddresses.forString(bogusInput);","BODY: ","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + bogusInput) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < non6to4Addresses.length)","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(non6to4Address);","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.is6to4Address((Inet6Address) ip));","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> non6to4Addresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(non6to4Address);","FOR_STATEMENT: (i < non6to4Addresses.length)","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + non6to4Address) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonTeredoAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonTeredoAddress);","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isTeredoAddress((Inet6Address) ip));","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonTeredoAddresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonTeredoAddress);","FOR_STATEMENT: (i < nonTeredoAddresses.length)","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonTeredoAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < validIsatapAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonIsatapAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validIsatapAddress);","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue(InetAddresses.isIsatapAddress((Inet6Address) ip));","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals((("checking \'" + validIsatapAddress) + "\'"), ipv4, InetAddresses.getIsatapIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonIsatapAddress);","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isIsatapAddress((Inet6Address) ip));","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> validIsatapAddresses = ImmutableSet.of("2001:db8::5efe:102:304", "2001:db8::100:5efe:102:304", "2001:db8::200:5efe:102:304", "2001:db8::300:5efe:102:304");","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonIsatapAddresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1", "2001:db8::0040:5efe:102:304", "2001:db8::5ffe:102:304", "2001:db8::5eff:102:304", "2001:0:102:203:200:5efe:506:708");","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validIsatapAddress);","FOR_STATEMENT: (i < validIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals((("checking \'" + validIsatapAddress) + "\'"), ipv4, InetAddresses.getIsatapIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonIsatapAddress);","FOR_STATEMENT: (i < nonIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonIsatapAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < eightColons.length)","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv6Addr = InetAddress.getByName(eightColons[i]);","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String ipString:eightColons","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipString);","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_MOVE","LINE_COMMENT: // Shouldn't hit DNS, because it's an IP string literal.","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals(ipv6Addr, InetAddresses.forString(ipString));","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue(InetAddresses.isInetAddress(ipString));","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> eightColons = ImmutableSet.of("::7:6:5:4:3:2:1", "::7:6:5:4:3:2:0", "7:6:5:4:3:2:1::", "0:6:5:4:3:2:1::");","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipString);","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ipv6Addr, InetAddresses.forString(ipString));","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(InetAddresses.isInetAddress(ipString));","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddresses.forString("127.0.0.1");","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.coerceToInteger(InetAddresses.forString("127.0.0.1"))).isEqualTo(0x7f000001);","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testIPv6AddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerInputTooLarge()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerThrowsLessThanZero()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.checkBigIntegerConversion(String,BigInteger)","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testDottedQuadAddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerInputTooLarge()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerValid()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testIPv4AddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerValid()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerThrowsLessThanZero()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddressesTest.SCOPE_IDS : ImmutableSet<String>","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(StringLiteralConcatenation{"text/plain; something=\"cr@zy\"; something-else=\"crazy with spaces\";"+
" and-another-thing=\"\"; normal-thing=foo"+
}, MediaType.create("text", "plain").withParameter("something", "cr@zy").withParameter("something-else", "crazy with spaces").withParameter("and-another-thing", "").withParameter("normal-thing", "foo").toString());","METHOD: com.google.common.net.MediaTypeTest.testToString()","com.google.common.net.MediaTypeTest.testToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptyType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiSubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptySubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_emptyParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(uee).hasCauseThat().isSameInstanceAs(e);","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;","THEN_STATEMENT: hasLocalCache(cache)","com.google.common.cache.CacheTesting.checkRecency(LoadingCache<Integer, Integer>,int,Receiver<ReferenceEntry<Integer, Integer>>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Unit tests for {@link LongAdder}. */","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: TestCase","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_DELETE","JAVADOC: /**
   * No-op null-pointer test for {@link LongAdder} to override the {@link PackageSanityTests}
   * version, which checks package-private methods that we don't want to have to annotate as {@code
   * Nullable} because we don't want diffs from jsr166e.
   */","METHOD: com.google.common.cache.LongAdderTest.testNulls()","com.google.common.cache.LongAdderTest.testNulls()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.LongAdderTest.testOverflows()","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheStatsTest.testPlusLarge()","CLASS: com.google.common.cache.CacheStatsTest","com.google.common.cache.CacheStatsTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries).containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries.toArray()).asList().containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries.toArray(new Object[0])).asList().containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_ATTRIBUTE_MODIFIABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AtomicLongMapTest.random : Random","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AtomicLongMapTest.testModify_basher()","CLASS: com.google.common.util.concurrent.AtomicLongMapTest","com.google.common.util.concurrent.AtomicLongMapTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final AtomicInteger stoppingCount = new AtomicInteger();","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: service.addListener(new Listener() {
  public @Override void stopping(State from) {
    stoppingCount.incrementAndGet();
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, stoppingCount.get());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, stoppingCount.get());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.stopAsync().awaitStopped(10, TimeUnit.SECONDS);","FOR_STATEMENT: (k < 1000)","com.google.common.util.concurrent.ServiceManagerTest.testTransitionRace()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStart_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStart_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStop_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStop_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ee).hasCauseThat().isSameInstanceAs(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getCause()).isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(hashFunction.newHasher().putBytes(littleEndian).hash(), hashFunction.newHasher().putBytes(bigEndian).hash());","METHOD: com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());","METHOD: com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));","METHOD: com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());","METHOD: com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // go/do-not-mock-common-types-lsc","METHOD: com.google.common.hash.FunnelsTest.testSequential()","com.google.common.hash.FunnelsTest.testSequential()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings({"unchecked", "DoNotMock"}) Funnel<Object> elementFunnel = mock(Funnel.class);","METHOD: com.google.common.hash.FunnelsTest.testSequential()","com.google.common.hash.FunnelsTest.testSequential()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is subtype of %s", paramType, returnType).that(TypeToken.of(paramType).isSubtypeOf(returnType)).isTrue();","METHOD: com.google.common.reflect.SubtypeTester.isSubtype(T)","com.google.common.reflect.SubtypeTester.isSubtype(T)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is supertype of %s", returnType, paramType).that(TypeToken.of(returnType).isSupertypeOf(paramType)).isTrue();","METHOD: com.google.common.reflect.SubtypeTester.isSubtype(T)","com.google.common.reflect.SubtypeTester.isSubtype(T)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is subtype of %s", paramType, returnType).that(TypeToken.of(paramType).isSubtypeOf(returnType)).isFalse();","METHOD: com.google.common.reflect.SubtypeTester.notSubtype(Object)","com.google.common.reflect.SubtypeTester.notSubtype(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is supertype of %s", returnType, paramType).that(TypeToken.of(returnType).isSupertypeOf(paramType)).isFalse();","METHOD: com.google.common.reflect.SubtypeTester.notSubtype(Object)","com.google.common.reflect.SubtypeTester.notSubtype(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decode(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected IllegalArgumentException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalArgumentException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decodeChecked(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected DecodingException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: DecodingException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: IllegalArgumentException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: DecodingException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // We use this somewhat weird pattern with an enum for each assertion we want to make as a way
    // of dealing with the fact that one of the assertions is @GwtIncompatible but we don't want to
    // have to have duplicate @GwtIncompatible test methods just to make that assertion.","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(network2).isSameInstanceAs(network1);","METHOD: com.google.common.graph.ImmutableNetworkTest.copyOfImmutableNetwork_optimized()","com.google.common.graph.ImmutableNetworkTest.copyOfImmutableNetwork_optimized()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph2).isSameInstanceAs(graph1);","METHOD: com.google.common.graph.ImmutableValueGraphTest.copyOfImmutableValueGraph_optimized()","com.google.common.graph.ImmutableValueGraphTest.copyOfImmutableValueGraph_optimized()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.immutableValueGraphBuilder_incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.immutableValueGraphBuilder_fromUnorderedBuilder_incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.incidentEdgeOrder_fromUnorderedGraph_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.immutableValueGraphBuilder_incidentEdges_preservesIncidentEdgesOrder()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactly(N2, N4);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E41);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(endpoints.nodeV());","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addEdge(endpoints, e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(endpoints.nodeU(), endpoints.nodeV(), e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.graph.AbstractNetworkTest.createGraph(): Network<Integer, String>","METHOD: com.google.common.graph.AbstractNetworkTest.createGraph()","com.google.common.graph.AbstractNetworkTest.createGraph()","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unused") EndpointPair<Integer> unused = networkAsMutableNetwork.incidentNodes(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.incidentNodes(E12);","BODY: ","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> edges = ImmutableSet.copyOf(networkAsMutableNetwork.edges());","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeEdge(EDGE_NOT_IN_GRAPH));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactlyElementsIn(edges);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: networkAsMutableNetwork = (MutableNetwork<Integer, String>) network;","THEN_STATEMENT: (network instanceof MutableNetwork)","com.google.common.graph.AbstractNetworkTest.init()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (network instanceof MutableNetwork)","METHOD: com.google.common.graph.AbstractNetworkTest.init()","com.google.common.graph.AbstractNetworkTest.init()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edgesConnecting(N1, N2)).isEmpty();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.addNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).contains(N1);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<Integer> nodes = ImmutableSet.copyOf(networkAsMutableNetwork.nodes());","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeNode(NODE_NOT_IN_GRAPH));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactlyElementsIn(nodes);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addNode(n);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A proxy method that adds the node {@code n} to the graph being tested. In case of Immutable
   * graph implementations, this method should replace {@link #network} with a new graph that
   * includes this node.
   */","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addNode(Integer): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(n1);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(n2);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addEdge(n1, n2, e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A proxy method that adds the edge {@code e} to the graph being tested. In case of Immutable
   * graph implementations, this method should replace {@link #network} with a new graph that
   * includes this edge.
   */","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<Integer> nodes = ImmutableSet.copyOf(networkAsMutableNetwork.nodes());","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.addNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactlyElementsIn(nodes);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactly(E12, E13, E14);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E13));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactly(E12, E14);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unused") Set<Integer> unused = networkAsMutableNetwork.adjacentNodes(N1);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.adjacentNodes(N1);","BODY: ","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.hasEdgeConnecting_disconnectedNodes()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.concurrentIteration()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.hasEdgesConnecting_nodesNotInGraph()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.graphIsMutable()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: Network<Integer, String>","FIELD: com.google.common.graph.AbstractNetworkTest.network : Network<Integer, String>","com.google.common.graph.AbstractNetworkTest.network : MutableNetwork<Integer, String>","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractNetworkTest.networkAsMutableNetwork : MutableNetwork<Integer, String>","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N2, N1, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N2, N1, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(endpoints, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(fooReference1).isNotSameInstanceAs(fooReference2);","METHOD: com.google.common.graph.MapCacheTest.testRemoveEqualKeyWithDifferentReference()","com.google.common.graph.MapCacheTest.testRemoveEqualKeyWithDifferentReference()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_SELF_LOOP);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.GraphsTest.createUndirected()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedNetwork()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedNetwork()","com.google.common.graph.GraphsTest.transpose_undirectedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedValueGraph()","com.google.common.graph.GraphsTest.transpose_undirectedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedValueGraph()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedGraph()","com.google.common.graph.GraphsTest.transpose_undirectedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_SELF_LOOP);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.GraphsTest.createDirected()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedGraph()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Tests for {@link StandardMutableValueGraph} and related functionality. */","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());","METHOD: com.google.common.graph.ValueGraphTest.validateGraphState()","com.google.common.graph.ValueGraphTest.validateGraphState()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdgeOrder_unordered()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_undirected()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.concurrentIteration()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_directed()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(endpoints, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isWithin(ALLOWED_ERROR).of((stats.populationCovariance() / (stats.xStats().populationStandardDeviation() * stats.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulator.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulator.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulatorByAddAllStats.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterable.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterator.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByRepeatedAdd.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAndAddAll.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStats.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.mean()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationVariance()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance by addAll(Stats) of " + values)).that(populationVarianceByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance by addAll(Stats) of " + values)).that(populationVarianceByAddAllStats).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sum()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_MEAN * MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleVariance()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationStandardDeviation()).isWithin(ALLOWED_ERROR).of(sqrt((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleStandardDeviation()).isWithin(ALLOWED_ERROR).of(sqrt((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: manyValuesAccumulatorByAddAllStatsAccumulator = new StatsAccumulator();","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: manyValuesAccumulatorByAddAllStatsAccumulator.addAll(statsAccumulatorOf(MANY_VALUES.subList(0, (MANY_VALUES.size() / 2))));","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: manyValuesAccumulatorByAddAllStatsAccumulator.addAll(statsAccumulatorOf(MANY_VALUES.subList((MANY_VALUES.size() / 2), MANY_VALUES.size())));","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulator.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulator.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulatorByAddAllStats.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterable.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterator.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByRepeatedAdd.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAndAddAll.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStats.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.count()).isEqualTo(MANY_VALUES_COUNT);","METHOD: com.google.common.math.StatsAccumulatorTest.testCount()","com.google.common.math.StatsAccumulatorTest.testCount()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulatorTest.statsAccumulatorOf(Iterable<? extends Number>)","CLASS: com.google.common.math.StatsAccumulatorTest","com.google.common.math.StatsAccumulatorTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.StatsAccumulatorTest.manyValuesAccumulatorByAddAllStatsAccumulator : StatsAccumulator","CLASS: com.google.common.math.StatsAccumulatorTest","com.google.common.math.StatsAccumulatorTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertLinearTransformationNaN(LinearTransformation)","com.google.common.math.StatsTesting.assertLinearTransformationNaN(LinearTransformation)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildConstantValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildLongManyValuesStatsSnapshot()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildHorizontalValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildManyValuesStatsSnapshot()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildVerticalValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildManyValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ONE_VALUE_STATS.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(TWO_VALUES_STATS.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_VARARGS.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ONE_VALUE_STATS.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(TWO_VALUES_STATS.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_VARARGS.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(INTEGER_MANY_VALUES)).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(Ints.toArray(INTEGER_MANY_VALUES))).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(LONG_MANY_VALUES)).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(Longs.toArray(LONG_MANY_VALUES))).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient by addAll(PairedStats) of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isWithin(ALLOWED_ERROR).of((accumulator.populationCovariance() / (accumulator.xStats().populationStandardDeviation() * accumulator.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient by addAll(PairedStats) of " + values)).that(pearsonsCorrelationCoefficientByAddAllPartitionedPairedStats).isWithin(ALLOWED_ERROR).of((accumulatorByAddAllPartitionedPairedStats.populationCovariance() / (accumulatorByAddAllPartitionedPairedStats.xStats().populationStandardDeviation() * accumulatorByAddAllPartitionedPairedStats.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance by addAll(PairedStats) of " + values)).that(populationCovarianceByAddAllPartitionedPairedStats).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance by addAll(PairedStats) of " + values)).that(populationCovarianceByAddAllPartitionedPairedStats).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(template, args).fail();","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_extraValueDelimiter()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Optional<Number> first = (Optional<Number>) numbers.first();","METHOD: com.google.common.base.OptionalTest.testSampleCodeFine2()","com.google.common.base.OptionalTest.testSampleCodeFine2()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(onlyPresent).containsExactly(2);","METHOD: com.google.common.base.OptionalTest.testPresentInstances_wildcards()","com.google.common.base.OptionalTest.testPresentInstances_wildcards()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetRootCause_Loop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetCasualChainLoop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, SomeCheckedException.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, Exception.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered
   */","METHOD: com.google.common.escape.UnicodeEscaper.escape(String)","com.google.common.escape.UnicodeEscaper.escape(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((k <= (Integer.MAX_VALUE / 2)), "k (%s) must be <= Integer.MAX_VALUE / 2", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: checkArgument((k >= 0), "k (%s) must be >= 0", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.buffer = (T[]) new Object[IntMath.checkedMultiply(k, 2)];","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue()} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link SortedSet}. To
   * obtain this map with the more specific generic type {@code Map<K, SortedSet<V>>}, call {@link
   * Multimaps#asMap(SortedSetMultimap)} instead. <b>However</b>, the returned map <i>itself</i> is
   * not necessarily a {@link SortedMap}: A {@code SortedSetMultimap} must expose the <i>values</i>
   * for a given key in sorted order, but it need not expose the <i>keys</i> in sorted order.
   * Individual {@code SortedSetMultimap} implementations, like those built with {@link
   * MultimapBuilder#treeKeys()}, may make additional guarantees.
   */","METHOD: com.google.common.collect.SortedSetMultimap.asMap()","com.google.common.collect.SortedSetMultimap.asMap()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Multiset<Object> multiset = (Multiset<Object>) multiset();","THEN_STATEMENT: (entryCount != 0)","com.google.common.collect.Multisets.EntrySet.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=
 * "https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description"
 * >streams library</a> in a slightly different way.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a id="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>Starting with Java 8, the core Java class libraries provide a new "Streams" library (in {@code
 * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key
 * differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency (but do render your code
 *       incompatible with Java 7 and earlier).
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */","CLASS: com.google.common.collect.FluentIterable","com.google.common.collect.FluentIterable","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","BLOCK_COMMENT: /*
     * GWT claims to support java.lang.Character's char-classification methods, but it actually only
     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this
     * seems to be documented is here:
     * https://groups.google.com/d/topic/google-web-toolkit-contributors/1UEzsryq1XI
     *
     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also
     * being allowed due to widespread practice.
     */","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isFinalPart && DIGIT_MATCHER.matches(part.charAt(0)))","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DIGIT_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.LETTER_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Protocol}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Key}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Extensions}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Accept}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Version}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.UPGRADE_INSECURE_REQUESTS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_RESOURCE_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CDN_LOOP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_OPENER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // for GWT","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument(ascii().matchesAllOf(value), "parameter values must be ASCII: %s", value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters, new Function<String, String>() {
  public @Override String apply(String value) {
    return ((TOKEN_MATCHER.matchesAllOf(value) && (! value.isEmpty())) ? value : escapeAndQuote(value));
  }
});","THEN_STATEMENT: (! parameters.isEmpty())","com.google.common.net.MediaType.computeToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((! token.isEmpty()));","METHOD: com.google.common.net.MediaType.normalizeToken(String)","com.google.common.net.MediaType.normalizeToken(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MEDIA_PRESENTATION_DESCRIPTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HEIF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.OPENSEARCH_DESCRIPTION_UTF_8 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JP2K : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.GEO_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int percentIndex = (- 1);","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: percentIndex = i;","THEN_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","BREAK_STATEMENT: ","THEN_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // everything after a '%' is ignored (it's a Scope ID): http://superuser.com/a/99753","ELSE_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (c == '.')","IF_STATEMENT: (c == '.')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (c == '.')","FOR_STATEMENT: (i < ipString.length())","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: ipString = ipString.substring(0, percentIndex);","THEN_STATEMENT: (percentIndex != (- 1))","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (percentIndex != (- 1))","THEN_STATEMENT: hasColon","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (c == ':')","ELSE_STATEMENT: (c == '.')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (c == ':')","FOR_STATEMENT: (i < ipString.length())","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (c == '%')","ELSE_STATEMENT: (c == ':')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_DELETE","JAVADOC: /** Returns {@code null} if unable to parse into a {@code byte[]}. */","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.toBigInteger(InetAddress)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromIPv4BigInteger(BigInteger)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromBigInteger(BigInteger,boolean)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromIPv6BigInteger(BigInteger)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(hitCount, missCount);","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(Math.max(0, saturatedSubtract(hitCount, other.hitCount)), Math.max(0, saturatedSubtract(missCount, other.missCount)), Math.max(0, saturatedSubtract(loadSuccessCount, other.loadSuccessCount)), Math.max(0, saturatedSubtract(loadExceptionCount, other.loadExceptionCount)), Math.max(0, saturatedSubtract(totalLoadTime, other.totalLoadTime)), Math.max(0, saturatedSubtract(evictionCount, other.evictionCount)));","METHOD: com.google.common.cache.CacheStats.minus(CacheStats)","com.google.common.cache.CacheStats.minus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(saturatedAdd(hitCount, other.hitCount), saturatedAdd(missCount, other.missCount), saturatedAdd(loadSuccessCount, other.loadSuccessCount), saturatedAdd(loadExceptionCount, other.loadExceptionCount), saturatedAdd(totalLoadTime, other.totalLoadTime), saturatedAdd(evictionCount, other.evictionCount));","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0
   */","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations, as well as those that threw exceptions.
   * This is defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(negativeToMaxValue(hitCount.sum()), negativeToMaxValue(missCount.sum()), negativeToMaxValue(loadSuccessCount.sum()), negativeToMaxValue(loadExceptionCount.sum()), negativeToMaxValue(totalLoadTime.sum()), negativeToMaxValue(evictionCount.sum()));","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.negativeToMaxValue(long)","CLASS: com.google.common.cache.AbstractCache.SimpleStatsCounter","com.google.common.cache.AbstractCache.SimpleStatsCounter","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_INSERT","JAVADOC: /** Returns the time that this entry was last written, in ns. */","METHOD: com.google.common.cache.ReferenceEntry.getWriteTime()","com.google.common.cache.ReferenceEntry.getWriteTime()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: AggregateFutureState<OutputT>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_INSERT","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState != null)","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // Let go of the memory held by the running state","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.runningState = null;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: wasInterrupted","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: localRunningState.interruptTask();","THEN_STATEMENT: wasInterrupted","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: releaseResources(OUTPUT_FUTURE_DONE);","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // nulls out `futures`","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: boolean wasInterrupted = wasInterrupted();","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Future<?> future:localFutures","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState == null)","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","THEN_STATEMENT: (localRunningState == null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ("futures=" + localFutures);","THEN_STATEMENT: (localFutures != null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init(RunningState)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleException(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture(ImmutableCollection<? extends ListenableFuture<? extends InputT>>,boolean,boolean)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectOneValue(int,InputT)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.addInitialException(Set<Throwable>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.log(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.decrementCountAndMaybeComplete(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectValueFromNonCancelledFuture(int,Future<? extends InputT>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.processCompleted(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.runningState : RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.allMustSucceed : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.futures : ImmutableCollection<? extends ListenableFuture<? extends InputT>>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.collectsValues : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.AggregateFuture.RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ForwardingFluentFuture.toString()","CLASS: com.google.common.util.concurrent.ForwardingFluentFuture","com.google.common.util.concurrent.ForwardingFluentFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new ListFutureRunningState(futures, allMustSucceed));","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed);","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,V)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CollectionFuture.values : List<Optional<V>>","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new AsyncCallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new AsyncCallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.CombinedFutureInterruptibleTask(Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","THEN_STATEMENT: thrownByExecute","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","BLOCK_COMMENT: /*
       * The future no longer needs to interrupt this task, so it no longer needs a reference to it.
       *
       * TODO(cpovirk): It might be nice for our InterruptibleTask subclasses to null out their
       *  `callable` fields automatically. That would make it less important for us to null out the
       * reference to `task` here (though it's still nice to do so in case our reference to the
       * executor keeps it alive). Ideally, nulling out `callable` would be the responsibility of
       * InterruptibleTask itself so that its other subclasses also benefit. (Handling `callable` in
       * InterruptibleTask itself might also eliminate some of the existing boilerplate for, e.g.,
       * pendingToString().)
       */","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: CombinedFuture.this.task = null;","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error.getCause());","THEN_STATEMENT: (error instanceof ExecutionException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error);","ELSE_STATEMENT: (error instanceof CancellationException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.CallableInterruptibleTask(Callable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new CallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new CallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setFuture(value);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.AsyncCallableInterruptibleTask(AsyncCallable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.interruptTask()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.collectOneValue(int,Object)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.task : CombinedFutureInterruptibleTask<?>","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureRunningState","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: Longs.constrainToRange(timeoutNanos, 0L, ((Long.MAX_VALUE / 4) * 3));","METHOD: com.google.common.util.concurrent.Monitor.toSafeNanos(long,TimeUnit)","com.google.common.util.concurrent.Monitor.toSafeNanos(long,TimeUnit)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: annotations.toArray(new Annotation[0]);","METHOD: com.google.common.reflect.Parameter.getDeclaredAnnotations()","com.google.common.reflect.Parameter.getDeclaredAnnotations()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new InputStream() {
  int bitBuffer = 0;
  int bitBufferLength = 0;
  int readChars = 0;
  boolean hitPadding = false;
  public @Override int read() throws IOException {
    while (true)      {
        int readChar = reader.read();
        if ((readChar == (- 1)))
            {
              if (((! hitPadding) && (! alphabet.isValidPaddingStartPosition(readChars))))
                  {
                    throw new DecodingException(("Invalid input length " + readChars));
                  }
              return (- 1);
            }
        readChars ++;
        char ch = (char) readChar;
        if (((paddingChar != null) && (paddingChar.charValue() == ch)))
            {
              if (((! hitPadding) && ((readChars == 1) || (! alphabet.isValidPaddingStartPosition((readChars - 1))))))
                  {
                    throw new DecodingException(("Padding cannot start at index " + readChars));
                  }
              hitPadding = true;
            }
        else
            if (hitPadding)
                {
                  throw new DecodingException(((("Expected padding character but found \'" + ch) + "\' at index ") + readChars));
                }
            else
                {
                  bitBuffer <<= alphabet.bitsPerChar;
                  bitBuffer |= alphabet.decode(ch);
                  bitBufferLength += alphabet.bitsPerChar;
                  if ((bitBufferLength >= 8))
                      {
                        bitBufferLength -= 8;
                        return ((bitBuffer >> bitBufferLength) & 0xFF);
                      }
                }
      }
  }
  public @Override int read(byte[] buf, int off, int len) throws IOException {
    checkPositionIndexes(off, (off + len), buf.length);
    int i = off;
    for (; (i < (off + len)); i ++) 
      {
        int b = read();
        if ((b == (- 1)))
            {
              int read = (i - off);
              return ((read == 0) ? (- 1) : read);
            }
        buf[i] = (byte) b;
      }
    return (i - off);
  }
  public @Override void close() throws IOException {
    reader.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.byteArrayOutputStream = byteArrayOutputStream;","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: output = new DataOutputStream(byteArrayOutputStream);","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARAMETER_RENAMING","PARAMETER: byteArrayOutputStream","PARAMETERS: ","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: byteArrayOutputStream.toByteArray();","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.toByteArray()","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.toByteArray()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputStream : ByteArrayOutputStream","FIELD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputStream : ByteArrayOutputStream","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputSteam : ByteArrayOutputStream","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkPositionIndexes(off, (off + len), b.length);","METHOD: com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","THROW_STATEMENT: new IndexOutOfBoundsException(String.format("len (%s) cannot be negative", len));","THEN_STATEMENT: (len < 0)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}
   */","METHOD: com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new ByteArrayDataOutputStream(checkNotNull(byteArrayOutputStream));","METHOD: com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARAMETER_RENAMING","PARAMETER: byteArrayOutputStream","PARAMETERS: ","com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: byte[] buf = createBuffer();","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // A buffer is allocated if skipSafely does not skip any bytes.","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: byte[] buf = null;","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // Allocate a buffer bounded by the maximum size that can be requested, for
          // example an array of BUFFER_SIZE is unnecessary when the value of remaining
          // is smaller.","THEN_STATEMENT: (buf == null)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: buf = new byte[skip];","THEN_STATEMENT: (buf == null)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (buf == null)","THEN_STATEMENT: (skipped == 0)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int skip = (int) Math.min(remaining, BUFFER_SIZE);","THEN_STATEMENT: (skipped == 0)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An {@link OutputStream} that starts buffering to a byte array, but switches to file buffering
 * once the data reaches a configurable size.
 *
 * <p>Temporary files created by this stream may live in the local filesystem until either:
 *
 * <ul>
 *   <li>{@link #reset} is called (removing the data in this stream and deleting the file), or...
 *   <li>this stream (or, more precisely, its {@link #asByteSource} view) is finalized during
 *       garbage collection, <strong>AND</strong> this stream was not constructed with {@linkplain
 *       #FileBackedOutputStream(int) the 1-arg constructor} or the {@linkplain
 *       #FileBackedOutputStream(int, boolean) 2-arg constructor} passing {@code false} in the
 *       second parameter.
 * </ul>
 *
 * <p>This class is thread-safe.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: File temp = File.createTempFile("FileBackedOutputStream", null, parentDirectory);","THEN_STATEMENT: ((file == null) && ((memory.getCount() + len) > fileThreshold))","com.google.common.io.FileBackedOutputStream.update(int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.fileThreshold = fileThreshold;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.resetOnFinalize = resetOnFinalize;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: memory = new MemoryOutput();","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: out = memory;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: resetOnFinalize","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: resetOnFinalize","IF_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: source = new ByteSource() {
  public @Override InputStream openStream() throws IOException {
    return openInputStream();
  }
  protected @Override void finalize() {
    try
      {
        reset();
      }
    catch (Throwable t)
      {
        t.printStackTrace(System.err);
      }
  }
};","THEN_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: source = new ByteSource() {
  public @Override InputStream openStream() throws IOException {
    return openInputStream();
  }
};","ELSE_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: this(fileThreshold, resetOnFinalize, null);","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   */","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean,File)","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.FileBackedOutputStream.parentDirectory : File","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractValueGraph.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    return AbstractValueGraph.this.edges();
  }
  public @Override boolean isDirected() {
    return AbstractValueGraph.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractValueGraph.this.allowsSelfLoops();
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractValueGraph.this.nodeOrder();
  }
  public @Override ElementOrder<N> incidentEdgeOrder() {
    return AbstractValueGraph.this.incidentEdgeOrder();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractValueGraph.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractValueGraph.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractValueGraph.this.successors(node);
  }
  public @Override int degree(N node) {
    return AbstractValueGraph.this.degree(node);
  }
  public @Override int inDegree(N node) {
    return AbstractValueGraph.this.inDegree(node);
  }
  public @Override int outDegree(N node) {
    return AbstractValueGraph.this.outDegree(node);
  }
};","METHOD: com.google.common.graph.AbstractValueGraph.asGraph()","com.google.common.graph.AbstractValueGraph.asGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new ElementOrder<S>(Type.SORTED, checkNotNull(comparator));","METHOD: com.google.common.graph.ElementOrder.sorted(Comparator<S>)","com.google.common.graph.ElementOrder.sorted(Comparator<S>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","SWITCH_CASE: STABLE","SWITCH_STATEMENT: type","com.google.common.graph.ElementOrder.createMap(int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ElementOrder.stable()","CLASS: com.google.common.graph.ElementOrder","com.google.common.graph.ElementOrder","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.adjacentNodes(N)","com.google.common.graph.Graph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.incidentEdgeOrder()","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the edges whose {@link #incidentNodes(Object) incident nodes} in this network include
   * {@code node}.
   *
   * <p>This is equal to the union of {@link #inEdges(Object)} and {@link #outEdges(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this network
   */","METHOD: com.google.common.graph.Network.incidentEdges(N)","com.google.common.graph.Network.incidentEdges(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this network.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this network
   */","METHOD: com.google.common.graph.Network.adjacentNodes(N)","com.google.common.graph.Network.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: (! edgesConnecting(nodeU, nodeV).isEmpty());","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: (nodes().contains(nodeU) && successors(nodeU).contains(nodeV));","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV());","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractNetwork.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    if (allowsParallelEdges())
        {
          return super.edges();
        }
    return new AbstractSet<EndpointPair<N>>() {
  public @Override Iterator<EndpointPair<N>> iterator() {
    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {
  public @Override EndpointPair<N> apply(E edge) {
    return incidentNodes(edge);
  }
});
  }
  public @Override int size() {
    return AbstractNetwork.this.edges().size();
  }
  public @SuppressWarnings("unchecked") @Override boolean contains(@NullableDecl Object obj) {
    if ((! (obj instanceof EndpointPair)))
        {
          return false;
        }
    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
    return ((isOrderingCompatible(endpointPair) && nodes().contains(endpointPair.nodeU())) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV()));
  }
};
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractNetwork.this.nodeOrder();
  }
  public @Override ElementOrder<N> incidentEdgeOrder() {
    return ElementOrder.unordered();
  }
  public @Override boolean isDirected() {
    return AbstractNetwork.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractNetwork.this.allowsSelfLoops();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractNetwork.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractNetwork.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractNetwork.this.successors(node);
  }
};","METHOD: com.google.common.graph.AbstractNetwork.asGraph()","com.google.common.graph.AbstractNetwork.asGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: StandardValueGraph<N, V>","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: (graph.isDirected() ? DirectedGraphConnections.ofImmutable(node, graph.incidentEdges(node), successorNodeToValueFn) : UndirectedGraphConnections.ofImmutable(Maps.asMap(graph.adjacentNodes(node), successorNodeToValueFn)));","METHOD: com.google.common.graph.ImmutableValueGraph.connectionsOf(ValueGraph<N, V>,N)","com.google.common.graph.ImmutableValueGraph.connectionsOf(ValueGraph<N, V>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A builder for creating {@link ImmutableValueGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableValueGraph<City, Distance> CITY_ROAD_DISTANCE_GRAPH =
   *     ValueGraphBuilder.undirected()
   *         .<City, Distance>immutable()
   *         .putEdgeValue(PARIS, BERLIN, kilometers(1060))
   *         .putEdgeValue(PARIS, BRUSSELS, kilometers(317))
   *         .putEdgeValue(BERLIN, BRUSSELS, kilometers(764))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */","CLASS: com.google.common.graph.ImmutableValueGraph.Builder","com.google.common.graph.ImmutableValueGraph.Builder","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // The incidentEdgeOrder for immutable graphs is always stable. However, we don't want to
      // modify this builder, so we make a copy instead.","METHOD: com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.mutableValueGraph = graphBuilder.copy().incidentEdgeOrder(ElementOrder.<N>stable()).build();","METHOD: com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.clear()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: cacheEntry = null;","METHOD: com.google.common.graph.MapIteratorCache.clearCache()","com.google.common.graph.MapIteratorCache.clearCache()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Entry<K, V> entry = cacheEntry;","METHOD: com.google.common.graph.MapIteratorCache.getIfCached(Object)","com.google.common.graph.MapIteratorCache.getIfCached(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.put(K,V)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractSet<K>() {
  public @Override UnmodifiableIterator<K> iterator() {
    final Iterator<Entry<K, V>> entryIterator = backingMap.entrySet().iterator();
    return new UnmodifiableIterator<K>() {
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    Entry<K, V> entry = entryIterator.next();
    cacheEntry = entry;
    return entry.getKey();
  }
};
  }
  public @Override int size() {
    return backingMap.size();
  }
  public @Override boolean contains(@NullableDecl Object key) {
    return containsKey(key);
  }
};","METHOD: com.google.common.graph.MapIteratorCache.unmodifiableKeySet()","com.google.common.graph.MapIteratorCache.unmodifiableKeySet()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.graph.MapIteratorCache.cacheEntry : Entry<K, V>","FIELD: com.google.common.graph.MapIteratorCache.cacheEntry : Entry<K, V>","com.google.common.graph.MapIteratorCache.entrySetCache : Entry<K, V>","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapIteratorCache.entrySetCache : Entry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.GraphConnections.incidentEdgeIterator(N)","CLASS: com.google.common.graph.GraphConnections","com.google.common.graph.GraphConnections","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ((graph instanceof ImmutableGraph) ? (ImmutableGraph<N>) graph : new ImmutableGraph<N>(new StandardValueGraph<N, Presence>(GraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size())));","METHOD: com.google.common.graph.ImmutableGraph.copyOf(Graph<N>)","com.google.common.graph.ImmutableGraph.copyOf(Graph<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A builder for creating {@link ImmutableGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableGraph<Country> COUNTRY_ADJACENCY_GRAPH =
   *     GraphBuilder.undirected()
   *         .<Country>immutable()
   *         .putEdge(FRANCE, GERMANY)
   *         .putEdge(FRANCE, BELGIUM)
   *         .putEdge(GERMANY, BELGIUM)
   *         .addNode(ICELAND)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */","CLASS: com.google.common.graph.ImmutableGraph.Builder","com.google.common.graph.ImmutableGraph.Builder","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // The incidentEdgeOrder for immutable graphs is always stable. However, we don't want to
      // modify this builder, so we make a copy instead.","METHOD: com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.mutableGraph = graphBuilder.copy().incidentEdgeOrder(ElementOrder.<N>stable()).build();","METHOD: com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Function<N, Presence> edgeValueFn = (Function<N, Presence>) Functions.constant(Presence.EDGE_EXISTS);","METHOD: com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: (graph.isDirected() ? DirectedGraphConnections.ofImmutable(node, graph.incidentEdges(node), edgeValueFn) : UndirectedGraphConnections.ofImmutable(Maps.asMap(graph.adjacentNodes(node), edgeValueFn)));","METHOD: com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ImmutableGraph","com.google.common.graph.ImmutableGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.adjacentNodes(N)","com.google.common.graph.ValueGraph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.BaseGraph.adjacentNodes(N)","com.google.common.graph.BaseGraph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.incidentEdges(N)","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractGraphBuilder.incidentEdgeOrder : ElementOrder<N>","CLASS: com.google.common.graph.AbstractGraphBuilder","com.google.common.graph.AbstractGraphBuilder","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(edge);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(node);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(edge);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(node);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Configurable implementation of {@link ValueGraph} that supports the options supplied by {@link
 * AbstractGraphBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link GraphConnections}.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */","CLASS: com.google.common.graph.StandardValueGraph","com.google.common.graph.StandardValueGraph","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapRetrievalCache.cacheEntry1 : CacheEntry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapRetrievalCache.cacheEntry2 : CacheEntry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty
   */","METHOD: com.google.common.math.Stats.mean()","com.google.common.math.Stats.mean()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value >= 1.0)","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value <= (- 1.0))","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: value;","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: 1.0;","THEN_STATEMENT: (value >= 1.0)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: (- 1.0);","THEN_STATEMENT: (value <= (- 1.0))","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: Doubles.constrainToRange(value, (- 1.0), 1.0);","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value > 0.0)","METHOD: com.google.common.math.DoubleUtils.ensureNonNegative(double)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (value > 0.0)","IF_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: value;","THEN_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: 0.0;","ELSE_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: Math.max(value, 0.0);","METHOD: com.google.common.math.DoubleUtils.ensureNonNegative(double)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (count == 0)","METHOD: com.google.common.math.StatsAccumulator.addAll(Stats)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (count == 0)","IF_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: count = values.count();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean = values.mean();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas = values.sumOfSquaresOfDeltas();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: min = values.min();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: max = values.max();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: count += values.count();","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: min = Math.min(min, values.min());","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: max = Math.max(max, values.max());","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","IF_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // This is a generalized version of the calculation in add(double) above.","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double delta = (values.mean() - mean);","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean += ((delta * values.count()) / count);","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas += (values.sumOfSquaresOfDeltas() + ((delta * (values.mean() - mean)) * values.count()));","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean = calculateNewMeanNonFinite(mean, values.mean());","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas = NaN;","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: merge(values.count(), values.mean(), values.sumOfSquaresOfDeltas(), values.min(), values.max());","METHOD: com.google.common.math.StatsAccumulator.addAll(Stats)","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulator.merge(long,double,double,double,double)","CLASS: com.google.common.math.StatsAccumulator","com.google.common.math.StatsAccumulator","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulator.addAll(StatsAccumulator)","CLASS: com.google.common.math.StatsAccumulator","com.google.common.math.StatsAccumulator","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a single-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code float} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code float} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Floats.tryParse(String)","com.google.common.primitives.Floats.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a double-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code double} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code double} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Doubles.tryParse(String)","com.google.common.primitives.Doubles.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String)} for that version.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String)","com.google.common.primitives.Ints.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String, int)} for that version.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String,int)","com.google.common.primitives.Ints.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the least value present in {@code array}, treating values as unsigned.
   *
   * @param array a <i>nonempty</i> array of {@code byte} values
   * @return the value present in {@code array} that is less than or equal to every other value in
   *     the array according to {@link #compare}
   * @throws IllegalArgumentException if {@code array} is empty
   */","METHOD: com.google.common.primitives.UnsignedBytes.min(byte...)","com.google.common.primitives.UnsignedBytes.min(byte...)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the greatest value present in {@code array}, treating values as unsigned.
   *
   * @param array a <i>nonempty</i> array of {@code byte} values
   * @return the value present in {@code array} that is greater than or equal to every other value
   *     in the array according to {@link #compare}
   * @throws IllegalArgumentException if {@code array} is empty
   */","METHOD: com.google.common.primitives.UnsignedBytes.max(byte...)","com.google.common.primitives.UnsignedBytes.max(byte...)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String)} for that version.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String)","com.google.common.primitives.Longs.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String, int)} for that version.
   *
   * @param string the string representation of an long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String,int)","com.google.common.primitives.Longs.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: String.valueOf(o);","BODY: ","com.google.common.base.Strings.lenientToString(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: "null";","THEN_STATEMENT: (o == null)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (o == null)","METHOD: com.google.common.base.Strings.lenientToString(Object)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: o.toString();","BODY: ","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTest_ignoreUnderscores()","METHOD: com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTest_ignoreUnderscores()","com.google.common.testing.AbstractPackageSanityTestsTest.testFindClassesToTeset_ignoreUnderscores()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.CollectionIteratorTester.testIterator_nullElement()","CLASS: com.google.common.collect.testing.testers.CollectionIteratorTester","com.google.common.collect.testing.testers.CollectionIteratorTester","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSetTest.testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements()","CLASS: com.google.common.collect.ImmutableSetTest","com.google.common.collect.ImmutableSetTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) entry;","THEN_STATEMENT: (maker.getKeyStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainKeyReferenceQueueOnRead()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // TODO(b/145386688): This access should be guarded by 'segment', which is not currently
        // held","THEN_STATEMENT: (i > 1)","com.google.common.collect.MapMakerInternalMapTest.testExpand_cleanup()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) valueReference;","THEN_STATEMENT: (maker.getValueStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainValueReferenceQueueOnWrite()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) valueReference;","THEN_STATEMENT: (maker.getValueStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainValueReferenceQueueOnRead()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // TODO(b/145386688): This access should be guarded by 'segment', which is not currently
        // held","THEN_STATEMENT: (i > 1)","com.google.common.collect.MapMakerInternalMapTest.testExpand()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Reference<Object> reference = (Reference<Object>) entry;","THEN_STATEMENT: (maker.getKeyStrength() == Strength.WEAK)","com.google.common.collect.MapMakerInternalMapTest.testDrainKeyReferenceQueueOnWrite()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.entries).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.keys).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.values).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.links).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: map.remove(4);","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: testHasMapEntriesInOrder(map, 1, "a", 3, "d", 2, "c");","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","com.google.common.collect.CompactLinkedHashMapTest.testInsertionOrderAfterRemoveMiddleEntry()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactHashSetTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(set.elements).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysDefault()","com.google.common.collect.CompactHashSetTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactHashMapTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.entries).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.keys).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(map.values).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i <= CompactHashing.DEFAULT_SIZE)","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysExpectedSize()","com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysExpectedSize()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(set.elements).hasLength(CompactHashing.DEFAULT_SIZE);","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysDefault()","com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysDefault()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableBiMap<String, String> specialCases = ImmutableBiMap.<String, String>builder().put("CDN_LOOP", "CDN-Loop").put("ETAG", "ETag").put("SOURCE_MAP", "SourceMap").put("SEC_WEBSOCKET_ACCEPT", "Sec-WebSocket-Accept").put("SEC_WEBSOCKET_EXTENSIONS", "Sec-WebSocket-Extensions").put("SEC_WEBSOCKET_KEY", "Sec-WebSocket-Key").put("SEC_WEBSOCKET_PROTOCOL", "Sec-WebSocket-Protocol").put("SEC_WEBSOCKET_VERSION", "Sec-WebSocket-Version").put("X_WEBKIT_CSP", "X-WebKit-CSP").put("X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only").build();","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.fromInteger(0x7f000001)).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testFromInteger()","com.google.common.net.InetAddressesTest.testFromInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> ipStrings = ImmutableSet.of("7::0.128.0.127", "7::0.128.0.128", "7::128.128.0.127", "7::0.128.128.127");","METHOD: com.google.common.net.InetAddressesTest.testConvertDottedQuadToHex()","com.google.common.net.InetAddressesTest.testConvertDottedQuadToHex()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonCompatAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < validCompatAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonCompatAddress);","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonCompatAddress:nonCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validCompatAddress);","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), (ip instanceof Inet6Address));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals((("checking \'" + validCompatAddress) + "\'"), compat, InetAddresses.getCompatIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validCompatAddress:validCompatAddresses","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonCompatAddresses = ImmutableSet.of("3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> validCompatAddresses = ImmutableSet.of("::1.2.3.4", "::102:304");","METHOD: com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonCompatAddress);","FOR_STATEMENT: (i < nonCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validCompatAddress);","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), (ip instanceof Inet6Address));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue((("checking \'" + validCompatAddress) + "\'"), InetAddresses.isCompatIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals((("checking \'" + validCompatAddress) + "\'"), compat, InetAddresses.getCompatIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validCompatAddresses.length)","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonCompatAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testCompatIPv4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: InetAddress localHost4 = InetAddresses.forString("127.0.0.1");","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(localHost4, InetAddresses.getCoercedIPv4Address(localHost4));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertTrue((0xe0000000 <= InetAddresses.coerceToInteger(coerced)));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertTrue((InetAddresses.coerceToInteger(coerced) <= 0xfffffffe));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("127.0.0.1"))).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(coercedInt).isAtLeast(0xe0000000);","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(coercedInt).isAtMost(0xfffffffe);","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::1"))).isEqualTo(InetAddresses.forString("127.0.0.1"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::"))).isEqualTo(InetAddresses.forString("0.0.0.0"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("::1.2.3.4"))).isNotEqualTo(InetAddresses.forString("1.2.3.4"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isNotEqualTo(InetAddresses.forString("1.2.3.4"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isNotEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0506:0708::1")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::1"))).isEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2002:0102:0304::2")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isNotEqualTo(InetAddresses.forString("192.0.2.45"));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","LINE_COMMENT: // 2 Teredo addresses differing in their embedded IPv4 addresses should hash to different
    // values.","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isNotEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd3")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","LINE_COMMENT: // 2 Teredo addresses NOT differing in the their embedded IPv4 addresses should hash to the same
    // value.","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd2"))).isEqualTo(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:0000:5136:f378:9000:73bf:3fff:fdd2")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int coercedInt = InetAddresses.coerceToInteger(InetAddresses.getCoercedIPv4Address(InetAddresses.forString("2001:4860::1")));","METHOD: com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","com.google.common.net.InetAddressesTest.testGetCoercedIPv4Address()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < bogusInputs.length)","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String bogusInput:bogusInputs","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String bogusInput:bogusInputs","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isInetAddress(bogusInput));","FOREACH_STATEMENT: String bogusInput:bogusInputs","com.google.common.net.InetAddressesTest.testForStringBogusInput()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> bogusInputs = ImmutableSet.of("", "016.016.016.016", "016.016.016", "016.016", "016", "000.000.000.000", "000", "0x0a.0x0a.0x0a.0x0a", "0x0a.0x0a.0x0a", "0x0a.0x0a", "0x0a", "42.42.42.42.42", "42.42.42", "42.42", "42", "42..42.42", "42..42.42.42", "42.42.42.42.", "42.42.42.42...", ".42.42.42.42", "...42.42.42.42", "42.42.42.-0", "42.42.42.+0", ".", "...", "bogus", "bogus.com", "192.168.0.1.com", "12345.67899.-54321.-98765", "257.0.0.0", "42.42.42.-42", "3ffe::1.net", "3ffe::1::1", "1::2::3::4:5", "::7:6:5:4:3:2:", ":6:5:4:3:2:1::", "2001::db:::1", "FEDC:9878", "+1.+2.+3.4", "1.2.3.4e0", "::7:6:5:4:3:2:1:0", "7:6:5:4:3:2:1:0::", "9:8:7:6:5:4:3::2:1", "0:1:2:3::4:5:6:7", "3ffe:0:0:0:0:0:0:0:1", "3ffe::10000", "3ffe::goog", "3ffe::-0", "3ffe::+0", "3ffe::-1", ":", ":::", "::1.2.3", "::1.2.3.4.5", "::1.2.3.4:", "1.2.3.4::", "2001:db8::1:", ":2001:db8::1", ":1:2:3:4:5:6:7", "1:2:3:4:5:6:7:", ":1:2:3:4:5:6:");","METHOD: com.google.common.net.InetAddressesTest.testForStringBogusInput()","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(InetAddresses.isInetAddress(bogusInput));","FOR_STATEMENT: (i < bogusInputs.length)","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: InetAddresses.forString(bogusInput);","BODY: ","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + bogusInput) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testForStringBogusInput()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6Input()","com.google.common.net.InetAddressesTest.testForStringIPv6Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < non6to4Addresses.length)","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(non6to4Address);","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.is6to4Address((Inet6Address) ip));","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String non6to4Address:non6to4Addresses","com.google.common.net.InetAddressesTest.test6to4Addresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> non6to4Addresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.test6to4Addresses()","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(non6to4Address);","FOR_STATEMENT: (i < non6to4Addresses.length)","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + non6to4Address) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.test6to4Addresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonTeredoAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonTeredoAddress);","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isTeredoAddress((Inet6Address) ip));","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonTeredoAddress:nonTeredoAddresses","com.google.common.net.InetAddressesTest.testTeredoAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonTeredoAddresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1");","METHOD: com.google.common.net.InetAddressesTest.testTeredoAddresses()","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonTeredoAddress);","FOR_STATEMENT: (i < nonTeredoAddresses.length)","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonTeredoAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testTeredoAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddress.getByName(ipStr);","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv4Input()","com.google.common.net.InetAddressesTest.testForStringIPv4Input()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < validIsatapAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < nonIsatapAddresses.length)","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validIsatapAddress);","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue(InetAddresses.isIsatapAddress((Inet6Address) ip));","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals((("checking \'" + validIsatapAddress) + "\'"), ipv4, InetAddresses.getIsatapIPv4Address((Inet6Address) ip));","FOREACH_STATEMENT: String validIsatapAddress:validIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonIsatapAddress);","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertFalse(InetAddresses.isIsatapAddress((Inet6Address) ip));","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","FOREACH_STATEMENT: String nonIsatapAddress:nonIsatapAddresses","com.google.common.net.InetAddressesTest.testIsatapAddresses()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> validIsatapAddresses = ImmutableSet.of("2001:db8::5efe:102:304", "2001:db8::100:5efe:102:304", "2001:db8::200:5efe:102:304", "2001:db8::300:5efe:102:304");","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> nonIsatapAddresses = ImmutableSet.of("::1.2.3.4", "3ffe::1", "::", "::1", "2001:db8::0040:5efe:102:304", "2001:db8::5ffe:102:304", "2001:db8::5eff:102:304", "2001:0:102:203:200:5efe:506:708");","METHOD: com.google.common.net.InetAddressesTest.testIsatapAddresses()","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(validIsatapAddress);","FOR_STATEMENT: (i < validIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals((("checking \'" + validIsatapAddress) + "\'"), ipv4, InetAddresses.getIsatapIPv4Address((Inet6Address) ip));","FOR_STATEMENT: (i < validIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ip = InetAddresses.forString(nonIsatapAddress);","FOR_STATEMENT: (i < nonIsatapAddresses.length)","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: fail((("IllegalArgumentException expected for \'" + nonIsatapAddress) + "\'"));","BODY: ","com.google.common.net.InetAddressesTest.testIsatapAddresses()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","FOR_STATEMENT: (i < eightColons.length)","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: ipv6Addr = InetAddress.getByName(eightColons[i]);","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: String ipString:eightColons","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipString);","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_MOVE","LINE_COMMENT: // Shouldn't hit DNS, because it's an IP string literal.","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertEquals(ipv6Addr, InetAddresses.forString(ipString));","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertTrue(InetAddresses.isInetAddress(ipString));","FOREACH_STATEMENT: String ipString:eightColons","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> eightColons = ImmutableSet.of("::7:6:5:4:3:2:1", "::7:6:5:4:3:2:0", "7:6:5:4:3:2:1::", "0:6:5:4:3:2:1::");","METHOD: com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv6Addr = InetAddress.getByName(ipString);","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ipv6Addr, InetAddresses.forString(ipString));","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(InetAddresses.isInetAddress(ipString));","FOR_STATEMENT: (i < eightColons.length)","com.google.common.net.InetAddressesTest.testForStringIPv6EightColons()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"METHOD_RENAMING","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: InetAddress ipv4Addr = InetAddresses.forString("127.0.0.1");","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(InetAddresses.coerceToInteger(InetAddresses.forString("127.0.0.1"))).isEqualTo(0x7f000001);","METHOD: com.google.common.net.InetAddressesTest.testCoerceToInteger()","com.google.common.net.InetAddressesTest.testToInteger()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testIPv6AddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerInputTooLarge()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerThrowsLessThanZero()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.checkBigIntegerConversion(String,BigInteger)","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testDottedQuadAddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerInputTooLarge()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerValid()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testIPv4AddressWithScopeId()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv4BigIntegerValid()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddressesTest.testFromIpv6BigIntegerThrowsLessThanZero()","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddressesTest.SCOPE_IDS : ImmutableSet<String>","CLASS: com.google.common.net.InetAddressesTest","com.google.common.net.InetAddressesTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(StringLiteralConcatenation{"text/plain; something=\"cr@zy\"; something-else=\"crazy with spaces\";"+
" and-another-thing=\"\"; normal-thing=foo"+
}, MediaType.create("text", "plain").withParameter("something", "cr@zy").withParameter("something-else", "crazy with spaces").withParameter("and-another-thing", "").withParameter("normal-thing", "foo").toString());","METHOD: com.google.common.net.MediaTypeTest.testToString()","com.google.common.net.MediaTypeTest.testToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptyType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiSubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameters_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_emptySubtype()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParameter_emptyParameter()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testCreate_nonAsciiType()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nonAsciiParameterValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(uee).hasCauseThat().isSameInstanceAs(e);","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") ReferenceEntry<Integer, Integer> entry = (ReferenceEntry<Integer, Integer>) originalHead;","THEN_STATEMENT: hasLocalCache(cache)","com.google.common.cache.CacheTesting.checkRecency(LoadingCache<Integer, Integer>,int,Receiver<ReferenceEntry<Integer, Integer>>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Unit tests for {@link LongAdder}. */","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: TestCase","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_DELETE","JAVADOC: /**
   * No-op null-pointer test for {@link LongAdder} to override the {@link PackageSanityTests}
   * version, which checks package-private methods that we don't want to have to annotate as {@code
   * Nullable} because we don't want diffs from jsr166e.
   */","METHOD: com.google.common.cache.LongAdderTest.testNulls()","com.google.common.cache.LongAdderTest.testNulls()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.LongAdderTest.testOverflows()","CLASS: com.google.common.cache.LongAdderTest","com.google.common.cache.LongAdderTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheStatsTest.testPlusLarge()","CLASS: com.google.common.cache.CacheStatsTest","com.google.common.cache.CacheStatsTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries).containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries.toArray()).asList().containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(entries.toArray(new Object[0])).asList().containsExactlyElementsIn(expected);","FOREACH_STATEMENT: LoadingCache<Object, Object> cache:caches()","com.google.common.cache.PopulatedCachesTest.testEntrySet_populated()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(FluentFuture.from(f)).isSameInstanceAs(f);","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_ATTRIBUTE_MODIFIABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AtomicLongMapTest.random : Random","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AtomicLongMapTest.testModify_basher()","CLASS: com.google.common.util.concurrent.AtomicLongMapTest","com.google.common.util.concurrent.AtomicLongMapTest","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final AtomicInteger stoppingCount = new AtomicInteger();","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: service.addListener(new Listener() {
  public @Override void stopping(State from) {
    stoppingCount.incrementAndGet();
  }
}, directExecutor());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, stoppingCount.get());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, stoppingCount.get());","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceStopMultipleTimesWhileStarting()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: manager.stopAsync().awaitStopped(10, TimeUnit.SECONDS);","FOR_STATEMENT: (k < 1000)","com.google.common.util.concurrent.ServiceManagerTest.testTransitionRace()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStart_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStart_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStop_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStop_failed()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ee).hasCauseThat().isSameInstanceAs(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e.getCause()).isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameInstanceAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(hashFunction.newHasher().putBytes(littleEndian).hash(), hashFunction.newHasher().putBytes(bigEndian).hash());","METHOD: com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());","METHOD: com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHasherByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));","METHOD: com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());","METHOD: com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","com.google.common.hash.HashTestUtils.assertHashByteBufferPreservesByteOrder(HashFunction)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // go/do-not-mock-common-types-lsc","METHOD: com.google.common.hash.FunnelsTest.testSequential()","com.google.common.hash.FunnelsTest.testSequential()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings({"unchecked", "DoNotMock"}) Funnel<Object> elementFunnel = mock(Funnel.class);","METHOD: com.google.common.hash.FunnelsTest.testSequential()","com.google.common.hash.FunnelsTest.testSequential()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is subtype of %s", paramType, returnType).that(TypeToken.of(paramType).isSubtypeOf(returnType)).isTrue();","METHOD: com.google.common.reflect.SubtypeTester.isSubtype(T)","com.google.common.reflect.SubtypeTester.isSubtype(T)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is supertype of %s", returnType, paramType).that(TypeToken.of(returnType).isSupertypeOf(paramType)).isTrue();","METHOD: com.google.common.reflect.SubtypeTester.isSubtype(T)","com.google.common.reflect.SubtypeTester.isSubtype(T)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is subtype of %s", paramType, returnType).that(TypeToken.of(paramType).isSubtypeOf(returnType)).isFalse();","METHOD: com.google.common.reflect.SubtypeTester.notSubtype(Object)","com.google.common.reflect.SubtypeTester.notSubtype(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage("%s is supertype of %s", returnType, paramType).that(TypeToken.of(returnType).isSupertypeOf(paramType)).isFalse();","METHOD: com.google.common.reflect.SubtypeTester.notSubtype(Object)","com.google.common.reflect.SubtypeTester.notSubtype(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","TRY_STATEMENT: ","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decode(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected IllegalArgumentException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalArgumentException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: encoding.decodeChecked(cannotDecode);","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: fail("Expected DecodingException");","BODY: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CATCH_CLAUSE: DecodingException","CATCH_CLAUSES: ","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: IllegalArgumentException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (expectedMessage != null)","CATCH_CLAUSE: DecodingException","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // We use this somewhat weird pattern with an enum for each assertion we want to make as a way
    // of dealing with the fact that one of the assertions is @GwtIncompatible but we don't want to
    // have to have duplicate @GwtIncompatible test methods just to make that assertion.","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","FOREACH_STATEMENT: AssertFailsToDecodeStrategy strategy:AssertFailsToDecodeStrategy.values()","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: strategy.assertFailsToDecode(encoding, cannotDecode, expectedMessage);","METHOD: com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(network2).isSameInstanceAs(network1);","METHOD: com.google.common.graph.ImmutableNetworkTest.copyOfImmutableNetwork_optimized()","com.google.common.graph.ImmutableNetworkTest.copyOfImmutableNetwork_optimized()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(graph2).isSameInstanceAs(graph1);","METHOD: com.google.common.graph.ImmutableValueGraphTest.copyOfImmutableValueGraph_optimized()","com.google.common.graph.ImmutableValueGraphTest.copyOfImmutableValueGraph_optimized()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.immutableValueGraphBuilder_incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.immutableValueGraphBuilder_fromUnorderedBuilder_incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.incidentEdgeOrder_fromUnorderedGraph_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraphTest.immutableValueGraphBuilder_incidentEdges_preservesIncidentEdgesOrder()","CLASS: com.google.common.graph.ImmutableValueGraphTest","com.google.common.graph.ImmutableValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactly(N2, N4);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E41);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","com.google.common.graph.AbstractNetworkTest.removeNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(endpoints.nodeV());","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addEdge(endpoints, e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: addEdge(endpoints.nodeU(), endpoints.nodeV(), e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.graph.AbstractNetworkTest.createGraph(): Network<Integer, String>","METHOD: com.google.common.graph.AbstractNetworkTest.createGraph()","com.google.common.graph.AbstractNetworkTest.createGraph()","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unused") EndpointPair<Integer> unused = networkAsMutableNetwork.incidentNodes(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.incidentNodes(E12);","BODY: ","com.google.common.graph.AbstractNetworkTest.removeEdge_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> edges = ImmutableSet.copyOf(networkAsMutableNetwork.edges());","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeEdge(EDGE_NOT_IN_GRAPH));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactlyElementsIn(edges);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeEdge_edgeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: networkAsMutableNetwork = (MutableNetwork<Integer, String>) network;","THEN_STATEMENT: (network instanceof MutableNetwork)","com.google.common.graph.AbstractNetworkTest.init()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (network instanceof MutableNetwork)","METHOD: com.google.common.graph.AbstractNetworkTest.init()","com.google.common.graph.AbstractNetworkTest.init()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeEdge(E12));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edgesConnecting(N1, N2)).isEmpty();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","com.google.common.graph.AbstractNetworkTest.removeEdge_existingEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.addNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).contains(N1);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_newNode()","com.google.common.graph.AbstractNetworkTest.addNode_newNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<Integer> nodes = ImmutableSet.copyOf(networkAsMutableNetwork.nodes());","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.removeNode(NODE_NOT_IN_GRAPH));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactlyElementsIn(nodes);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","com.google.common.graph.AbstractNetworkTest.removeNode_nodeNotPresent()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addNode(n);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A proxy method that adds the node {@code n} to the graph being tested. In case of Immutable
   * graph implementations, this method should replace {@link #network} with a new graph that
   * includes this node.
   */","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addNode(Integer): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addNode(Integer)","com.google.common.graph.AbstractNetworkTest.addNode(Integer)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(n1);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: network.addNode(n2);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: network.addEdge(n1, n2, e);","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A proxy method that adds the edge {@code e} to the graph being tested. In case of Immutable
   * graph implementations, this method should replace {@link #network} with a new graph that
   * includes this edge.
   */","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"RETURN_TYPE_INSERT","SINGLE_TYPE: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String): boolean","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","com.google.common.graph.AbstractNetworkTest.addEdge(Integer,Integer,String)","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<Integer> nodes = ImmutableSet.copyOf(networkAsMutableNetwork.nodes());","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFalse(networkAsMutableNetwork.addNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.nodes()).containsExactlyElementsIn(nodes);","METHOD: com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","com.google.common.graph.AbstractNetworkTest.addNode_existingNode()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactly(E12, E13, E14);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeEdge(E13));","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.edges()).containsExactly(E12, E14);","METHOD: com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","com.google.common.graph.AbstractNetworkTest.removeEdge_oneOfMany()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unused") Set<Integer> unused = networkAsMutableNetwork.adjacentNodes(N1);","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertTrue(networkAsMutableNetwork.removeNode(N1));","METHOD: com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.adjacentNodes(N1);","BODY: ","com.google.common.graph.AbstractNetworkTest.removeNode_queryAfterRemoval()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.hasEdgeConnecting_disconnectedNodes()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.concurrentIteration()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.hasEdgesConnecting_nodesNotInGraph()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.graphIsMutable()","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: Network<Integer, String>","FIELD: com.google.common.graph.AbstractNetworkTest.network : Network<Integer, String>","com.google.common.graph.AbstractNetworkTest.network : MutableNetwork<Integer, String>","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractNetworkTest.networkAsMutableNetwork : MutableNetwork<Integer, String>","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N2, N1, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N2, N1, E12)).isFalse();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(endpoints, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(fooReference1).isNotSameInstanceAs(fooReference2);","METHOD: com.google.common.graph.MapCacheTest.testRemoveEqualKeyWithDifferentReference()","com.google.common.graph.MapCacheTest.testRemoveEqualKeyWithDifferentReference()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_SELF_LOOP);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.GraphsTest.createUndirected()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedNetwork()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedNetwork()","com.google.common.graph.GraphsTest.transpose_undirectedNetwork()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedValueGraph()","com.google.common.graph.GraphsTest.transpose_undirectedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedValueGraph()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedValueGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(undirectedGraph)).isSameInstanceAs(undirectedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_undirectedGraph()","com.google.common.graph.GraphsTest.transpose_undirectedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_SELF_LOOP);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.GraphsTest.createDirected()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transpose(transpose)).isSameInstanceAs(directedGraph);","METHOD: com.google.common.graph.GraphsTest.transpose_directedGraph()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.inDegree(node)).isSameInstanceAs(transpose.outDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(directedGraph.outDegree(node)).isSameInstanceAs(transpose.inDegree(node));","FOREACH_STATEMENT: Integer node:directedGraph.nodes()","com.google.common.graph.GraphsTest.transpose_directedGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /** Tests for {@link StandardMutableValueGraph} and related functionality. */","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(graph.incidentEdgeOrder()).isEqualTo(asGraph.incidentEdgeOrder());","METHOD: com.google.common.graph.ValueGraphTest.validateGraphState()","com.google.common.graph.ValueGraphTest.validateGraphState()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdgeOrder_unordered()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_undirected()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdgeOrder_stable()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.concurrentIteration()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.incidentEdges_stableIncidentEdgeOrder_preservesIncidentEdgesOrder_directed()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N4, N5, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(N1, N2, EDGE_NOT_IN_GRAPH);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(networkAsMutableNetwork.addEdge(N1, N2, E12)).isFalse();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assume().that(graphIsMutable()).isTrue();","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: networkAsMutableNetwork.addEdge(endpoints, E12);","BODY: ","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isWithin(ALLOWED_ERROR).of((stats.populationCovariance() / (stats.xStats().populationStandardDeviation() * stats.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulator.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulatorByAddAllEmptyStats.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulator.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulatorByAddAllStats.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterable.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterator.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByRepeatedAdd.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAndAddAll.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStats.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsAccumulatorTest.testMax()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max by addAll(Stats) of " + values)).that(maxByAddAllStats).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.mean()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMean()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean by addAll(Stats) of " + values)).that(meanByAddAllStats).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationVariance()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance by addAll(Stats) of " + values)).that(populationVarianceByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance by addAll(Stats) of " + values)).that(populationVarianceByAddAllStats).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsAccumulatorTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sum()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_MEAN * MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsAccumulatorTest.testSum()","com.google.common.math.StatsAccumulatorTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleVariance()).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleVariance()","com.google.common.math.StatsAccumulatorTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.populationStandardDeviation()).isWithin(ALLOWED_ERROR).of(sqrt((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.sampleStandardDeviation()).isWithin(ALLOWED_ERROR).of(sqrt((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","com.google.common.math.StatsAccumulatorTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: manyValuesAccumulatorByAddAllStatsAccumulator = new StatsAccumulator();","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: manyValuesAccumulatorByAddAllStatsAccumulator.addAll(statsAccumulatorOf(MANY_VALUES.subList(0, (MANY_VALUES.size() / 2))));","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: manyValuesAccumulatorByAddAllStatsAccumulator.addAll(statsAccumulatorOf(MANY_VALUES.subList((MANY_VALUES.size() / 2), MANY_VALUES.size())));","METHOD: com.google.common.math.StatsAccumulatorTest.setUp()","com.google.common.math.StatsAccumulatorTest.setUp()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulator.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(oneValueAccumulatorByAddAllEmptyStats.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulator.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(twoValuesAccumulatorByAddAllStats.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterable.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllIterator.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByRepeatedAdd.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAndAddAll.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStats.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(integerManyValuesAccumulatorByAddAllIterable.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllIterator.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(longManyValuesAccumulatorByAddAllVarargs.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsAccumulatorTest.testMin()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min by addAll(Stats) of " + values)).that(minByAddAllStats).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsAccumulatorTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(manyValuesAccumulatorByAddAllStatsAccumulator.count()).isEqualTo(MANY_VALUES_COUNT);","METHOD: com.google.common.math.StatsAccumulatorTest.testCount()","com.google.common.math.StatsAccumulatorTest.testCount()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulatorTest.statsAccumulatorOf(Iterable<? extends Number>)","CLASS: com.google.common.math.StatsAccumulatorTest","com.google.common.math.StatsAccumulatorTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.math.StatsAccumulatorTest.manyValuesAccumulatorByAddAllStatsAccumulator : StatsAccumulator","CLASS: com.google.common.math.StatsAccumulatorTest","com.google.common.math.StatsAccumulatorTest","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertLinearTransformationNaN(LinearTransformation)","com.google.common.math.StatsTesting.assertLinearTransformationNaN(LinearTransformation)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","com.google.common.math.StatsTesting.assertDiagonalLinearTransformation(LinearTransformation,double,double,double,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertVerticalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse()).isSameInstanceAs(transformation.inverse());","METHOD: com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(transformation.inverse().inverse()).isSameInstanceAs(transformation);","METHOD: com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","com.google.common.math.StatsTesting.assertHorizontalLinearTransformation(LinearTransformation,double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildConstantValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildLongManyValuesStatsSnapshot()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildHorizontalValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildManyValuesStatsSnapshot()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildVerticalValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsTesting.buildManyValuesPairedStats()","CLASS: com.google.common.math.StatsTesting","com.google.common.math.StatsTesting","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sampleStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1))));","METHOD: com.google.common.math.StatsTest.testSampleStandardDeviation()","com.google.common.math.StatsTest.testSampleStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ONE_VALUE_STATS.max()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(TWO_VALUES_STATS.max()).isEqualTo(TWO_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_VARARGS.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max()).isEqualTo(INTEGER_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max()).isEqualTo(LONG_MANY_VALUES_MAX);","METHOD: com.google.common.math.StatsTest.testMax()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("max of " + values)).that(max).isEqualTo(MANY_VALUES_MAX);","ELSE_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMax()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.mean()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.mean()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMean()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMean()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.populationVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.populationVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testPopulationVariance()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population variance of " + values)).that(populationVariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.StatsTest.testPopulationVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ONE_VALUE_STATS.min()).isEqualTo(ONE_VALUE);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(TWO_VALUES_STATS.min()).isEqualTo(TWO_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_VARARGS.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.min()).isEqualTo(INTEGER_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.min()).isEqualTo(LONG_MANY_VALUES_MIN);","METHOD: com.google.common.math.StatsTest.testMin()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("min of " + values)).that(min).isEqualTo(MANY_VALUES_MIN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMin()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sum()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of((INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sum()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of((LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT));","METHOD: com.google.common.math.StatsTest.testSum()","com.google.common.math.StatsTest.testSum()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sampleVariance()).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (INTEGER_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sampleVariance()).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS)).of((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / (LONG_MANY_VALUES_COUNT - 1)));","METHOD: com.google.common.math.StatsTest.testSampleVariance()","com.google.common.math.StatsTest.testSampleVariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(INTEGER_MANY_VALUES)).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(Ints.toArray(INTEGER_MANY_VALUES))).isWithin((ALLOWED_ERROR * INTEGER_MANY_VALUES_MEAN)).of(INTEGER_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(LONG_MANY_VALUES)).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Stats.meanOf(Longs.toArray(LONG_MANY_VALUES))).isWithin((ALLOWED_ERROR * LONG_MANY_VALUES_MEAN)).of(LONG_MANY_VALUES_MEAN);","METHOD: com.google.common.math.StatsTest.testMeanOf()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: values.hasAnyNaN()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNaN();","THEN_STATEMENT: (values.hasAnyPositiveInfinity() && values.hasAnyNegativeInfinity())","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isPositiveInfinity();","THEN_STATEMENT: values.hasAnyPositiveInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isNegativeInfinity();","THEN_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("mean of " + values)).that(mean).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN);","ELSE_STATEMENT: values.hasAnyNegativeInfinity()","com.google.common.math.StatsTest.testMeanOf()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((INTEGER_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / INTEGER_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_ITERATOR.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.populationStandardDeviation()).isWithin((ALLOWED_ERROR * sqrt(LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS))).of(sqrt((LONG_MANY_VALUES_SUM_OF_SQUARES_OF_DELTAS / LONG_MANY_VALUES_COUNT)));","METHOD: com.google.common.math.StatsTest.testPopulationStandardDeviation()","com.google.common.math.StatsTest.testPopulationStandardDeviation()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient by addAll(PairedStats) of " + values)).that(pearsonsCorrelationCoefficient).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient of " + values)).that(pearsonsCorrelationCoefficient).isWithin(ALLOWED_ERROR).of((accumulator.populationCovariance() / (accumulator.xStats().populationStandardDeviation() * accumulator.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("Pearson\'s correlation coefficient by addAll(PairedStats) of " + values)).that(pearsonsCorrelationCoefficientByAddAllPartitionedPairedStats).isWithin(ALLOWED_ERROR).of((accumulatorByAddAllPartitionedPairedStats.populationCovariance() / (accumulatorByAddAllPartitionedPairedStats.xStats().populationStandardDeviation() * accumulatorByAddAllPartitionedPairedStats.yStats().populationStandardDeviation())));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPearsonsCorrelationCoefficient()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance by addAll(PairedStats) of " + values)).that(populationCovarianceByAddAllPartitionedPairedStats).isNaN();","THEN_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance of " + values)).that(populationCovariance).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(("population covariance by addAll(PairedStats) of " + values)).that(populationCovarianceByAddAllPartitionedPairedStats).isWithin(ALLOWED_ERROR).of((MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT));","ELSE_STATEMENT: values.hasAnyNonFinite()","com.google.common.math.PairedStatsAccumulatorTest.testPopulationCovariance()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertWithMessage(template, args).fail();","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_extraValueDelimiter()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Optional<Number> first = (Optional<Number>) numbers.first();","METHOD: com.google.common.base.OptionalTest.testSampleCodeFine2()","com.google.common.base.OptionalTest.testSampleCodeFine2()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(onlyPresent).containsExactly(2);","METHOD: com.google.common.base.OptionalTest.testPresentInstances_wildcards()","com.google.common.base.OptionalTest.testPresentInstances_wildcards()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetRootCause_Loop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(cause);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.base.ThrowablesTest.testGetCasualChainLoop()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, SomeCheckedException.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Throwables.getCauseAs(thrown, Exception.class)).isSameInstanceAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameInstanceAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered
   */","METHOD: com.google.common.escape.UnicodeEscaper.escape(String)","com.google.common.escape.UnicodeEscaper.escape(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((k <= (Integer.MAX_VALUE / 2)), "k (%s) must be <= Integer.MAX_VALUE / 2", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: checkArgument((k >= 0), "k (%s) must be >= 0", k);","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.buffer = (T[]) new Object[IntMath.checkedMultiply(k, 2)];","METHOD: com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","com.google.common.collect.TopKSelector.TopKSelector(Comparator<? super T>,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue()} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p><b>Note:</b> The returned map's values are guaranteed to be of type {@link SortedSet}. To
   * obtain this map with the more specific generic type {@code Map<K, SortedSet<V>>}, call {@link
   * Multimaps#asMap(SortedSetMultimap)} instead. <b>However</b>, the returned map <i>itself</i> is
   * not necessarily a {@link SortedMap}: A {@code SortedSetMultimap} must expose the <i>values</i>
   * for a given key in sorted order, but it need not expose the <i>keys</i> in sorted order.
   * Individual {@code SortedSetMultimap} implementations, like those built with {@link
   * MultimapBuilder#treeKeys()}, may make additional guarantees.
   */","METHOD: com.google.common.collect.SortedSetMultimap.asMap()","com.google.common.collect.SortedSetMultimap.asMap()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: @SuppressWarnings("unchecked") Multiset<Object> multiset = (Multiset<Object>) multiset();","THEN_STATEMENT: (entryCount != 0)","com.google.common.collect.Multisets.EntrySet.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=
 * "https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description"
 * >streams library</a> in a slightly different way.
 *
 * <p>The following types of methods are provided:
 *
 * <ul>
 *   <li>chaining methods which return a new {@code FluentIterable} based in some way on the
 *       contents of the current one (for example {@link #transform})
 *   <li>element extraction methods which facilitate the retrieval of certain elements (for example
 *       {@link #last})
 *   <li>query methods which answer questions about the {@code FluentIterable}'s contents (for
 *       example {@link #anyMatch})
 *   <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection
 *       or array (for example {@link #toList})
 * </ul>
 *
 * <p>Several lesser-used features are currently available only as static methods on the {@link
 * Iterables} class.
 *
 * <p><a id="streams"></a>
 *
 * <h3>Comparison to streams</h3>
 *
 * <p>Starting with Java 8, the core Java class libraries provide a new "Streams" library (in {@code
 * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key
 * differences include:
 *
 * <ul>
 *   <li>A stream is <i>single-use</i>; it becomes invalid as soon as any "terminal operation" such
 *       as {@code findFirst()} or {@code iterator()} is invoked. (Even though {@code Stream}
 *       contains all the right method <i>signatures</i> to implement {@link Iterable}, it does not
 *       actually do so, to avoid implying repeat-iterability.) {@code FluentIterable}, on the other
 *       hand, is multiple-use, and does implement {@link Iterable}.
 *   <li>Streams offer many features not found here, including {@code min/max}, {@code distinct},
 *       {@code reduce}, {@code sorted}, the very powerful {@code collect}, and built-in support for
 *       parallelizing stream operations.
 *   <li>{@code FluentIterable} contains several features not available on {@code Stream}, which are
 *       noted in the method descriptions below.
 *   <li>Streams include primitive-specialized variants such as {@code IntStream}, the use of which
 *       is strongly recommended.
 *   <li>Streams are standard Java, not requiring a third-party dependency (but do render your code
 *       incompatible with Java 7 and earlier).
 * </ul>
 *
 * <h3>Example</h3>
 *
 * <p>Here is an example that accepts a list from a database call, filters it based on a predicate,
 * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
 * as a {@code List}:
 *
 * <pre>{@code
 * ImmutableList<String> results =
 *     FluentIterable.from(database.getClientList())
 *         .filter(Client::isActiveInLastMonth)
 *         .transform(Object::toString)
 *         .limit(10)
 *         .toList();
 * }</pre>
 *
 * The approximate stream equivalent is:
 *
 * <pre>{@code
 * List<String> results =
 *     database.getClientList()
 *         .stream()
 *         .filter(Client::isActiveInLastMonth)
 *         .map(Object::toString)
 *         .limit(10)
 *         .collect(Collectors.toList());
 * }</pre>
 *
 * @author Marcin Mikosik
 * @since 12.0
 */","CLASS: com.google.common.collect.FluentIterable","com.google.common.collect.FluentIterable","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if {@code element} is null
   */","METHOD: com.google.common.collect.ImmutableList.of(E)","com.google.common.collect.ImmutableList.of(E)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_UPDATE","BLOCK_COMMENT: /*
     * GWT claims to support java.lang.Character's char-classification methods, but it actually only
     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this
     * seems to be documented is here:
     * https://groups.google.com/d/topic/google-web-toolkit-contributors/1UEzsryq1XI
     *
     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also
     * being allowed due to widespread practice.
     */","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isFinalPart && DIGIT_MATCHER.matches(part.charAt(0)))","METHOD: com.google.common.net.InternetDomainName.validatePart(String,boolean)","com.google.common.net.InternetDomainName.validatePart(String,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DIGIT_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.LETTER_MATCHER : CharMatcher","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Protocol}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Key}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Extensions}</a>
   * header field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Accept}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * The HTTP <a href="https://tools.ietf.org/html/rfc6455">{@code Sec-WebSocket-Version}</a> header
   * field name.
   *
   * @since 28.0
   */","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSION : String","com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.UPGRADE_INSECURE_REQUESTS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_RESOURCE_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CDN_LOOP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.CROSS_ORIGIN_OPENER_POLICY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
 * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
 * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>.
 * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
 * type or subtype value. A media type may not have wildcard type with a declared subtype. The
 * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
 * parameter attributes or parameter values must be valid according to RFCs <a
 * href="https://tools.ietf.org/html/rfc2045">2045</a> and <a
 * href="https://tools.ietf.org/html/rfc2046">2046</a>.
 *
 * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
 * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
 * lowercase, but all others are left as-is.
 *
 * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME {@code
 * Content-Type} header and as such has no support for header-specific considerations such as line
 * folding and comments.
 *
 * <p>For media types that take a charset the predefined constants default to UTF-8 and have a
 * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
 *
 * @since 12.0
 * @author Gregory Kick
 */","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // for GWT","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument(ascii().matchesAllOf(value), "parameter values must be ASCII: %s", value);","METHOD: com.google.common.net.MediaType.normalizeParameterValue(String,String)","com.google.common.net.MediaType.normalizeParameterValue(String,String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters, new Function<String, String>() {
  public @Override String apply(String value) {
    return ((TOKEN_MATCHER.matchesAllOf(value) && (! value.isEmpty())) ? value : escapeAndQuote(value));
  }
});","THEN_STATEMENT: (! parameters.isEmpty())","com.google.common.net.MediaType.computeToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((! token.isEmpty()));","METHOD: com.google.common.net.MediaType.normalizeToken(String)","com.google.common.net.MediaType.normalizeToken(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MEDIA_PRESENTATION_DESCRIPTION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HEIF : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.OPENSEARCH_DESCRIPTION_UTF_8 : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JP2K : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.GEO_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int percentIndex = (- 1);","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: percentIndex = i;","THEN_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","BREAK_STATEMENT: ","THEN_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // everything after a '%' is ignored (it's a Scope ID): http://superuser.com/a/99753","ELSE_STATEMENT: (c == '%')","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (c == '.')","IF_STATEMENT: (c == '.')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (c == '.')","FOR_STATEMENT: (i < ipString.length())","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: ipString = ipString.substring(0, percentIndex);","THEN_STATEMENT: (percentIndex != (- 1))","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (percentIndex != (- 1))","THEN_STATEMENT: hasColon","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (c == ':')","ELSE_STATEMENT: (c == '.')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (c == ':')","FOR_STATEMENT: (i < ipString.length())","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (c == '%')","ELSE_STATEMENT: (c == ':')","com.google.common.net.InetAddresses.ipStringToBytes(String)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_DELETE","JAVADOC: /** Returns {@code null} if unable to parse into a {@code byte[]}. */","METHOD: com.google.common.net.InetAddresses.ipStringToBytes(String)","com.google.common.net.InetAddresses.ipStringToBytes(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.toBigInteger(InetAddress)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromIPv4BigInteger(BigInteger)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromBigInteger(BigInteger,boolean)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.InetAddresses.fromIPv6BigInteger(BigInteger)","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(hitCount, missCount);","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.requestCount()","com.google.common.cache.CacheStats.requestCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(Math.max(0, saturatedSubtract(hitCount, other.hitCount)), Math.max(0, saturatedSubtract(missCount, other.missCount)), Math.max(0, saturatedSubtract(loadSuccessCount, other.loadSuccessCount)), Math.max(0, saturatedSubtract(loadExceptionCount, other.loadExceptionCount)), Math.max(0, saturatedSubtract(totalLoadTime, other.totalLoadTime)), Math.max(0, saturatedSubtract(evictionCount, other.evictionCount)));","METHOD: com.google.common.cache.CacheStats.minus(CacheStats)","com.google.common.cache.CacheStats.minus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.averageLoadPenalty()","com.google.common.cache.CacheStats.averageLoadPenalty()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(saturatedAdd(hitCount, other.hitCount), saturatedAdd(missCount, other.missCount), saturatedAdd(loadSuccessCount, other.loadSuccessCount), saturatedAdd(loadExceptionCount, other.loadExceptionCount), saturatedAdd(totalLoadTime, other.totalLoadTime), saturatedAdd(evictionCount, other.evictionCount));","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0
   */","METHOD: com.google.common.cache.CacheStats.plus(CacheStats)","com.google.common.cache.CacheStats.plus(CacheStats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations, as well as those that threw exceptions.
   * This is defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadCount()","com.google.common.cache.CacheStats.loadCount()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: long totalLoadCount = saturatedAdd(loadSuccessCount, loadExceptionCount);","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   */","METHOD: com.google.common.cache.CacheStats.loadExceptionRate()","com.google.common.cache.CacheStats.loadExceptionRate()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new CacheStats(negativeToMaxValue(hitCount.sum()), negativeToMaxValue(missCount.sum()), negativeToMaxValue(loadSuccessCount.sum()), negativeToMaxValue(loadExceptionCount.sum()), negativeToMaxValue(totalLoadTime.sum()), negativeToMaxValue(evictionCount.sum()));","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","com.google.common.cache.AbstractCache.SimpleStatsCounter.snapshot()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.AbstractCache.SimpleStatsCounter.negativeToMaxValue(long)","CLASS: com.google.common.cache.AbstractCache.SimpleStatsCounter","com.google.common.cache.AbstractCache.SimpleStatsCounter","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_INSERT","JAVADOC: /** Returns the time that this entry was last written, in ns. */","METHOD: com.google.common.cache.ReferenceEntry.getWriteTime()","com.google.common.cache.ReferenceEntry.getWriteTime()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: AggregateFutureState<OutputT>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_INSERT","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * A future whose value is derived from a collection of input futures.
 *
 * @param <InputT> the type of the individual inputs
 * @param <OutputT> the type of the output (i.e. this) future
 */","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState != null)","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // Let go of the memory held by the running state","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.runningState = null;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: wasInterrupted","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: localRunningState.interruptTask();","THEN_STATEMENT: wasInterrupted","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: releaseResources(OUTPUT_FUTURE_DONE);","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // nulls out `futures`","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: boolean wasInterrupted = wasInterrupted();","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","METHOD: com.google.common.util.concurrent.AggregateFuture.afterDone()","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (isCancelled() & (localFutures != null))","THEN_STATEMENT: (localRunningState != null)","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Future<?> future:localFutures","THEN_STATEMENT: (isCancelled() & (localFutures != null))","com.google.common.util.concurrent.AggregateFuture.afterDone()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: RunningState localRunningState = runningState;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (localRunningState == null)","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: null;","THEN_STATEMENT: (localRunningState == null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableCollection<? extends Future<?>> localFutures = futures;","METHOD: com.google.common.util.concurrent.AggregateFuture.pendingToString()","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ("futures=" + localFutures);","THEN_STATEMENT: (localFutures != null)","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.AggregateFuture.pendingToString()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init(RunningState)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.init()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.handleException(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.AggregateFuture(ImmutableCollection<? extends ListenableFuture<? extends InputT>>,boolean,boolean)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectOneValue(int,InputT)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.addInitialException(Set<Throwable>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.log(Throwable)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.decrementCountAndMaybeComplete(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.collectValueFromNonCancelledFuture(int,Future<? extends InputT>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFuture.processCompleted(ImmutableCollection<? extends Future<? extends InputT>>)","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.runningState : RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.allMustSucceed : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.futures : ImmutableCollection<? extends ListenableFuture<? extends InputT>>","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.AggregateFuture.collectsValues : boolean","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.AggregateFuture.RunningState","CLASS: com.google.common.util.concurrent.AggregateFuture","com.google.common.util.concurrent.AggregateFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ForwardingFluentFuture.toString()","CLASS: com.google.common.util.concurrent.ForwardingFluentFuture","com.google.common.util.concurrent.ForwardingFluentFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new ListFutureRunningState(futures, allMustSucceed));","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed);","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.ListFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture.ListFuture","com.google.common.util.concurrent.CollectionFuture.ListFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.collectOneValue(int,V)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.CollectionFuture(ImmutableCollection<? extends ListenableFuture<? extends V>>,boolean)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.combine(List<Optional<V>>)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CollectionFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CollectionFuture.values : List<Optional<V>>","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState","CLASS: com.google.common.util.concurrent.CollectionFuture","com.google.common.util.concurrent.CollectionFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","TYPE_PARAMETER: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","SINGLE_TYPE: OutputT","TYPE_PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","POSTFIX_EXPRESSION: state.remaining --;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: -- state.remaining;","SYNCHRONIZED_STATEMENT: state","com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper.decrementAndGetRemainingCount(AggregateFutureState)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AggregateFutureState.clearSeenExceptions()","CLASS: com.google.common.util.concurrent.AggregateFutureState","com.google.common.util.concurrent.AggregateFutureState","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new AsyncCallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new AsyncCallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,AsyncCallable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.CombinedFutureInterruptibleTask(Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(e);","THEN_STATEMENT: thrownByExecute","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.execute()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","BLOCK_COMMENT: /*
       * The future no longer needs to interrupt this task, so it no longer needs a reference to it.
       *
       * TODO(cpovirk): It might be nice for our InterruptibleTask subclasses to null out their
       *  `callable` fields automatically. That would make it less important for us to null out the
       * reference to `task` here (though it's still nice to do so in case our reference to the
       * executor keeps it alive). Ideally, nulling out `callable` would be the responsibility of
       * InterruptibleTask itself so that its other subclasses also benefit. (Handling `callable` in
       * InterruptibleTask itself might also eliminate some of the existing boilerplate for, e.g.,
       * pendingToString().)
       */","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: CombinedFuture.this.task = null;","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error.getCause());","THEN_STATEMENT: (error instanceof ExecutionException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setException(error);","ELSE_STATEMENT: (error instanceof CancellationException)","com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask.afterRanInterruptibly(T,Throwable)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.CallableInterruptibleTask(Callable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","METHOD_INVOCATION: init(new CombinedFutureRunningState(futures, allMustSucceed, new CallableInterruptibleTask(callable, listenerExecutor)));","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: super(futures, allMustSucceed, false);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: this.task = new CallableInterruptibleTask(callable, listenerExecutor);","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: init();","METHOD: com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","com.google.common.util.concurrent.CombinedFuture.CombinedFuture(ImmutableCollection<? extends ListenableFuture<?>>,boolean,Executor,Callable<V>)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","METHOD_INVOCATION: CombinedFuture.this.setFuture(value);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.setValue(ListenableFuture<V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.AsyncCallableInterruptibleTask(AsyncCallable<V>,Executor)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.interruptTask()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.handleAllCompleted()","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.releaseResources(ReleaseResourcesReason)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.CombinedFuture.collectOneValue(int,Object)","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.CombinedFuture.task : CombinedFutureInterruptibleTask<?>","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDITIONAL_CLASS","CLASS: com.google.common.util.concurrent.CombinedFuture.CombinedFutureRunningState","CLASS: com.google.common.util.concurrent.CombinedFuture","com.google.common.util.concurrent.CombinedFuture","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: Longs.constrainToRange(timeoutNanos, 0L, ((Long.MAX_VALUE / 4) * 3));","METHOD: com.google.common.util.concurrent.Monitor.toSafeNanos(long,TimeUnit)","com.google.common.util.concurrent.Monitor.toSafeNanos(long,TimeUnit)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: annotations.toArray(new Annotation[0]);","METHOD: com.google.common.reflect.Parameter.getDeclaredAnnotations()","com.google.common.reflect.Parameter.getDeclaredAnnotations()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new InputStream() {
  int bitBuffer = 0;
  int bitBufferLength = 0;
  int readChars = 0;
  boolean hitPadding = false;
  public @Override int read() throws IOException {
    while (true)      {
        int readChar = reader.read();
        if ((readChar == (- 1)))
            {
              if (((! hitPadding) && (! alphabet.isValidPaddingStartPosition(readChars))))
                  {
                    throw new DecodingException(("Invalid input length " + readChars));
                  }
              return (- 1);
            }
        readChars ++;
        char ch = (char) readChar;
        if (((paddingChar != null) && (paddingChar.charValue() == ch)))
            {
              if (((! hitPadding) && ((readChars == 1) || (! alphabet.isValidPaddingStartPosition((readChars - 1))))))
                  {
                    throw new DecodingException(("Padding cannot start at index " + readChars));
                  }
              hitPadding = true;
            }
        else
            if (hitPadding)
                {
                  throw new DecodingException(((("Expected padding character but found \'" + ch) + "\' at index ") + readChars));
                }
            else
                {
                  bitBuffer <<= alphabet.bitsPerChar;
                  bitBuffer |= alphabet.decode(ch);
                  bitBufferLength += alphabet.bitsPerChar;
                  if ((bitBufferLength >= 8))
                      {
                        bitBufferLength -= 8;
                        return ((bitBuffer >> bitBufferLength) & 0xFF);
                      }
                }
      }
  }
  public @Override int read(byte[] buf, int off, int len) throws IOException {
    checkPositionIndexes(off, (off + len), buf.length);
    int i = off;
    for (; (i < (off + len)); i ++) 
      {
        int b = read();
        if ((b == (- 1)))
            {
              int read = (i - off);
              return ((read == 0) ? (- 1) : read);
            }
        buf[i] = (byte) b;
      }
    return (i - off);
  }
  public @Override void close() throws IOException {
    reader.close();
  }
};","METHOD: com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","com.google.common.io.BaseEncoding.StandardBaseEncoding.decodingStream(Reader)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.byteArrayOutputStream = byteArrayOutputStream;","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: output = new DataOutputStream(byteArrayOutputStream);","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARAMETER_RENAMING","PARAMETER: byteArrayOutputStream","PARAMETERS: ","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.ByteArrayDataOutputStream(ByteArrayOutputStream)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: byteArrayOutputStream.toByteArray();","METHOD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.toByteArray()","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.toByteArray()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputStream : ByteArrayOutputStream","FIELD: com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputStream : ByteArrayOutputStream","com.google.common.io.ByteStreams.ByteArrayDataOutputStream.byteArrayOutputSteam : ByteArrayOutputStream","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkPositionIndexes(off, (off + len), b.length);","METHOD: com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","THROW_STATEMENT: new IndexOutOfBoundsException(String.format("len (%s) cannot be negative", len));","THEN_STATEMENT: (len < 0)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}
   */","METHOD: com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","com.google.common.io.ByteStreams.read(InputStream,byte[],int,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new ByteArrayDataOutputStream(checkNotNull(byteArrayOutputStream));","METHOD: com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARAMETER_RENAMING","PARAMETER: byteArrayOutputStream","PARAMETERS: ","com.google.common.io.ByteStreams.newDataOutput(ByteArrayOutputStream)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: byte[] buf = createBuffer();","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // A buffer is allocated if skipSafely does not skip any bytes.","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: byte[] buf = null;","METHOD: com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // Allocate a buffer bounded by the maximum size that can be requested, for
          // example an array of BUFFER_SIZE is unnecessary when the value of remaining
          // is smaller.","THEN_STATEMENT: (buf == null)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","ASSIGNMENT: buf = new byte[skip];","THEN_STATEMENT: (buf == null)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (buf == null)","THEN_STATEMENT: (skipped == 0)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int skip = (int) Math.min(remaining, BUFFER_SIZE);","THEN_STATEMENT: (skipped == 0)","com.google.common.io.ByteStreams.skipUpTo(InputStream,long)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * An {@link OutputStream} that starts buffering to a byte array, but switches to file buffering
 * once the data reaches a configurable size.
 *
 * <p>Temporary files created by this stream may live in the local filesystem until either:
 *
 * <ul>
 *   <li>{@link #reset} is called (removing the data in this stream and deleting the file), or...
 *   <li>this stream (or, more precisely, its {@link #asByteSource} view) is finalized during
 *       garbage collection, <strong>AND</strong> this stream was not constructed with {@linkplain
 *       #FileBackedOutputStream(int) the 1-arg constructor} or the {@linkplain
 *       #FileBackedOutputStream(int, boolean) 2-arg constructor} passing {@code false} in the
 *       second parameter.
 * </ul>
 *
 * <p>This class is thread-safe.
 *
 * @author Chris Nokleberg
 * @since 1.0
 */","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: File temp = File.createTempFile("FileBackedOutputStream", null, parentDirectory);","THEN_STATEMENT: ((file == null) && ((memory.getCount() + len) > fileThreshold))","com.google.common.io.FileBackedOutputStream.update(int)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","CONSTRUCTOR_INVOCATION: super();","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.fileThreshold = fileThreshold;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: this.resetOnFinalize = resetOnFinalize;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: memory = new MemoryOutput();","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: out = memory;","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: resetOnFinalize","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: resetOnFinalize","IF_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: source = new ByteSource() {
  public @Override InputStream openStream() throws IOException {
    return openInputStream();
  }
  protected @Override void finalize() {
    try
      {
        reset();
      }
    catch (Throwable t)
      {
        t.printStackTrace(System.err);
      }
  }
};","THEN_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: source = new ByteSource() {
  public @Override InputStream openStream() throws IOException {
    return openInputStream();
  }
};","ELSE_STATEMENT: resetOnFinalize","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","CONSTRUCTOR_INVOCATION: this(fileThreshold, resetOnFinalize, null);","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   */","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.FileBackedOutputStream.FileBackedOutputStream(int,boolean,File)","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.FileBackedOutputStream.parentDirectory : File","CLASS: com.google.common.io.FileBackedOutputStream","com.google.common.io.FileBackedOutputStream","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractValueGraph.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    return AbstractValueGraph.this.edges();
  }
  public @Override boolean isDirected() {
    return AbstractValueGraph.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractValueGraph.this.allowsSelfLoops();
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractValueGraph.this.nodeOrder();
  }
  public @Override ElementOrder<N> incidentEdgeOrder() {
    return AbstractValueGraph.this.incidentEdgeOrder();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractValueGraph.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractValueGraph.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractValueGraph.this.successors(node);
  }
  public @Override int degree(N node) {
    return AbstractValueGraph.this.degree(node);
  }
  public @Override int inDegree(N node) {
    return AbstractValueGraph.this.inDegree(node);
  }
  public @Override int outDegree(N node) {
    return AbstractValueGraph.this.outDegree(node);
  }
};","METHOD: com.google.common.graph.AbstractValueGraph.asGraph()","com.google.common.graph.AbstractValueGraph.asGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new ElementOrder<S>(Type.SORTED, checkNotNull(comparator));","METHOD: com.google.common.graph.ElementOrder.sorted(Comparator<S>)","com.google.common.graph.ElementOrder.sorted(Comparator<S>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","SWITCH_CASE: STABLE","SWITCH_STATEMENT: type","com.google.common.graph.ElementOrder.createMap(int)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ElementOrder.stable()","CLASS: com.google.common.graph.ElementOrder","com.google.common.graph.ElementOrder","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.adjacentNodes(N)","com.google.common.graph.Graph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.incidentEdgeOrder()","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the edges whose {@link #incidentNodes(Object) incident nodes} in this network include
   * {@code node}.
   *
   * <p>This is equal to the union of {@link #inEdges(Object)} and {@link #outEdges(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this network
   */","METHOD: com.google.common.graph.Network.incidentEdges(N)","com.google.common.graph.Network.incidentEdges(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this network.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this network
   */","METHOD: com.google.common.graph.Network.adjacentNodes(N)","com.google.common.graph.Network.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: (! edgesConnecting(nodeU, nodeV).isEmpty());","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: (nodes().contains(nodeU) && successors(nodeU).contains(nodeV));","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV());","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractNetwork.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    if (allowsParallelEdges())
        {
          return super.edges();
        }
    return new AbstractSet<EndpointPair<N>>() {
  public @Override Iterator<EndpointPair<N>> iterator() {
    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {
  public @Override EndpointPair<N> apply(E edge) {
    return incidentNodes(edge);
  }
});
  }
  public @Override int size() {
    return AbstractNetwork.this.edges().size();
  }
  public @SuppressWarnings("unchecked") @Override boolean contains(@NullableDecl Object obj) {
    if ((! (obj instanceof EndpointPair)))
        {
          return false;
        }
    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
    return ((isOrderingCompatible(endpointPair) && nodes().contains(endpointPair.nodeU())) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV()));
  }
};
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractNetwork.this.nodeOrder();
  }
  public @Override ElementOrder<N> incidentEdgeOrder() {
    return ElementOrder.unordered();
  }
  public @Override boolean isDirected() {
    return AbstractNetwork.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractNetwork.this.allowsSelfLoops();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractNetwork.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractNetwork.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractNetwork.this.successors(node);
  }
};","METHOD: com.google.common.graph.AbstractNetwork.asGraph()","com.google.common.graph.AbstractNetwork.asGraph()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: StandardValueGraph<N, V>","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: (graph.isDirected() ? DirectedGraphConnections.ofImmutable(node, graph.incidentEdges(node), successorNodeToValueFn) : UndirectedGraphConnections.ofImmutable(Maps.asMap(graph.adjacentNodes(node), successorNodeToValueFn)));","METHOD: com.google.common.graph.ImmutableValueGraph.connectionsOf(ValueGraph<N, V>,N)","com.google.common.graph.ImmutableValueGraph.connectionsOf(ValueGraph<N, V>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A builder for creating {@link ImmutableValueGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableValueGraph<City, Distance> CITY_ROAD_DISTANCE_GRAPH =
   *     ValueGraphBuilder.undirected()
   *         .<City, Distance>immutable()
   *         .putEdgeValue(PARIS, BERLIN, kilometers(1060))
   *         .putEdgeValue(PARIS, BRUSSELS, kilometers(317))
   *         .putEdgeValue(BERLIN, BRUSSELS, kilometers(764))
   *         .addNode(REYKJAVIK)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */","CLASS: com.google.common.graph.ImmutableValueGraph.Builder","com.google.common.graph.ImmutableValueGraph.Builder","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // The incidentEdgeOrder for immutable graphs is always stable. However, we don't want to
      // modify this builder, so we make a copy instead.","METHOD: com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.mutableValueGraph = graphBuilder.copy().incidentEdgeOrder(ElementOrder.<N>stable()).build();","METHOD: com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","com.google.common.graph.ImmutableValueGraph.Builder.Builder(ValueGraphBuilder<N, V>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.remove(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.clear()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: cacheEntry = null;","METHOD: com.google.common.graph.MapIteratorCache.clearCache()","com.google.common.graph.MapIteratorCache.clearCache()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Entry<K, V> entry = cacheEntry;","METHOD: com.google.common.graph.MapIteratorCache.getIfCached(Object)","com.google.common.graph.MapIteratorCache.getIfCached(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.graph.MapIteratorCache.put(K,V)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractSet<K>() {
  public @Override UnmodifiableIterator<K> iterator() {
    final Iterator<Entry<K, V>> entryIterator = backingMap.entrySet().iterator();
    return new UnmodifiableIterator<K>() {
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    Entry<K, V> entry = entryIterator.next();
    cacheEntry = entry;
    return entry.getKey();
  }
};
  }
  public @Override int size() {
    return backingMap.size();
  }
  public @Override boolean contains(@NullableDecl Object key) {
    return containsKey(key);
  }
};","METHOD: com.google.common.graph.MapIteratorCache.unmodifiableKeySet()","com.google.common.graph.MapIteratorCache.unmodifiableKeySet()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ATTRIBUTE_RENAMING","FIELD: com.google.common.graph.MapIteratorCache.cacheEntry : Entry<K, V>","FIELD: com.google.common.graph.MapIteratorCache.cacheEntry : Entry<K, V>","com.google.common.graph.MapIteratorCache.entrySetCache : Entry<K, V>","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapIteratorCache.entrySetCache : Entry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.GraphConnections.incidentEdgeIterator(N)","CLASS: com.google.common.graph.GraphConnections","com.google.common.graph.GraphConnections","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: ((graph instanceof ImmutableGraph) ? (ImmutableGraph<N>) graph : new ImmutableGraph<N>(new StandardValueGraph<N, Presence>(GraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size())));","METHOD: com.google.common.graph.ImmutableGraph.copyOf(Graph<N>)","com.google.common.graph.ImmutableGraph.copyOf(Graph<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * A builder for creating {@link ImmutableGraph} instances, especially {@code static final}
   * graphs. Example:
   *
   * <pre>{@code
   * static final ImmutableGraph<Country> COUNTRY_ADJACENCY_GRAPH =
   *     GraphBuilder.undirected()
   *         .<Country>immutable()
   *         .putEdge(FRANCE, GERMANY)
   *         .putEdge(FRANCE, BELGIUM)
   *         .putEdge(GERMANY, BELGIUM)
   *         .addNode(ICELAND)
   *         .build();
   * }</pre>
   *
   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple times to build
   * multiple graphs in series. Each new graph contains all the elements of the ones created before
   * it.
   *
   * @since 28.0
   */","CLASS: com.google.common.graph.ImmutableGraph.Builder","com.google.common.graph.ImmutableGraph.Builder","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_DELETE","LINE_COMMENT: // The incidentEdgeOrder for immutable graphs is always stable. However, we don't want to
      // modify this builder, so we make a copy instead.","METHOD: com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","ASSIGNMENT: this.mutableGraph = graphBuilder.copy().incidentEdgeOrder(ElementOrder.<N>stable()).build();","METHOD: com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","com.google.common.graph.ImmutableGraph.Builder.Builder(GraphBuilder<N>)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Function<N, Presence> edgeValueFn = (Function<N, Presence>) Functions.constant(Presence.EDGE_EXISTS);","METHOD: com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_UPDATE","RETURN_STATEMENT: (graph.isDirected() ? DirectedGraphConnections.ofImmutable(node, graph.incidentEdges(node), edgeValueFn) : UndirectedGraphConnections.ofImmutable(Maps.asMap(graph.adjacentNodes(node), edgeValueFn)));","METHOD: com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","com.google.common.graph.ImmutableGraph.connectionsOf(Graph<N>,N)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ImmutableGraph","com.google.common.graph.ImmutableGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.adjacentNodes(N)","com.google.common.graph.ValueGraph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * <p>This is equal to the union of {@link #predecessors(Object)} and {@link #successors(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.BaseGraph.adjacentNodes(N)","com.google.common.graph.BaseGraph.adjacentNodes(N)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.incidentEdges(N)","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.incidentEdgeOrder()","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractGraphBuilder.incidentEdgeOrder : ElementOrder<N>","CLASS: com.google.common.graph.AbstractGraphBuilder","com.google.common.graph.AbstractGraphBuilder","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(edge);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(node);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E,N,boolean)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(edge);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(node);","METHOD: com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E,N)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
 * Configurable implementation of {@link ValueGraph} that supports the options supplied by {@link
 * AbstractGraphBuilder}.
 *
 * <p>This class maintains a map of nodes to {@link GraphConnections}.
 *
 * <p>Collection-returning accessors return unmodifiable views: the view returned will reflect
 * changes to the graph (if the graph is mutable) but may not be modified by the user.
 *
 * <p>The time complexity of all collection-returning accessors is O(1), since views are returned.
 *
 * @author James Sexton
 * @author Joshua O'Madadhain
 * @author Omar Darwish
 * @param <N> Node parameter type
 * @param <V> Value parameter type
 */","CLASS: com.google.common.graph.StandardValueGraph","com.google.common.graph.StandardValueGraph","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapRetrievalCache.cacheEntry1 : CacheEntry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"UNCLASSIFIED_CHANGE","MODIFIER: volatile","MODIFIERS: ","com.google.common.graph.MapRetrievalCache.cacheEntry2 : CacheEntry<K, V>","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty
   */","METHOD: com.google.common.math.Stats.mean()","com.google.common.math.Stats.mean()","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value >= 1.0)","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value <= (- 1.0))","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: value;","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: 1.0;","THEN_STATEMENT: (value >= 1.0)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: (- 1.0);","THEN_STATEMENT: (value <= (- 1.0))","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: Doubles.constrainToRange(value, (- 1.0), 1.0);","METHOD: com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","com.google.common.math.PairedStatsAccumulator.ensureInUnitRange(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (value > 0.0)","METHOD: com.google.common.math.DoubleUtils.ensureNonNegative(double)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (value > 0.0)","IF_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: value;","THEN_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: 0.0;","ELSE_STATEMENT: (value > 0.0)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: Math.max(value, 0.0);","METHOD: com.google.common.math.DoubleUtils.ensureNonNegative(double)","com.google.common.math.DoubleUtils.ensureNonNegative(double)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (count == 0)","METHOD: com.google.common.math.StatsAccumulator.addAll(Stats)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (count == 0)","IF_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: count = values.count();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean = values.mean();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas = values.sumOfSquaresOfDeltas();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: min = values.min();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: max = values.max();","THEN_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: count += values.count();","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","IF_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: min = Math.min(min, values.min());","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: max = Math.max(max, values.max());","ELSE_STATEMENT: (count == 0)","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","IF_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"COMMENT_INSERT","LINE_COMMENT: // This is a generalized version of the calculation in add(double) above.","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: double delta = (values.mean() - mean);","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean += ((delta * values.count()) / count);","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas += (values.sumOfSquaresOfDeltas() + ((delta * (values.mean() - mean)) * values.count()));","THEN_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: mean = calculateNewMeanNonFinite(mean, values.mean());","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","ASSIGNMENT: sumOfSquaresOfDeltas = NaN;","ELSE_STATEMENT: (isFinite(mean) && isFinite(values.mean()))","com.google.common.math.StatsAccumulator.addAll(Stats)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","METHOD_INVOCATION: merge(values.count(), values.mean(), values.sumOfSquaresOfDeltas(), values.min(), values.max());","METHOD: com.google.common.math.StatsAccumulator.addAll(Stats)","com.google.common.math.StatsAccumulator.addAll(Stats)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulator.merge(long,double,double,double,double)","CLASS: com.google.common.math.StatsAccumulator","com.google.common.math.StatsAccumulator","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.StatsAccumulator.addAll(StatsAccumulator)","CLASS: com.google.common.math.StatsAccumulator","com.google.common.math.StatsAccumulator","CRUCIAL"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a single-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Float.parseFloat} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code float} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code float} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Floats.tryParse(String)","com.google.common.primitives.Floats.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a double-precision floating point value. The ASCII character
   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by {@link
   * Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.
   *
   * <p>This implementation is likely to be faster than {@code Double.parseDouble} if many failures
   * are expected.
   *
   * @param string the string representation of a {@code double} value
   * @return the floating point value represented by {@code string}, or {@code null} if {@code
   *     string} has a length of zero or cannot be parsed as a {@code double} value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Doubles.tryParse(String)","com.google.common.primitives.Doubles.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String)} for that version.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String)","com.google.common.primitives.Ints.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Integer#parseInt(String, int)} for that version.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Ints.tryParse(String,int)","com.google.common.primitives.Ints.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the least value present in {@code array}, treating values as unsigned.
   *
   * @param array a <i>nonempty</i> array of {@code byte} values
   * @return the value present in {@code array} that is less than or equal to every other value in
   *     the array according to {@link #compare}
   * @throws IllegalArgumentException if {@code array} is empty
   */","METHOD: com.google.common.primitives.UnsignedBytes.min(byte...)","com.google.common.primitives.UnsignedBytes.min(byte...)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Returns the greatest value present in {@code array}, treating values as unsigned.
   *
   * @param array a <i>nonempty</i> array of {@code byte} values
   * @return the value present in {@code array} that is greater than or equal to every other value
   *     in the array according to {@link #compare}
   * @throws IllegalArgumentException if {@code array} is empty
   */","METHOD: com.google.common.primitives.UnsignedBytes.max(byte...)","com.google.common.primitives.UnsignedBytes.max(byte...)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String)} for that version.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String)","com.google.common.primitives.Longs.tryParse(String)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"DOC_UPDATE","JAVADOC: /**
   * Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite
   * the change to {@link Long#parseLong(String, int)} for that version.
   *
   * @param string the string representation of an long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0
   */","METHOD: com.google.common.primitives.Longs.tryParse(String,int)","com.google.common.primitives.Longs.tryParse(String,int)","NONE"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_INSERT","RETURN_STATEMENT: String.valueOf(o);","BODY: ","com.google.common.base.Strings.lenientToString(Object)","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: "null";","THEN_STATEMENT: (o == null)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","IF_STATEMENT: (o == null)","METHOD: com.google.common.base.Strings.lenientToString(Object)","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_DELETE","RETURN_STATEMENT: o.toString();","BODY: ","com.google.common.base.Strings.lenientToString(Object)","MEDIUM"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.checkGwtRpcEnabled()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","SWITCH_CASE: READY","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
7,b21d5719e6a0ce6f4e2f71eec09bf55908ede062,"STATEMENT_ORDERING_CHANGE","RETURN_STATEMENT: true;","SWITCH_STATEMENT: state","com.google.common.base.AbstractIterator.hasNext()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesPresentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesPresent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesAbsent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesAbsentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Map.Entry<Foo, Integer> entry:map.entrySet()","METHOD: com.google.common.collect.WellBehavedMapTest.testEntry_setValue()","com.google.common.collect.WellBehavedMapTest.testEntry_setValue()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();","METHOD: com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);","METHOD: com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_overlapping()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_general()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_connectedAdjacentYieldsEmpty()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testColumnPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testRowPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_plusforspace()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_badchars()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort3 = HostAndPort.fromString("[foo::123]:80");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(hpNoPort1, hpNoPort2, hpNoPort3, hpNoPort4, hpNoPort5).addEqualityGroup(hpWithPort1, hpWithPort2, hpWithPort3).testEquals();","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheBuilderTest.testMaximumSize_largerThanInt()","CLASS: com.google.common.cache.CacheBuilderTest","com.google.common.cache.CacheBuilderTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<?> f = FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);","BODY: ","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isInstanceOf(TimeoutException.class);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","CLASS: com.google.common.util.concurrent.FluentFutureTest","com.google.common.util.concurrent.FluentFutureTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(executionException).hasCauseThat().isEqualTo(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(failureCause);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FuturesGetDoneTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_INSERT","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture<V>","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(e);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(e));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(unit);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get(timeout, unit);","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new AssertionError("Unreachable");","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get();","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(error));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: error","PARAMETERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.error = checkNotNull(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.runtime = null;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isCancelled()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwOnGet()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isDone()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.cancel(boolean)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.addListener(Runnable,Executor)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.incomplete()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.rethrow(ExecutionException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(Error)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.runtime : RuntimeException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.error : Error","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture.WrapperException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("1.0");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("UP");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(false, 1.0, RoundingMode.UP);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(true, 1.0, RoundingMode.UP);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(input).matches(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","METHOD: com.google.common.primitives.DoublesTest.checkTryParse(double,String)","com.google.common.primitives.DoublesTest.checkTryParse(double,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(badInput).doesNotMatch(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","FOREACH_STATEMENT: String badInput:BAD_TRY_PARSE_INPUTS","com.google.common.primitives.DoublesTest.testTryParseFailures()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");","CATCH_CLAUSE: ClusterException","com.google.common.testing.TearDownStackTest.testThrowingTearDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testPatternSplitLookBehind()","com.google.common.base.SplitterTest.testPatternSplitLookBehind()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_varyingTrimLevels()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testLimit1Separator()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString_gwtFriendly()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.base.StringsTest.ThrowsOnToString","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("message");","CATCH_CLAUSE: VerifyException","com.google.common.base.VerifyTest.testVerify_simpleMessage_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");","METHOD: com.google.common.base.VerifyTest.checkMessage(Exception)","com.google.common.base.VerifyTest.checkMessage(Exception)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagate_NoneDeclared_CheckedThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeOtherCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagateIfInstanceOf_UndeclaredThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Integer javaVersion = Ints.tryParse(JAVA_SPECIFICATION_VERSION.value());","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // TODO(b/64442212): Remove this guard once lazyStackTrace() works in Java 9+.","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((javaVersion != null) && (javaVersion >= 9))","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesPresentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesPresent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesAbsent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesAbsentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: wrappedHashMapTests(new WrappedHashMapGenerator() {
  @Override Map<String, String> wrap(final HashMap<String, String> map) {
    if (map.containsValue(null))
        {
          throw new NullPointerException();
        }
    return new AbstractMap<String, String>() {
  class EntrySet extends AbstractSet<Map.Entry<String, String>> {
    EntrySet() {
      super();
    }
    public @Override Iterator<Entry<String, String>> iterator() {
      return new Iterator<Entry<String, String>>() {
  final Iterator<Entry<String, String>> iterator = map.entrySet().iterator();
  public @Override void remove() {
    iterator.remove();
  }
  public @Override boolean hasNext() {
    return iterator.hasNext();
  }
  public @Override Entry<String, String> next() {
    return transform(iterator.next());
  }
  private Entry<String, String> transform(final Entry<String, String> next) {
    return new Entry<String, String>() {
  public @Override String setValue(String value) {
    checkNotNull(value);
    return next.setValue(value);
  }
  public @Override String getValue() {
    return next.getValue();
  }
  public @Override String getKey() {
    return next.getKey();
  }
  public @Override boolean equals(Object obj) {
    return next.equals(obj);
  }
  public @Override int hashCode() {
    return next.hashCode();
  }
};
  }
};
    }
    public @Override int size() {
      return map.size();
    }
    public @Override boolean remove(Object o) {
      return map.entrySet().remove(o);
    }
    public @Override boolean containsAll(Collection<?> c) {
      return map.entrySet().containsAll(c);
    }
    public @Override boolean removeAll(Collection<?> c) {
      return map.entrySet().removeAll(c);
    }
    public @Override boolean retainAll(Collection<?> c) {
      return map.entrySet().retainAll(c);
    }
    public @Override int hashCode() {
      return map.entrySet().hashCode();
    }
    public @Override boolean equals(Object o) {
      return map.entrySet().equals(o);
    }
    public @Override String toString() {
      return map.entrySet().toString();
    }
  }
  public @Override Set<Entry<String, String>> entrySet() {
    return new EntrySet();
  }
  public @Override int hashCode() {
    return map.hashCode();
  }
  public @Override boolean equals(Object o) {
    return map.equals(o);
  }
  public @Override String toString() {
    return map.toString();
  }
  public @Override String remove(Object key) {
    return map.remove(key);
  }
  public @Override String put(String key, String value) {
    checkNotNull(value);
    return map.put(key, value);
  }
};
  }
}, "HashMap w/out null values", ALLOWS_NULL_KEYS);","METHOD: com.google.common.collect.testing.MapTestSuiteBuilderTests.testsForHashMapNullValuesForbidden()","com.google.common.collect.testing.MapTestSuiteBuilderTests.testsForHashMapNullValuesForbidden()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: asList(MapEntrySetTester.getSetValueMethod(), MapEntrySetTester.getSetValueWithNullValuesAbsentMethod(), MapEntrySetTester.getSetValueWithNullValuesPresentMethod());","METHOD: com.google.common.collect.testing.TestsForMapsInJavaUtil.suppressForConcurrentSkipListMap()","com.google.common.collect.testing.TestsForMapsInJavaUtil.suppressForConcurrentSkipListMap()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Map.Entry<Foo, Integer> entry:map.entrySet()","METHOD: com.google.common.collect.WellBehavedMapTest.testEntry_setValue()","com.google.common.collect.WellBehavedMapTest.testEntry_setValue()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();","METHOD: com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);","METHOD: com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_overlapping()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_general()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_connectedAdjacentYieldsEmpty()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testColumnPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testRowPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(IntentionalException.class);","CATCH_CLAUSE: InvocationTargetException","com.google.common.eventbus.SubscriberTest.testInvokeSubscriberMethod_exceptionWrapping()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableBiMap<String, String> specialCases = ImmutableBiMap.of("ETAG", "ETag", "SOURCE_MAP", "SourceMap", "X_WEBKIT_CSP", "X-WebKit-CSP", "X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);","CATCH_CLAUSE: ParseException","com.google.common.net.HostSpecifierTest.assertBad(String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_plusforspace()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_badchars()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort3 = HostAndPort.fromString("[foo::123]:80");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(hpNoPort1, hpNoPort2, hpNoPort3, hpNoPort4, hpNoPort5).addEqualityGroup(hpWithPort1, hpWithPort2, hpWithPort3).testEquals();","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: UncheckedExecutionException","CATCH_CLAUSES: ","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertSame(e, uee.getCause());","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(uee).hasCauseThat().isSameAs(e);","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: UncheckedExecutionException","CATCH_CLAUSES: ","com.google.common.cache.NullCacheTest.testGet_runtimeException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheBuilderTest.testMaximumSize_largerThanInt()","CLASS: com.google.common.cache.CacheBuilderTest","com.google.common.cache.CacheBuilderTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: keys.toArray((Object[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testKeySet_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: entries.toArray((Entry<Object, Object>[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testEntrySet_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: values.toArray((Object[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testValues_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(message);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.ListenableFutureTester.testFailedFuture(String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<?> f = FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);","BODY: ","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isInstanceOf(TimeoutException.class);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","CLASS: com.google.common.util.concurrent.FluentFutureTest","com.google.common.util.concurrent.FluentFutureTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(executionException).hasCauseThat().isEqualTo(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractScheduledServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(service.failureCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRunAndThenAgainOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRunAndThenAgainOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("kaboom!");","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnShutDown()","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("kaboom!");","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(service.failureCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRun()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRun()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStopAndWait_runThrowing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_runFailing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_runFailing()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("1");","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().hasMessageThat().isEqualTo("1");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStartAndWait()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailureCause_throwsIfNotFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailureCause_throwsIfNotFailed()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(exception.get()).hasCauseThat().isEqualTo(EXCEPTION);","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testAwaitTerminated_FailedService()","com.google.common.util.concurrent.AbstractServiceTest.testAwaitTerminated_FailedService()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isNull();","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.stopping(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo((("Expected the service " + service) + " to be RUNNING, but was STOPPING"));","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.stopping(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(failure, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(failure, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(failure);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(failure);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isNull();","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.terminated(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo((("Expected the service " + service) + " to be RUNNING, but was TERMINATED"));","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.terminated(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_stopFailing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_stopFailing()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStopAndWait_stopThrowing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStartAndWait()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStartAndWait()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(failureCause);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FuturesGetDoneTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testNotifyStoppedAfterFailure()","CLASS: com.google.common.util.concurrent.ServiceManagerTest","com.google.common.util.concurrent.ServiceManagerTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testDoCancelStart()","CLASS: com.google.common.util.concurrent.ServiceManagerTest","com.google.common.util.concurrent.ServiceManagerTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractIdleServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStart_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStart_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStop_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStop_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","SWITCH_CASE: default","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: new UndeclaredThrowableException(EXCEPTION);","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","SWITCH_CASE: EXCEPTION_DATA","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: EXCEPTION;","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertSame(e, ee.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(ee).hasCauseThat().isSameAs(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.SettableFutureTest.testSetException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","IF_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: new UndeclaredThrowableException(EXCEPTION);","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: WRAPPED_EXCEPTION;","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","IF_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: listener.assertException(WRAPPED_EXCEPTION);","METHOD: com.google.common.util.concurrent.FuturesTransformTest.testFutureGetThrowsFunctionException()","com.google.common.util.concurrent.FuturesTransformTest.testFutureGetThrowsFunctionException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.FuturesTransformTest.WRAPPED_EXCEPTION : UndeclaredThrowableException","CLASS: com.google.common.util.concurrent.FuturesTransformTest","com.google.common.util.concurrent.FuturesTransformTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new URLClassLoader(ClassPathUtil.getClassPathUrls(), classLoader) {
  public @Override Class<?> loadClass(String name) throws ClassNotFoundException {
    if (disallowedClassNames.contains(name))
        {
          throw new ClassNotFoundException("I\'m sorry Dave, I\'m afraid I can\'t do that.");
        }
    if (name.startsWith(concurrentPackage))
        {
          Class<?> c = findLoadedClass(name);
          if ((c == null))
              {
                return super.findClass(name);
              }
          return c;
        }
    return super.loadClass(name);
  }
};","METHOD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: blacklist","PARAMETERS: ","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_DELETE","PARAMETER: disallowedClassNames","PARAMETERS: ","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},
   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy.
   */","FIELD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_ATOMIC_REFERENCE_FIELD_UPDATER : ClassLoader","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_ATOMIC_REFERENCE_FIELD_UPDATER : ClassLoader","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our
   * preferred strategy {@code UnsafeAtomicHelper}.
   */","FIELD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_UNSAFE : ClassLoader","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_UNSAFE : ClassLoader","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new URLClassLoader(ClassPathUtil.getClassPathUrls(), classLoader) {
  public @Override Class<?> loadClass(String name) throws ClassNotFoundException {
    if (blocklist.contains(name))
        {
          throw new ClassNotFoundException("I\'m sorry Dave, I\'m afraid I can\'t do that.");
        }
    if (name.startsWith(concurrentPackage))
        {
          Class<?> c = findLoadedClass(name);
          if ((c == null))
              {
                return super.findClass(name);
              }
          return c;
        }
    return super.loadClass(name);
  }
};","METHOD: com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: blocklist","PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_INSERT","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture<V>","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(e);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(e));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(unit);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get(timeout, unit);","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new AssertionError("Unreachable");","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get();","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(error));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: error","PARAMETERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.error = checkNotNull(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.runtime = null;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isCancelled()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwOnGet()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isDone()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.cancel(boolean)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.addListener(Runnable,Executor)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.incomplete()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.rethrow(ExecutionException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(Error)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.runtime : RuntimeException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.error : Error","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture.WrapperException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Murmur3Hash32Test.testKnownUtf8StringInputs()","CLASS: com.google.common.hash.Murmur3Hash32Test","com.google.common.hash.Murmur3Hash32Test","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("readLine is not supported");","CATCH_CLAUSE: UnsupportedOperationException","com.google.common.io.LittleEndianDataInputStreamTest.testReadLine()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readFullyAndThenSome()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not supported");","CATCH_CLAUSE: IOException","com.google.common.io.ByteStreamsTest.testLimit_markNotSupported()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readByte()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readUnsignedByte()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not set");","CATCH_CLAUSE: IOException","com.google.common.io.ByteStreamsTest.testLimit_markNotSet()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not supported");","CATCH_CLAUSE: IOException","com.google.common.io.CountingInputStreamTest.testMarkNotSupported()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not set");","CATCH_CLAUSE: IOException","com.google.common.io.CountingInputStreamTest.testMarkNotSet()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_copiesNetworkBuilder()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_addNode()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_appliesNetworkBuilderConfig()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N2N1 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N1N2 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.removeEdge_directed_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.putEdgeValue_directed_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.removeEdge_undirected_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.putEdgeValue_undirected_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_INSERT","LINE_COMMENT: // equal to unordered(N1, N2)","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_INSERT","LINE_COMMENT: // graph not directed","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // unordered endpoints not OK for directed graph (undefined behavior)","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // wrong order","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // edge not present","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: directedGraph.putEdge(N1, N1);","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: directedGraph.putEdge(N1, N2);","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<EndpointPair<Integer>> edges = directedGraph.edges();","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).contains(EndpointPair.ordered(N1, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).contains(EndpointPair.ordered(N1, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.unordered(N1, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N3, N4));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_undirected_contains()","CLASS: com.google.common.graph.EndpointPairTest","com.google.common.graph.EndpointPairTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_PARALLEL_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /** Tests for {@link ImmutableGraph}. */","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.copyOfImmutableValueGraph_optimized()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableValueGraph()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_addNode()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_appliesGraphBuilderConfig()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_copiesGraphBuilder()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(putEdge(N1, N2)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingNodes()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.removeEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_backwards()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("1.0");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("UP");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(false, 1.0, RoundingMode.UP);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(true, 1.0, RoundingMode.UP);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(input).matches(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","METHOD: com.google.common.primitives.DoublesTest.checkTryParse(double,String)","com.google.common.primitives.DoublesTest.checkTryParse(double,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(badInput).doesNotMatch(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","FOREACH_STATEMENT: String badInput:BAD_TRY_PARSE_INPUTS","com.google.common.primitives.DoublesTest.testTryParseFailures()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFailure(Runnable.class, new Function<Runnable, Runnable>() {
  public @Override Runnable apply(final Runnable runnable) {
    return new ForwardingRunnable(runnable) {
  public @SuppressWarnings("EqualsHashCode") @Override boolean equals(Object o) {
    if ((o instanceof ForwardingRunnable))
        {
          ForwardingRunnable that = (ForwardingRunnable) o;
          return runnable.equals(that.runnable);
        }
    return false;
  }
};
  }
}, "Runnable");","METHOD: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest.testFailsToForwardHashCode()","com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest.testFailsToForwardHashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");","CATCH_CLAUSE: ClusterException","com.google.common.testing.TearDownStackTest.testThrowingTearDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testPatternSplitLookBehind()","com.google.common.base.SplitterTest.testPatternSplitLookBehind()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_varyingTrimLevels()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testLimit1Separator()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString_gwtFriendly()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.base.StringsTest.ThrowsOnToString","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.WhitespaceMatcherBenchmark.main(String[])","CLASS: com.google.common.base.WhitespaceMatcherBenchmark","com.google.common.base.WhitespaceMatcherBenchmark","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("message");","CATCH_CLAUSE: VerifyException","com.google.common.base.VerifyTest.testVerify_simpleMessage_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");","METHOD: com.google.common.base.VerifyTest.checkMessage(Exception)","com.google.common.base.VerifyTest.checkMessage(Exception)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagate_NoneDeclared_CheckedThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeOtherCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagateIfInstanceOf_UndeclaredThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Integer javaVersion = Ints.tryParse(JAVA_SPECIFICATION_VERSION.value());","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // TODO(b/64442212): Remove this guard once lazyStackTrace() works in Java 9+.","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((javaVersion != null) && (javaVersion >= 9))","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9OrHigher()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArray()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayEnd()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayStart()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((existingValue == null), "duplicate key: (%s, %s)", rowKey, columnKey);","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_MOZ : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.EARLY_DATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_USER : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.REPORT_TO : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SOURCE_MAP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_TRIAL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_SITE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_MODE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_DEST : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_METADATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/WebP">WebP image format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WEBP : MediaType","com.google.common.net.MediaType.WEBP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>,
   * compressed using the ZIP format into KMZ archives.
   */","FIELD: com.google.common.net.MediaType.KMZ : MediaType","com.google.common.net.MediaType.KMZ : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * {@code skp} files produced by the 3D Modeling software <a
   * href="https://www.sketchup.com/">SketchUp</a>
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.SKETCHUP : MediaType","com.google.common.net.MediaType.SKETCHUP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Powerpoint</a> presentations. */","FIELD: com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * UTF-8 encoded <a href="https://en.wikipedia.org/wiki/Wireless_Markup_Language">Wireless Markup
   * Language</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WML_UTF_8 : MediaType","com.google.common.net.MediaType.WML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Excel</a> spreadsheets. */","FIELD: com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/BMP_file_format">Bitmap file format</a> ({@code bmp}
   * files).
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.BMP : MediaType","com.google.common.net.MediaType.BMP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>.
   */","FIELD: com.google.common.net.MediaType.KML : MediaType","com.google.common.net.MediaType.KML : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/RDF/XML">RDF/XML</a> documents, which are XML
   * serializations of <a
   * href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description
   * Framework</a> graphs.
   *
   * @since 14.0
   */","FIELD: com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * The <a href="https://tools.ietf.org/html/rfc4155">mbox database format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.MBOX : MediaType","com.google.common.net.MediaType.MBOX : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Word</a> documents. */","FIELD: com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HAL_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.WASM_APPLICATION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MICROSOFT_OUTLOOK : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: Objects.hashCode(host, port);","METHOD: com.google.common.net.HostAndPort.hashCode()","com.google.common.net.HostAndPort.hashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: (Objects.equal(this.host, that.host) && (this.port == that.port));","THEN_STATEMENT: (other instanceof HostAndPort)","com.google.common.net.HostAndPort.equals(Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: boolean unused = addCausalChain(seen, tryInternalFastPathGetFailure());","THEN_STATEMENT: (! isCancelled())","com.google.common.util.concurrent.AggregateFuture.RunningState.addInitialException(Set<Throwable>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFuture.from(FluentFuture<V>)","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTask","com.google.common.util.concurrent.TrustedListenableFutureTask","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(callable.call(), StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
     * Called when the service transitions to the {@linkplain State#TERMINATED TERMINATED} state.
     * The {@linkplain State#TERMINATED TERMINATED} state is a terminal state in the transition
     * diagram. Therefore, if this method is called, no other methods will be called on the {@link
     * Listener}.
     *
     * @param from The previous state that is being transitioned from. Failure can occur in any
     *     state with the exception of {@linkplain State#FAILED FAILED} and {@linkplain
     *     State#TERMINATED TERMINATED}.
     */","METHOD: com.google.common.util.concurrent.Service.Listener.terminated(State)","com.google.common.util.concurrent.Service.Listener.terminated(State)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(result, StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A synchronization abstraction supporting waiting on arbitrary boolean conditions.
 *
 * <p>This class is intended as a replacement for {@link ReentrantLock}. Code using {@code Monitor}
 * is less error-prone and more readable than code using {@code ReentrantLock}, without significant
 * performance loss. {@code Monitor} even has the potential for performance gain by optimizing the
 * evaluation and signaling of conditions. Signaling is entirely <a
 * href="http://en.wikipedia.org/wiki/Monitor_(synchronization)#Implicit_signaling">implicit</a>. By
 * eliminating explicit signaling, this class can guarantee that only one thread is awakened when a
 * condition becomes true (no "signaling storms" due to use of {@link
 * java.util.concurrent.locks.Condition#signalAll Condition.signalAll}) and that no signals are lost
 * (no "hangs" due to incorrect use of {@link java.util.concurrent.locks.Condition#signal
 * Condition.signal}).
 *
 * <p>A thread is said to <i>occupy</i> a monitor if it has <i>entered</i> the monitor but not yet
 * <i>left</i>. Only one thread may occupy a given monitor at any moment. A monitor is also
 * reentrant, so a thread may enter a monitor any number of times, and then must leave the same
 * number of times. The <i>enter</i> and <i>leave</i> operations have the same synchronization
 * semantics as the built-in Java language synchronization primitives.
 *
 * <p>A call to any of the <i>enter</i> methods with <b>void</b> return type should always be
 * followed immediately by a <i>try/finally</i> block to ensure that the current thread leaves the
 * monitor cleanly:
 *
 * <pre>{@code
 * monitor.enter();
 * try {
 *   // do things while occupying the monitor
 * } finally {
 *   monitor.leave();
 * }
 * }</pre>
 *
 * <p>A call to any of the <i>enter</i> methods with <b>boolean</b> return type should always appear
 * as the condition of an <i>if</i> statement containing a <i>try/finally</i> block to ensure that
 * the current thread leaves the monitor cleanly:
 *
 * <pre>{@code
 * if (monitor.tryEnter()) {
 *   try {
 *     // do things while occupying the monitor
 *   } finally {
 *     monitor.leave();
 *   }
 * } else {
 *   // do other things since the monitor was not available
 * }
 * }</pre>
 *
 * <h2>Comparison with {@code synchronized} and {@code ReentrantLock}</h2>
 *
 * <p>The following examples show a simple threadsafe holder expressed using {@code synchronized},
 * {@link ReentrantLock}, and {@code Monitor}.
 *
 * <h3>{@code synchronized}</h3>
 *
 * <p>This version is the fewest lines of code, largely because the synchronization mechanism used
 * is built into the language and runtime. But the programmer has to remember to avoid a couple of
 * common bugs: The {@code wait()} must be inside a {@code while} instead of an {@code if}, and
 * {@code notifyAll()} must be used instead of {@code notify()} because there are two different
 * logical conditions being awaited.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *
 *   public synchronized V get() throws InterruptedException {
 *     while (value == null) {
 *       wait();
 *     }
 *     V result = value;
 *     value = null;
 *     notifyAll();
 *     return result;
 *   }
 *
 *   public synchronized void set(V newValue) throws InterruptedException {
 *     while (value != null) {
 *       wait();
 *     }
 *     value = newValue;
 *     notifyAll();
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code ReentrantLock}</h3>
 *
 * <p>This version is much more verbose than the {@code synchronized} version, and still suffers
 * from the need for the programmer to remember to use {@code while} instead of {@code if}. However,
 * one advantage is that we can introduce two separate {@code Condition} objects, which allows us to
 * use {@code signal()} instead of {@code signalAll()}, which may be a performance benefit.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final ReentrantLock lock = new ReentrantLock();
 *   private final Condition valuePresent = lock.newCondition();
 *   private final Condition valueAbsent = lock.newCondition();
 *
 *   public V get() throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value == null) {
 *         valuePresent.await();
 *       }
 *       V result = value;
 *       value = null;
 *       valueAbsent.signal();
 *       return result;
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value != null) {
 *         valueAbsent.await();
 *       }
 *       value = newValue;
 *       valuePresent.signal();
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code Monitor}</h3>
 *
 * <p>This version adds some verbosity around the {@code Guard} objects, but removes that same
 * verbosity, and more, from the {@code get} and {@code set} methods. {@code Monitor} implements the
 * same efficient signaling as we had to hand-code in the {@code ReentrantLock} version above.
 * Finally, the programmer no longer has to hand-code the wait loop, and therefore doesn't have to
 * remember to use {@code while} instead of {@code if}.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final Monitor monitor = new Monitor();
 *   private final Monitor.Guard valuePresent = monitor.newGuard(() -> value != null);
 *   private final Monitor.Guard valueAbsent = monitor.newGuard(() -> value == null);
 *
 *   public V get() throws InterruptedException {
 *     monitor.enterWhen(valuePresent);
 *     try {
 *       V result = value;
 *       value = null;
 *       return result;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     monitor.enterWhen(valueAbsent);
 *     try {
 *       value = newValue;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 * }
 * }</pre>
 *
 * @author Justin T. Sampson
 * @author Martin Buchholz
 * @since 10.0
 */","CLASS: com.google.common.util.concurrent.Monitor","com.google.common.util.concurrent.Monitor","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: Throwables.propagate(throwable);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.Monitor.isSatisfied(Guard)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: throwable;","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.Monitor.isSatisfied(Guard)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableValueGraph.putEdgeValue(EndpointPair<N>,V)","CLASS: com.google.common.graph.MutableValueGraph","com.google.common.graph.MutableValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableValueGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableValueGraph","com.google.common.graph.MutableValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractNetwork.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    if (allowsParallelEdges())
        {
          return super.edges();
        }
    return new AbstractSet<EndpointPair<N>>() {
  public @Override Iterator<EndpointPair<N>> iterator() {
    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {
  public @Override EndpointPair<N> apply(E edge) {
    return incidentNodes(edge);
  }
});
  }
  public @Override int size() {
    return AbstractNetwork.this.edges().size();
  }
  public @SuppressWarnings("unchecked") @Override boolean contains(@NullableDecl Object obj) {
    if ((! (obj instanceof EndpointPair)))
        {
          return false;
        }
    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
    return ((isOrderingCompatible(endpointPair) && nodes().contains(endpointPair.nodeU())) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV()));
  }
};
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractNetwork.this.nodeOrder();
  }
  public @Override boolean isDirected() {
    return AbstractNetwork.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractNetwork.this.allowsSelfLoops();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractNetwork.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractNetwork.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractNetwork.this.successors(node);
  }
};","METHOD: com.google.common.graph.AbstractNetwork.asGraph()","com.google.common.graph.AbstractNetwork.asGraph()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.validateEndpoints(EndpointPair<?>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.isOrderingCompatible(EndpointPair<?>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableValueGraph.Builder","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * Adds {@code edge} connecting {@code nodeU} to {@code nodeV}.
   *
   * <p>If the graph is directed, {@code edge} will be directed in this graph; otherwise, it will be
   * undirected.
   *
   * <p><b>{@code edge} must be unique to this graph</b>, just as a {@code Map} key must be. It must
   * also be non-null.
   *
   * <p>If {@code nodeU} and {@code nodeV} are not already present in this graph, this method will
   * silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the graph.
   *
   * <p>If {@code edge} already connects {@code nodeU} to {@code nodeV} (in the specified order if
   * this network {@link #isDirected()}, else in any order), then this method will have no effect.
   *
   * @return {@code true} if the network was modified as a result of this call
   * @throws IllegalArgumentException if {@code edge} already exists in the graph and does not
   *     connect {@code nodeU} to {@code nodeV}
   * @throws IllegalArgumentException if the introduction of the edge would violate {@link
   *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}
   */","METHOD: com.google.common.graph.MutableNetwork.addEdge(N,N,E)","com.google.common.graph.MutableNetwork.addEdge(N,N,E)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableNetwork.addEdge(EndpointPair<N>,E)","CLASS: com.google.common.graph.MutableNetwork","com.google.common.graph.MutableNetwork","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableGraph.Builder","CLASS: com.google.common.graph.ImmutableGraph","com.google.common.graph.ImmutableGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableNetwork.Builder","CLASS: com.google.common.graph.ImmutableNetwork","com.google.common.graph.ImmutableNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableGraph.putEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableGraph","com.google.common.graph.MutableGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableGraph","com.google.common.graph.MutableGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH : String","CLASS: com.google.common.graph.GraphConstants","com.google.common.graph.GraphConstants","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRange(boolean)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,RoundingMode)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs(((z > (MIN_INT_AS_DOUBLE - 1.0)) & (z < (MAX_INT_AS_DOUBLE + 1.0))), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs((((MIN_LONG_AS_DOUBLE - z) < 1.0) & (z < MAX_LONG_AS_DOUBLE_PLUS_ONE)), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:\\p{XDigit}++(?:\\.\\p{XDigit}*+)?|\\.\\p{XDigit}++)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * We use # instead of * for possessive quantifiers. This lets us strip them out when building
     * the regex for RE2 (which doesn't support them) but leave them in when building it for
     * java.util.regex (where we want them in order to avoid catastrophic backtracking).
     */","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: fpPattern = fpPattern.replace("#", "+");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String decimal = "(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeDec = (decimal + "(?:[eE][+-]?\\d+#)?[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeHex = (("0[xX]" + hex) + "[pP][+-]?\\d+#[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: java.util.regex.Pattern.compile(fpPattern);","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ATTRIBUTE_TYPE_CHANGE","QUALIFIED_TYPE: java.util.regex.Pattern","FIELD: com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : java.util.regex.Pattern","com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : Pattern","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 *   void exampleBadCaller() {
 *     double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (reference == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("end index (%s) must not be less than start index (%s)", end, start);","METHOD: com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkState(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must be less than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be greater than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Preconditions.format(String,Object...)","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientToString(Object)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientFormat(String,Object...)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.JdkPattern.hashCode()","CLASS: com.google.common.base.JdkPattern","com.google.common.base.JdkPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.JdkPattern.equals(Object)","CLASS: com.google.common.base.JdkPattern","com.google.common.base.JdkPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.PatternCompiler.isPcreLike()","CLASS: com.google.common.base.PatternCompiler","com.google.common.base.PatternCompiler","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.hashCode()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.equals(Object)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.compile(String)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.isPcreLike()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ASCII : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.NONE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ANY : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_ISO_CONTROL : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.INVISIBLE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.BREAKING_WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LOWER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_UPPER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.SINGLE_WIDTH : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */","CLASS: com.google.common.base.Verify","com.google.common.base.Verify","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArray()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayEnd()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayStart()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((existingValue == null), "duplicate key: (%s, %s)", rowKey, columnKey);","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_MOZ : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.EARLY_DATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_USER : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.REPORT_TO : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SOURCE_MAP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_TRIAL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_SITE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_MODE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_DEST : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_METADATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/WebP">WebP image format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WEBP : MediaType","com.google.common.net.MediaType.WEBP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>,
   * compressed using the ZIP format into KMZ archives.
   */","FIELD: com.google.common.net.MediaType.KMZ : MediaType","com.google.common.net.MediaType.KMZ : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * {@code skp} files produced by the 3D Modeling software <a
   * href="https://www.sketchup.com/">SketchUp</a>
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.SKETCHUP : MediaType","com.google.common.net.MediaType.SKETCHUP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Powerpoint</a> presentations. */","FIELD: com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * UTF-8 encoded <a href="https://en.wikipedia.org/wiki/Wireless_Markup_Language">Wireless Markup
   * Language</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WML_UTF_8 : MediaType","com.google.common.net.MediaType.WML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Excel</a> spreadsheets. */","FIELD: com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/BMP_file_format">Bitmap file format</a> ({@code bmp}
   * files).
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.BMP : MediaType","com.google.common.net.MediaType.BMP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>.
   */","FIELD: com.google.common.net.MediaType.KML : MediaType","com.google.common.net.MediaType.KML : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/RDF/XML">RDF/XML</a> documents, which are XML
   * serializations of <a
   * href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description
   * Framework</a> graphs.
   *
   * @since 14.0
   */","FIELD: com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * The <a href="https://tools.ietf.org/html/rfc4155">mbox database format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.MBOX : MediaType","com.google.common.net.MediaType.MBOX : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Word</a> documents. */","FIELD: com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HAL_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.WASM_APPLICATION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MICROSOFT_OUTLOOK : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: Objects.hashCode(host, port);","METHOD: com.google.common.net.HostAndPort.hashCode()","com.google.common.net.HostAndPort.hashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: (Objects.equal(this.host, that.host) && (this.port == that.port));","THEN_STATEMENT: (other instanceof HostAndPort)","com.google.common.net.HostAndPort.equals(Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: boolean unused = addCausalChain(seen, tryInternalFastPathGetFailure());","THEN_STATEMENT: (! isCancelled())","com.google.common.util.concurrent.AggregateFuture.RunningState.addInitialException(Set<Throwable>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFuture.from(FluentFuture<V>)","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTask","com.google.common.util.concurrent.TrustedListenableFutureTask","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(callable.call(), StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(result, StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRange(boolean)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,RoundingMode)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs(((z > (MIN_INT_AS_DOUBLE - 1.0)) & (z < (MAX_INT_AS_DOUBLE + 1.0))), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs((((MIN_LONG_AS_DOUBLE - z) < 1.0) & (z < MAX_LONG_AS_DOUBLE_PLUS_ONE)), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:\\p{XDigit}++(?:\\.\\p{XDigit}*+)?|\\.\\p{XDigit}++)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * We use # instead of * for possessive quantifiers. This lets us strip them out when building
     * the regex for RE2 (which doesn't support them) but leave them in when building it for
     * java.util.regex (where we want them in order to avoid catastrophic backtracking).
     */","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: fpPattern = fpPattern.replace("#", "+");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String decimal = "(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeDec = (decimal + "(?:[eE][+-]?\\d+#)?[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeHex = (("0[xX]" + hex) + "[pP][+-]?\\d+#[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: java.util.regex.Pattern.compile(fpPattern);","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ATTRIBUTE_TYPE_CHANGE","QUALIFIED_TYPE: java.util.regex.Pattern","FIELD: com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : java.util.regex.Pattern","com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : Pattern","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 *   void exampleBadCaller() {
 *     double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (reference == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("end index (%s) must not be less than start index (%s)", end, start);","METHOD: com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkState(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must be less than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be greater than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Preconditions.format(String,Object...)","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientToString(Object)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientFormat(String,Object...)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.hashCode()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.equals(Object)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.compile(String)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.isPcreLike()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ASCII : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.NONE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ANY : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_ISO_CONTROL : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.INVISIBLE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.BREAKING_WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LOWER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_UPPER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.SINGLE_WIDTH : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */","CLASS: com.google.common.base.Verify","com.google.common.base.Verify","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArray()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayEnd()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayStart()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((existingValue == null), "duplicate key: (%s, %s)", rowKey, columnKey);","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_MOZ : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.EARLY_DATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_USER : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.REPORT_TO : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SOURCE_MAP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_TRIAL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_SITE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_MODE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_DEST : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_METADATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/WebP">WebP image format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WEBP : MediaType","com.google.common.net.MediaType.WEBP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>,
   * compressed using the ZIP format into KMZ archives.
   */","FIELD: com.google.common.net.MediaType.KMZ : MediaType","com.google.common.net.MediaType.KMZ : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * {@code skp} files produced by the 3D Modeling software <a
   * href="https://www.sketchup.com/">SketchUp</a>
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.SKETCHUP : MediaType","com.google.common.net.MediaType.SKETCHUP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Powerpoint</a> presentations. */","FIELD: com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * UTF-8 encoded <a href="https://en.wikipedia.org/wiki/Wireless_Markup_Language">Wireless Markup
   * Language</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WML_UTF_8 : MediaType","com.google.common.net.MediaType.WML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Excel</a> spreadsheets. */","FIELD: com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/BMP_file_format">Bitmap file format</a> ({@code bmp}
   * files).
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.BMP : MediaType","com.google.common.net.MediaType.BMP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>.
   */","FIELD: com.google.common.net.MediaType.KML : MediaType","com.google.common.net.MediaType.KML : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/RDF/XML">RDF/XML</a> documents, which are XML
   * serializations of <a
   * href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description
   * Framework</a> graphs.
   *
   * @since 14.0
   */","FIELD: com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * The <a href="https://tools.ietf.org/html/rfc4155">mbox database format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.MBOX : MediaType","com.google.common.net.MediaType.MBOX : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Word</a> documents. */","FIELD: com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HAL_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.WASM_APPLICATION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MICROSOFT_OUTLOOK : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: Objects.hashCode(host, port);","METHOD: com.google.common.net.HostAndPort.hashCode()","com.google.common.net.HostAndPort.hashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: (Objects.equal(this.host, that.host) && (this.port == that.port));","THEN_STATEMENT: (other instanceof HostAndPort)","com.google.common.net.HostAndPort.equals(Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: boolean unused = addCausalChain(seen, tryInternalFastPathGetFailure());","THEN_STATEMENT: (! isCancelled())","com.google.common.util.concurrent.AggregateFuture.RunningState.addInitialException(Set<Throwable>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFuture.from(FluentFuture<V>)","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTask","com.google.common.util.concurrent.TrustedListenableFutureTask","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(callable.call(), StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(result, StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRange(boolean)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,RoundingMode)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs(((z > (MIN_INT_AS_DOUBLE - 1.0)) & (z < (MAX_INT_AS_DOUBLE + 1.0))), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs((((MIN_LONG_AS_DOUBLE - z) < 1.0) & (z < MAX_LONG_AS_DOUBLE_PLUS_ONE)), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:\\p{XDigit}++(?:\\.\\p{XDigit}*+)?|\\.\\p{XDigit}++)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * We use # instead of * for possessive quantifiers. This lets us strip them out when building
     * the regex for RE2 (which doesn't support them) but leave them in when building it for
     * java.util.regex (where we want them in order to avoid catastrophic backtracking).
     */","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: fpPattern = fpPattern.replace("#", "+");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String decimal = "(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeDec = (decimal + "(?:[eE][+-]?\\d+#)?[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeHex = (("0[xX]" + hex) + "[pP][+-]?\\d+#[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: java.util.regex.Pattern.compile(fpPattern);","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ATTRIBUTE_TYPE_CHANGE","QUALIFIED_TYPE: java.util.regex.Pattern","FIELD: com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : java.util.regex.Pattern","com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : Pattern","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 *   void exampleBadCaller() {
 *     double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (reference == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("end index (%s) must not be less than start index (%s)", end, start);","METHOD: com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkState(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must be less than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be greater than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Preconditions.format(String,Object...)","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientToString(Object)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientFormat(String,Object...)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.hashCode()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.equals(Object)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.compile(String)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.isPcreLike()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ASCII : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.NONE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ANY : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_ISO_CONTROL : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.INVISIBLE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.BREAKING_WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LOWER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_UPPER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.SINGLE_WIDTH : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */","CLASS: com.google.common.base.Verify","com.google.common.base.Verify","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesPresentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesPresent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesAbsent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesAbsentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Map.Entry<Foo, Integer> entry:map.entrySet()","METHOD: com.google.common.collect.WellBehavedMapTest.testEntry_setValue()","com.google.common.collect.WellBehavedMapTest.testEntry_setValue()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry1 = Iterables.getOnlyElement(map.entrySet());","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry2 = Iterables.getOnlyElement(map.entrySet());","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();","METHOD: com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","com.google.common.collect.WellBehavedMapTest.testEntriesAreMutableAndConsistent()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<Map.Entry<Foo, Integer>> entrySet = map.entrySet();","METHOD: com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Map.Entry<Foo, Integer> entry = Maps.immutableEntry(Foo.Y, 2);","METHOD: com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","com.google.common.collect.WellBehavedMapTest.testEntrySet_remove()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_overlapping()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_general()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_connectedAdjacentYieldsEmpty()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testColumnPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testRowPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_plusforspace()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_badchars()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort3 = HostAndPort.fromString("[foo::123]:80");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(hpNoPort1, hpNoPort2, hpNoPort3, hpNoPort4, hpNoPort5).addEqualityGroup(hpWithPort1, hpWithPort2, hpWithPort3).testEquals();","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheBuilderTest.testMaximumSize_largerThanInt()","CLASS: com.google.common.cache.CacheBuilderTest","com.google.common.cache.CacheBuilderTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<?> f = FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);","BODY: ","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isInstanceOf(TimeoutException.class);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","CLASS: com.google.common.util.concurrent.FluentFutureTest","com.google.common.util.concurrent.FluentFutureTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(executionException).hasCauseThat().isEqualTo(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(failureCause);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FuturesGetDoneTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_INSERT","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture<V>","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(e);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(e));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(unit);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get(timeout, unit);","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new AssertionError("Unreachable");","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get();","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(error));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: error","PARAMETERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.error = checkNotNull(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.runtime = null;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isCancelled()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwOnGet()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isDone()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.cancel(boolean)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.addListener(Runnable,Executor)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.incomplete()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.rethrow(ExecutionException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(Error)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.runtime : RuntimeException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.error : Error","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture.WrapperException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("1.0");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("UP");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(false, 1.0, RoundingMode.UP);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(true, 1.0, RoundingMode.UP);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(input).matches(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","METHOD: com.google.common.primitives.DoublesTest.checkTryParse(double,String)","com.google.common.primitives.DoublesTest.checkTryParse(double,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(badInput).doesNotMatch(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","FOREACH_STATEMENT: String badInput:BAD_TRY_PARSE_INPUTS","com.google.common.primitives.DoublesTest.testTryParseFailures()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");","CATCH_CLAUSE: ClusterException","com.google.common.testing.TearDownStackTest.testThrowingTearDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testPatternSplitLookBehind()","com.google.common.base.SplitterTest.testPatternSplitLookBehind()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_varyingTrimLevels()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testLimit1Separator()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString_gwtFriendly()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.base.StringsTest.ThrowsOnToString","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("message");","CATCH_CLAUSE: VerifyException","com.google.common.base.VerifyTest.testVerify_simpleMessage_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");","METHOD: com.google.common.base.VerifyTest.checkMessage(Exception)","com.google.common.base.VerifyTest.checkMessage(Exception)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagate_NoneDeclared_CheckedThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeOtherCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagateIfInstanceOf_UndeclaredThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Integer javaVersion = Ints.tryParse(JAVA_SPECIFICATION_VERSION.value());","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // TODO(b/64442212): Remove this guard once lazyStackTrace() works in Java 9+.","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((javaVersion != null) && (javaVersion >= 9))","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: wrappedHashMapTests(new WrappedHashMapGenerator() {
  @Override Map<String, String> wrap(final HashMap<String, String> map) {
    if (map.containsValue(null))
        {
          throw new NullPointerException();
        }
    return new AbstractMap<String, String>() {
  class EntrySet extends AbstractSet<Map.Entry<String, String>> {
    EntrySet() {
      super();
    }
    public @Override Iterator<Entry<String, String>> iterator() {
      return new Iterator<Entry<String, String>>() {
  final Iterator<Entry<String, String>> iterator = map.entrySet().iterator();
  public @Override void remove() {
    iterator.remove();
  }
  public @Override boolean hasNext() {
    return iterator.hasNext();
  }
  public @Override Entry<String, String> next() {
    return transform(iterator.next());
  }
  private Entry<String, String> transform(final Entry<String, String> next) {
    return new Entry<String, String>() {
  public @Override String setValue(String value) {
    checkNotNull(value);
    return next.setValue(value);
  }
  public @Override String getValue() {
    return next.getValue();
  }
  public @Override String getKey() {
    return next.getKey();
  }
  public @Override boolean equals(Object obj) {
    return next.equals(obj);
  }
  public @Override int hashCode() {
    return next.hashCode();
  }
};
  }
};
    }
    public @Override int size() {
      return map.size();
    }
    public @Override boolean remove(Object o) {
      return map.entrySet().remove(o);
    }
    public @Override boolean containsAll(Collection<?> c) {
      return map.entrySet().containsAll(c);
    }
    public @Override boolean removeAll(Collection<?> c) {
      return map.entrySet().removeAll(c);
    }
    public @Override boolean retainAll(Collection<?> c) {
      return map.entrySet().retainAll(c);
    }
    public @Override int hashCode() {
      return map.entrySet().hashCode();
    }
    public @Override boolean equals(Object o) {
      return map.entrySet().equals(o);
    }
    public @Override String toString() {
      return map.entrySet().toString();
    }
  }
  public @Override Set<Entry<String, String>> entrySet() {
    return new EntrySet();
  }
  public @Override int hashCode() {
    return map.hashCode();
  }
  public @Override boolean equals(Object o) {
    return map.equals(o);
  }
  public @Override String toString() {
    return map.toString();
  }
  public @Override String remove(Object key) {
    return map.remove(key);
  }
  public @Override String put(String key, String value) {
    checkNotNull(value);
    return map.put(key, value);
  }
};
  }
}, "HashMap w/out null values", ALLOWS_NULL_KEYS);","METHOD: com.google.common.collect.testing.MapTestSuiteBuilderTests.testsForHashMapNullValuesForbidden()","com.google.common.collect.testing.MapTestSuiteBuilderTests.testsForHashMapNullValuesForbidden()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFailure(Runnable.class, new Function<Runnable, Runnable>() {
  public @Override Runnable apply(final Runnable runnable) {
    return new ForwardingRunnable(runnable) {
  public @SuppressWarnings("EqualsHashCode") @Override boolean equals(Object o) {
    if ((o instanceof ForwardingRunnable))
        {
          ForwardingRunnable that = (ForwardingRunnable) o;
          return runnable.equals(that.runnable);
        }
    return false;
  }
};
  }
}, "Runnable");","METHOD: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest.testFailsToForwardHashCode()","com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest.testFailsToForwardHashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");","CATCH_CLAUSE: ClusterException","com.google.common.testing.TearDownStackTest.testThrowingTearDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesPresentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesPresent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesAbsent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesAbsentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: asList(MapEntrySetTester.getSetValueMethod(), MapEntrySetTester.getSetValueWithNullValuesAbsentMethod(), MapEntrySetTester.getSetValueWithNullValuesPresentMethod());","METHOD: com.google.common.collect.testing.TestsForMapsInJavaUtil.suppressForConcurrentSkipListMap()","com.google.common.collect.testing.TestsForMapsInJavaUtil.suppressForConcurrentSkipListMap()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.WhitespaceMatcherBenchmark.main(String[])","CLASS: com.google.common.base.WhitespaceMatcherBenchmark","com.google.common.base.WhitespaceMatcherBenchmark","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactLinkedHashMapTest","com.google.common.collect.CompactLinkedHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactLinkedHashMapTest","com.google.common.collect.CompactLinkedHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_overlapping()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_general()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_connectedAdjacentYieldsEmpty()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testColumnPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testRowPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactHashMapTest","com.google.common.collect.CompactHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactHashMapTest","com.google.common.collect.CompactHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(IntentionalException.class);","CATCH_CLAUSE: InvocationTargetException","com.google.common.eventbus.SubscriberTest.testInvokeSubscriberMethod_exceptionWrapping()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableBiMap<String, String> specialCases = ImmutableBiMap.of("ETAG", "ETag", "SOURCE_MAP", "SourceMap", "X_WEBKIT_CSP", "X-WebKit-CSP", "X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);","CATCH_CLAUSE: ParseException","com.google.common.net.HostSpecifierTest.assertBad(String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_plusforspace()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_badchars()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort3 = HostAndPort.fromString("[foo::123]:80");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(hpNoPort1, hpNoPort2, hpNoPort3, hpNoPort4, hpNoPort5).addEqualityGroup(hpWithPort1, hpWithPort2, hpWithPort3).testEquals();","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: UncheckedExecutionException","CATCH_CLAUSES: ","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertSame(e, uee.getCause());","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(uee).hasCauseThat().isSameAs(e);","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: UncheckedExecutionException","CATCH_CLAUSES: ","com.google.common.cache.NullCacheTest.testGet_runtimeException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheBuilderTest.testMaximumSize_largerThanInt()","CLASS: com.google.common.cache.CacheBuilderTest","com.google.common.cache.CacheBuilderTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: keys.toArray((Object[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testKeySet_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: entries.toArray((Entry<Object, Object>[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testEntrySet_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: values.toArray((Object[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testValues_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(message);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.ListenableFutureTester.testFailedFuture(String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<?> f = FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);","BODY: ","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isInstanceOf(TimeoutException.class);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","CLASS: com.google.common.util.concurrent.FluentFutureTest","com.google.common.util.concurrent.FluentFutureTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(executionException).hasCauseThat().isEqualTo(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractScheduledServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(service.failureCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRunAndThenAgainOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRunAndThenAgainOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("kaboom!");","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnShutDown()","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("kaboom!");","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(service.failureCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRun()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRun()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStopAndWait_runThrowing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_runFailing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_runFailing()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("1");","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().hasMessageThat().isEqualTo("1");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStartAndWait()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailureCause_throwsIfNotFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailureCause_throwsIfNotFailed()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(exception.get()).hasCauseThat().isEqualTo(EXCEPTION);","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testAwaitTerminated_FailedService()","com.google.common.util.concurrent.AbstractServiceTest.testAwaitTerminated_FailedService()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isNull();","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.stopping(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo((("Expected the service " + service) + " to be RUNNING, but was STOPPING"));","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.stopping(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(failure, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(failure, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(failure);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(failure);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isNull();","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.terminated(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo((("Expected the service " + service) + " to be RUNNING, but was TERMINATED"));","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.terminated(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_stopFailing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_stopFailing()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStopAndWait_stopThrowing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStartAndWait()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStartAndWait()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(failureCause);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FuturesGetDoneTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testNotifyStoppedAfterFailure()","CLASS: com.google.common.util.concurrent.ServiceManagerTest","com.google.common.util.concurrent.ServiceManagerTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testDoCancelStart()","CLASS: com.google.common.util.concurrent.ServiceManagerTest","com.google.common.util.concurrent.ServiceManagerTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractIdleServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStart_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStart_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStop_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStop_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","SWITCH_CASE: default","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: new UndeclaredThrowableException(EXCEPTION);","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","SWITCH_CASE: EXCEPTION_DATA","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: EXCEPTION;","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertSame(e, ee.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(ee).hasCauseThat().isSameAs(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.SettableFutureTest.testSetException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","IF_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: new UndeclaredThrowableException(EXCEPTION);","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: WRAPPED_EXCEPTION;","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","IF_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: listener.assertException(WRAPPED_EXCEPTION);","METHOD: com.google.common.util.concurrent.FuturesTransformTest.testFutureGetThrowsFunctionException()","com.google.common.util.concurrent.FuturesTransformTest.testFutureGetThrowsFunctionException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.FuturesTransformTest.WRAPPED_EXCEPTION : UndeclaredThrowableException","CLASS: com.google.common.util.concurrent.FuturesTransformTest","com.google.common.util.concurrent.FuturesTransformTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new URLClassLoader(ClassPathUtil.getClassPathUrls(), classLoader) {
  public @Override Class<?> loadClass(String name) throws ClassNotFoundException {
    if (disallowedClassNames.contains(name))
        {
          throw new ClassNotFoundException("I\'m sorry Dave, I\'m afraid I can\'t do that.");
        }
    if (name.startsWith(concurrentPackage))
        {
          Class<?> c = findLoadedClass(name);
          if ((c == null))
              {
                return super.findClass(name);
              }
          return c;
        }
    return super.loadClass(name);
  }
};","METHOD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: blacklist","PARAMETERS: ","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_DELETE","PARAMETER: disallowedClassNames","PARAMETERS: ","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},
   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy.
   */","FIELD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_ATOMIC_REFERENCE_FIELD_UPDATER : ClassLoader","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_ATOMIC_REFERENCE_FIELD_UPDATER : ClassLoader","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our
   * preferred strategy {@code UnsafeAtomicHelper}.
   */","FIELD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_UNSAFE : ClassLoader","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_UNSAFE : ClassLoader","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new URLClassLoader(ClassPathUtil.getClassPathUrls(), classLoader) {
  public @Override Class<?> loadClass(String name) throws ClassNotFoundException {
    if (blocklist.contains(name))
        {
          throw new ClassNotFoundException("I\'m sorry Dave, I\'m afraid I can\'t do that.");
        }
    if (name.startsWith(concurrentPackage))
        {
          Class<?> c = findLoadedClass(name);
          if ((c == null))
              {
                return super.findClass(name);
              }
          return c;
        }
    return super.loadClass(name);
  }
};","METHOD: com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: blocklist","PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_INSERT","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture<V>","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(e);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(e));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(unit);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get(timeout, unit);","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new AssertionError("Unreachable");","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get();","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(error));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: error","PARAMETERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.error = checkNotNull(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.runtime = null;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isCancelled()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwOnGet()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isDone()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.cancel(boolean)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.addListener(Runnable,Executor)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.incomplete()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.rethrow(ExecutionException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(Error)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.runtime : RuntimeException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.error : Error","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture.WrapperException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Murmur3Hash32Test.testKnownUtf8StringInputs()","CLASS: com.google.common.hash.Murmur3Hash32Test","com.google.common.hash.Murmur3Hash32Test","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("readLine is not supported");","CATCH_CLAUSE: UnsupportedOperationException","com.google.common.io.LittleEndianDataInputStreamTest.testReadLine()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readFullyAndThenSome()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not supported");","CATCH_CLAUSE: IOException","com.google.common.io.ByteStreamsTest.testLimit_markNotSupported()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readByte()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readUnsignedByte()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not set");","CATCH_CLAUSE: IOException","com.google.common.io.ByteStreamsTest.testLimit_markNotSet()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not supported");","CATCH_CLAUSE: IOException","com.google.common.io.CountingInputStreamTest.testMarkNotSupported()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not set");","CATCH_CLAUSE: IOException","com.google.common.io.CountingInputStreamTest.testMarkNotSet()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_copiesNetworkBuilder()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_addNode()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_appliesNetworkBuilderConfig()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N2N1 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N1N2 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.removeEdge_directed_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.putEdgeValue_directed_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.removeEdge_undirected_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.putEdgeValue_undirected_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_INSERT","LINE_COMMENT: // equal to unordered(N1, N2)","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_INSERT","LINE_COMMENT: // graph not directed","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // unordered endpoints not OK for directed graph (undefined behavior)","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // wrong order","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // edge not present","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: directedGraph.putEdge(N1, N1);","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: directedGraph.putEdge(N1, N2);","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<EndpointPair<Integer>> edges = directedGraph.edges();","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).contains(EndpointPair.ordered(N1, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).contains(EndpointPair.ordered(N1, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.unordered(N1, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N3, N4));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_undirected_contains()","CLASS: com.google.common.graph.EndpointPairTest","com.google.common.graph.EndpointPairTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_PARALLEL_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /** Tests for {@link ImmutableGraph}. */","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.copyOfImmutableValueGraph_optimized()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableValueGraph()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_addNode()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_appliesGraphBuilderConfig()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_copiesGraphBuilder()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(putEdge(N1, N2)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingNodes()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.removeEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_backwards()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("1.0");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("UP");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(false, 1.0, RoundingMode.UP);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(true, 1.0, RoundingMode.UP);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(input).matches(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","METHOD: com.google.common.primitives.DoublesTest.checkTryParse(double,String)","com.google.common.primitives.DoublesTest.checkTryParse(double,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(badInput).doesNotMatch(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","FOREACH_STATEMENT: String badInput:BAD_TRY_PARSE_INPUTS","com.google.common.primitives.DoublesTest.testTryParseFailures()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testPatternSplitLookBehind()","com.google.common.base.SplitterTest.testPatternSplitLookBehind()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_varyingTrimLevels()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testLimit1Separator()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString_gwtFriendly()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.base.StringsTest.ThrowsOnToString","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("message");","CATCH_CLAUSE: VerifyException","com.google.common.base.VerifyTest.testVerify_simpleMessage_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");","METHOD: com.google.common.base.VerifyTest.checkMessage(Exception)","com.google.common.base.VerifyTest.checkMessage(Exception)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagate_NoneDeclared_CheckedThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeOtherCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagateIfInstanceOf_UndeclaredThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Integer javaVersion = Ints.tryParse(JAVA_SPECIFICATION_VERSION.value());","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // TODO(b/64442212): Remove this guard once lazyStackTrace() works in Java 9+.","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((javaVersion != null) && (javaVersion >= 9))","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9OrHigher()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArray()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayEnd()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayStart()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((existingValue == null), "duplicate key: (%s, %s)", rowKey, columnKey);","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_MOZ : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.EARLY_DATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_USER : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.REPORT_TO : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SOURCE_MAP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_TRIAL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_SITE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_MODE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_DEST : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_METADATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/WebP">WebP image format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WEBP : MediaType","com.google.common.net.MediaType.WEBP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>,
   * compressed using the ZIP format into KMZ archives.
   */","FIELD: com.google.common.net.MediaType.KMZ : MediaType","com.google.common.net.MediaType.KMZ : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * {@code skp} files produced by the 3D Modeling software <a
   * href="https://www.sketchup.com/">SketchUp</a>
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.SKETCHUP : MediaType","com.google.common.net.MediaType.SKETCHUP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Powerpoint</a> presentations. */","FIELD: com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * UTF-8 encoded <a href="https://en.wikipedia.org/wiki/Wireless_Markup_Language">Wireless Markup
   * Language</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WML_UTF_8 : MediaType","com.google.common.net.MediaType.WML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Excel</a> spreadsheets. */","FIELD: com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/BMP_file_format">Bitmap file format</a> ({@code bmp}
   * files).
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.BMP : MediaType","com.google.common.net.MediaType.BMP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>.
   */","FIELD: com.google.common.net.MediaType.KML : MediaType","com.google.common.net.MediaType.KML : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/RDF/XML">RDF/XML</a> documents, which are XML
   * serializations of <a
   * href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description
   * Framework</a> graphs.
   *
   * @since 14.0
   */","FIELD: com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * The <a href="https://tools.ietf.org/html/rfc4155">mbox database format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.MBOX : MediaType","com.google.common.net.MediaType.MBOX : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Word</a> documents. */","FIELD: com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HAL_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.WASM_APPLICATION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MICROSOFT_OUTLOOK : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: Objects.hashCode(host, port);","METHOD: com.google.common.net.HostAndPort.hashCode()","com.google.common.net.HostAndPort.hashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: (Objects.equal(this.host, that.host) && (this.port == that.port));","THEN_STATEMENT: (other instanceof HostAndPort)","com.google.common.net.HostAndPort.equals(Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: boolean unused = addCausalChain(seen, tryInternalFastPathGetFailure());","THEN_STATEMENT: (! isCancelled())","com.google.common.util.concurrent.AggregateFuture.RunningState.addInitialException(Set<Throwable>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFuture.from(FluentFuture<V>)","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTask","com.google.common.util.concurrent.TrustedListenableFutureTask","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(callable.call(), StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
     * Called when the service transitions to the {@linkplain State#TERMINATED TERMINATED} state.
     * The {@linkplain State#TERMINATED TERMINATED} state is a terminal state in the transition
     * diagram. Therefore, if this method is called, no other methods will be called on the {@link
     * Listener}.
     *
     * @param from The previous state that is being transitioned from. Failure can occur in any
     *     state with the exception of {@linkplain State#FAILED FAILED} and {@linkplain
     *     State#TERMINATED TERMINATED}.
     */","METHOD: com.google.common.util.concurrent.Service.Listener.terminated(State)","com.google.common.util.concurrent.Service.Listener.terminated(State)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(result, StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A synchronization abstraction supporting waiting on arbitrary boolean conditions.
 *
 * <p>This class is intended as a replacement for {@link ReentrantLock}. Code using {@code Monitor}
 * is less error-prone and more readable than code using {@code ReentrantLock}, without significant
 * performance loss. {@code Monitor} even has the potential for performance gain by optimizing the
 * evaluation and signaling of conditions. Signaling is entirely <a
 * href="http://en.wikipedia.org/wiki/Monitor_(synchronization)#Implicit_signaling">implicit</a>. By
 * eliminating explicit signaling, this class can guarantee that only one thread is awakened when a
 * condition becomes true (no "signaling storms" due to use of {@link
 * java.util.concurrent.locks.Condition#signalAll Condition.signalAll}) and that no signals are lost
 * (no "hangs" due to incorrect use of {@link java.util.concurrent.locks.Condition#signal
 * Condition.signal}).
 *
 * <p>A thread is said to <i>occupy</i> a monitor if it has <i>entered</i> the monitor but not yet
 * <i>left</i>. Only one thread may occupy a given monitor at any moment. A monitor is also
 * reentrant, so a thread may enter a monitor any number of times, and then must leave the same
 * number of times. The <i>enter</i> and <i>leave</i> operations have the same synchronization
 * semantics as the built-in Java language synchronization primitives.
 *
 * <p>A call to any of the <i>enter</i> methods with <b>void</b> return type should always be
 * followed immediately by a <i>try/finally</i> block to ensure that the current thread leaves the
 * monitor cleanly:
 *
 * <pre>{@code
 * monitor.enter();
 * try {
 *   // do things while occupying the monitor
 * } finally {
 *   monitor.leave();
 * }
 * }</pre>
 *
 * <p>A call to any of the <i>enter</i> methods with <b>boolean</b> return type should always appear
 * as the condition of an <i>if</i> statement containing a <i>try/finally</i> block to ensure that
 * the current thread leaves the monitor cleanly:
 *
 * <pre>{@code
 * if (monitor.tryEnter()) {
 *   try {
 *     // do things while occupying the monitor
 *   } finally {
 *     monitor.leave();
 *   }
 * } else {
 *   // do other things since the monitor was not available
 * }
 * }</pre>
 *
 * <h2>Comparison with {@code synchronized} and {@code ReentrantLock}</h2>
 *
 * <p>The following examples show a simple threadsafe holder expressed using {@code synchronized},
 * {@link ReentrantLock}, and {@code Monitor}.
 *
 * <h3>{@code synchronized}</h3>
 *
 * <p>This version is the fewest lines of code, largely because the synchronization mechanism used
 * is built into the language and runtime. But the programmer has to remember to avoid a couple of
 * common bugs: The {@code wait()} must be inside a {@code while} instead of an {@code if}, and
 * {@code notifyAll()} must be used instead of {@code notify()} because there are two different
 * logical conditions being awaited.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *
 *   public synchronized V get() throws InterruptedException {
 *     while (value == null) {
 *       wait();
 *     }
 *     V result = value;
 *     value = null;
 *     notifyAll();
 *     return result;
 *   }
 *
 *   public synchronized void set(V newValue) throws InterruptedException {
 *     while (value != null) {
 *       wait();
 *     }
 *     value = newValue;
 *     notifyAll();
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code ReentrantLock}</h3>
 *
 * <p>This version is much more verbose than the {@code synchronized} version, and still suffers
 * from the need for the programmer to remember to use {@code while} instead of {@code if}. However,
 * one advantage is that we can introduce two separate {@code Condition} objects, which allows us to
 * use {@code signal()} instead of {@code signalAll()}, which may be a performance benefit.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final ReentrantLock lock = new ReentrantLock();
 *   private final Condition valuePresent = lock.newCondition();
 *   private final Condition valueAbsent = lock.newCondition();
 *
 *   public V get() throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value == null) {
 *         valuePresent.await();
 *       }
 *       V result = value;
 *       value = null;
 *       valueAbsent.signal();
 *       return result;
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value != null) {
 *         valueAbsent.await();
 *       }
 *       value = newValue;
 *       valuePresent.signal();
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code Monitor}</h3>
 *
 * <p>This version adds some verbosity around the {@code Guard} objects, but removes that same
 * verbosity, and more, from the {@code get} and {@code set} methods. {@code Monitor} implements the
 * same efficient signaling as we had to hand-code in the {@code ReentrantLock} version above.
 * Finally, the programmer no longer has to hand-code the wait loop, and therefore doesn't have to
 * remember to use {@code while} instead of {@code if}.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final Monitor monitor = new Monitor();
 *   private final Monitor.Guard valuePresent = monitor.newGuard(() -> value != null);
 *   private final Monitor.Guard valueAbsent = monitor.newGuard(() -> value == null);
 *
 *   public V get() throws InterruptedException {
 *     monitor.enterWhen(valuePresent);
 *     try {
 *       V result = value;
 *       value = null;
 *       return result;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     monitor.enterWhen(valueAbsent);
 *     try {
 *       value = newValue;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 * }
 * }</pre>
 *
 * @author Justin T. Sampson
 * @author Martin Buchholz
 * @since 10.0
 */","CLASS: com.google.common.util.concurrent.Monitor","com.google.common.util.concurrent.Monitor","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: Throwables.propagate(throwable);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.Monitor.isSatisfied(Guard)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: throwable;","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.Monitor.isSatisfied(Guard)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableMutableValueGraph.putEdgeValue(EndpointPair<N>,V)","CLASS: com.google.common.graph.ConfigurableMutableValueGraph","com.google.common.graph.ConfigurableMutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableMutableValueGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.ConfigurableMutableValueGraph","com.google.common.graph.ConfigurableMutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: ((connectionsU != null) && connectionsU.successors().contains(nodeV));","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: hasEdgeConnecting_internal(checkNotNull(nodeU), checkNotNull(nodeV));","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: V value = ((connectionsU == null) ? null : connectionsU.value(nodeV));","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: ((value == null) ? defaultValue : value);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: edgeValueOrDefault_internal(checkNotNull(nodeU), checkNotNull(nodeV), defaultValue);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting_internal(N,N)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault_internal(N,N,V)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableValueGraph.putEdgeValue(EndpointPair<N>,V)","CLASS: com.google.common.graph.MutableValueGraph","com.google.common.graph.MutableValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableValueGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableValueGraph","com.google.common.graph.MutableValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractNetwork.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    if (allowsParallelEdges())
        {
          return super.edges();
        }
    return new AbstractSet<EndpointPair<N>>() {
  public @Override Iterator<EndpointPair<N>> iterator() {
    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {
  public @Override EndpointPair<N> apply(E edge) {
    return incidentNodes(edge);
  }
});
  }
  public @Override int size() {
    return AbstractNetwork.this.edges().size();
  }
  public @SuppressWarnings("unchecked") @Override boolean contains(@NullableDecl Object obj) {
    if ((! (obj instanceof EndpointPair)))
        {
          return false;
        }
    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
    return ((isOrderingCompatible(endpointPair) && nodes().contains(endpointPair.nodeU())) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV()));
  }
};
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractNetwork.this.nodeOrder();
  }
  public @Override boolean isDirected() {
    return AbstractNetwork.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractNetwork.this.allowsSelfLoops();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractNetwork.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractNetwork.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractNetwork.this.successors(node);
  }
};","METHOD: com.google.common.graph.AbstractNetwork.asGraph()","com.google.common.graph.AbstractNetwork.asGraph()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.validateEndpoints(EndpointPair<?>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.isOrderingCompatible(EndpointPair<?>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableValueGraph.Builder","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * Adds {@code edge} connecting {@code nodeU} to {@code nodeV}.
   *
   * <p>If the graph is directed, {@code edge} will be directed in this graph; otherwise, it will be
   * undirected.
   *
   * <p><b>{@code edge} must be unique to this graph</b>, just as a {@code Map} key must be. It must
   * also be non-null.
   *
   * <p>If {@code nodeU} and {@code nodeV} are not already present in this graph, this method will
   * silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the graph.
   *
   * <p>If {@code edge} already connects {@code nodeU} to {@code nodeV} (in the specified order if
   * this network {@link #isDirected()}, else in any order), then this method will have no effect.
   *
   * @return {@code true} if the network was modified as a result of this call
   * @throws IllegalArgumentException if {@code edge} already exists in the graph and does not
   *     connect {@code nodeU} to {@code nodeV}
   * @throws IllegalArgumentException if the introduction of the edge would violate {@link
   *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}
   */","METHOD: com.google.common.graph.MutableNetwork.addEdge(N,N,E)","com.google.common.graph.MutableNetwork.addEdge(N,N,E)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableNetwork.addEdge(EndpointPair<N>,E)","CLASS: com.google.common.graph.MutableNetwork","com.google.common.graph.MutableNetwork","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableGraph.Builder","CLASS: com.google.common.graph.ImmutableGraph","com.google.common.graph.ImmutableGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableNetwork.Builder","CLASS: com.google.common.graph.ImmutableNetwork","com.google.common.graph.ImmutableNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableGraph.putEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableGraph","com.google.common.graph.MutableGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableGraph","com.google.common.graph.MutableGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH : String","CLASS: com.google.common.graph.GraphConstants","com.google.common.graph.GraphConstants","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableMutableNetwork.addEdge(EndpointPair<N>,E)","CLASS: com.google.common.graph.ConfigurableMutableNetwork","com.google.common.graph.ConfigurableMutableNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRange(boolean)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,RoundingMode)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs(((z > (MIN_INT_AS_DOUBLE - 1.0)) & (z < (MAX_INT_AS_DOUBLE + 1.0))), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs((((MIN_LONG_AS_DOUBLE - z) < 1.0) & (z < MAX_LONG_AS_DOUBLE_PLUS_ONE)), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:\\p{XDigit}++(?:\\.\\p{XDigit}*+)?|\\.\\p{XDigit}++)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * We use # instead of * for possessive quantifiers. This lets us strip them out when building
     * the regex for RE2 (which doesn't support them) but leave them in when building it for
     * java.util.regex (where we want them in order to avoid catastrophic backtracking).
     */","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: fpPattern = fpPattern.replace("#", "+");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String decimal = "(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeDec = (decimal + "(?:[eE][+-]?\\d+#)?[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeHex = (("0[xX]" + hex) + "[pP][+-]?\\d+#[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: java.util.regex.Pattern.compile(fpPattern);","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ATTRIBUTE_TYPE_CHANGE","QUALIFIED_TYPE: java.util.regex.Pattern","FIELD: com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : java.util.regex.Pattern","com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : Pattern","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 *   void exampleBadCaller() {
 *     double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (reference == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("end index (%s) must not be less than start index (%s)", end, start);","METHOD: com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkState(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must be less than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be greater than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Preconditions.format(String,Object...)","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientToString(Object)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientFormat(String,Object...)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.JdkPattern.hashCode()","CLASS: com.google.common.base.JdkPattern","com.google.common.base.JdkPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.JdkPattern.equals(Object)","CLASS: com.google.common.base.JdkPattern","com.google.common.base.JdkPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.PatternCompiler.isPcreLike()","CLASS: com.google.common.base.PatternCompiler","com.google.common.base.PatternCompiler","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.hashCode()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.equals(Object)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.compile(String)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.isPcreLike()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ASCII : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.NONE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ANY : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_ISO_CONTROL : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.INVISIBLE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.BREAKING_WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LOWER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_UPPER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.SINGLE_WIDTH : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */","CLASS: com.google.common.base.Verify","com.google.common.base.Verify","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: wrappedHashMapTests(new WrappedHashMapGenerator() {
  @Override Map<String, String> wrap(final HashMap<String, String> map) {
    if (map.containsValue(null))
        {
          throw new NullPointerException();
        }
    return new AbstractMap<String, String>() {
  class EntrySet extends AbstractSet<Map.Entry<String, String>> {
    EntrySet() {
      super();
    }
    public @Override Iterator<Entry<String, String>> iterator() {
      return new Iterator<Entry<String, String>>() {
  final Iterator<Entry<String, String>> iterator = map.entrySet().iterator();
  public @Override void remove() {
    iterator.remove();
  }
  public @Override boolean hasNext() {
    return iterator.hasNext();
  }
  public @Override Entry<String, String> next() {
    return transform(iterator.next());
  }
  private Entry<String, String> transform(final Entry<String, String> next) {
    return new Entry<String, String>() {
  public @Override String setValue(String value) {
    checkNotNull(value);
    return next.setValue(value);
  }
  public @Override String getValue() {
    return next.getValue();
  }
  public @Override String getKey() {
    return next.getKey();
  }
  public @Override boolean equals(Object obj) {
    return next.equals(obj);
  }
  public @Override int hashCode() {
    return next.hashCode();
  }
};
  }
};
    }
    public @Override int size() {
      return map.size();
    }
    public @Override boolean remove(Object o) {
      return map.entrySet().remove(o);
    }
    public @Override boolean containsAll(Collection<?> c) {
      return map.entrySet().containsAll(c);
    }
    public @Override boolean removeAll(Collection<?> c) {
      return map.entrySet().removeAll(c);
    }
    public @Override boolean retainAll(Collection<?> c) {
      return map.entrySet().retainAll(c);
    }
    public @Override int hashCode() {
      return map.entrySet().hashCode();
    }
    public @Override boolean equals(Object o) {
      return map.entrySet().equals(o);
    }
    public @Override String toString() {
      return map.entrySet().toString();
    }
  }
  public @Override Set<Entry<String, String>> entrySet() {
    return new EntrySet();
  }
  public @Override int hashCode() {
    return map.hashCode();
  }
  public @Override boolean equals(Object o) {
    return map.equals(o);
  }
  public @Override String toString() {
    return map.toString();
  }
  public @Override String remove(Object key) {
    return map.remove(key);
  }
  public @Override String put(String key, String value) {
    checkNotNull(value);
    return map.put(key, value);
  }
};
  }
}, "HashMap w/out null values", ALLOWS_NULL_KEYS);","METHOD: com.google.common.collect.testing.MapTestSuiteBuilderTests.testsForHashMapNullValuesForbidden()","com.google.common.collect.testing.MapTestSuiteBuilderTests.testsForHashMapNullValuesForbidden()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertFailure(Runnable.class, new Function<Runnable, Runnable>() {
  public @Override Runnable apply(final Runnable runnable) {
    return new ForwardingRunnable(runnable) {
  public @SuppressWarnings("EqualsHashCode") @Override boolean equals(Object o) {
    if ((o instanceof ForwardingRunnable))
        {
          ForwardingRunnable that = (ForwardingRunnable) o;
          return runnable.equals(that.runnable);
        }
    return false;
  }
};
  }
}, "Runnable");","METHOD: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest.testFailsToForwardHashCode()","com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest.testFailsToForwardHashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");","CATCH_CLAUSE: ClusterException","com.google.common.testing.TearDownStackTest.testThrowingTearDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesPresentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesPresent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.testSetValueWithNullValuesAbsent()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.testers.MapEntrySetTester.getSetValueWithNullValuesAbsentMethod()","CLASS: com.google.common.collect.testing.testers.MapEntrySetTester","com.google.common.collect.testing.testers.MapEntrySetTester","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: asList(MapEntrySetTester.getSetValueMethod(), MapEntrySetTester.getSetValueWithNullValuesAbsentMethod(), MapEntrySetTester.getSetValueWithNullValuesPresentMethod());","METHOD: com.google.common.collect.testing.TestsForMapsInJavaUtil.suppressForConcurrentSkipListMap()","com.google.common.collect.testing.TestsForMapsInJavaUtil.suppressForConcurrentSkipListMap()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.WhitespaceMatcherBenchmark.main(String[])","CLASS: com.google.common.base.WhitespaceMatcherBenchmark","com.google.common.base.WhitespaceMatcherBenchmark","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactLinkedHashMapTest","com.google.common.collect.CompactLinkedHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashMapTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactLinkedHashMapTest","com.google.common.collect.CompactLinkedHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_overlapping()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_general()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RangeTest.testGap_connectedAdjacentYieldsEmpty()","CLASS: com.google.common.collect.RangeTest","com.google.common.collect.RangeTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testColumnPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Row dog not in [foo, bar, cat]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Column 4 not in [1, 2, 3]");","CATCH_CLAUSE: IllegalArgumentException","com.google.common.collect.ArrayTableTest.testRowPutIllegal()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactHashMapTest","com.google.common.collect.CompactHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashMapTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactHashMapTest","com.google.common.collect.CompactHashMapTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysExpectedSize()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testAllocArraysDefault()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(IntentionalException.class);","CATCH_CLAUSE: InvocationTargetException","com.google.common.eventbus.SubscriberTest.testInvokeSubscriberMethod_exceptionWrapping()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableBiMap<String, String> specialCases = ImmutableBiMap.of("ETAG", "ETag", "SOURCE_MAP", "SourceMap", "X_WEBKIT_CSP", "X-WebKit-CSP", "X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);","CATCH_CLAUSE: ParseException","com.google.common.net.HostSpecifierTest.assertBad(String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_plusforspace()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(msg);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.net.PercentEscaperTest.testBadArguments_badchars()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort4 = HostAndPort.fromHost("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort5 = HostAndPort.fromHost("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort2 = HostAndPort.fromParts("foo::123", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort1 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort2 = HostAndPort.fromString("foo::123");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpNoPort3 = HostAndPort.fromString("[foo::123]");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort1 = HostAndPort.fromParts("[foo::123]", 80);","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: HostAndPort hpWithPort3 = HostAndPort.fromString("[foo::123]:80");","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(hpNoPort1, hpNoPort2, hpNoPort3, hpNoPort4, hpNoPort5).addEqualityGroup(hpWithPort1, hpWithPort2, hpWithPort3).testEquals();","METHOD: com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","com.google.common.net.HostAndPortTest.testHashCodeAndEquals()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: UncheckedExecutionException","CATCH_CLAUSES: ","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertSame(e, uee.getCause());","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(uee).hasCauseThat().isSameAs(e);","CATCH_CLAUSE: UncheckedExecutionException","com.google.common.cache.NullCacheTest.testGet_runtimeException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: UncheckedExecutionException","CATCH_CLAUSES: ","com.google.common.cache.NullCacheTest.testGet_runtimeException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.cache.CacheBuilderTest.testMaximumSize_largerThanInt()","CLASS: com.google.common.cache.CacheBuilderTest","com.google.common.cache.CacheBuilderTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: keys.toArray((Object[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testKeySet_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: entries.toArray((Entry<Object, Object>[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testEntrySet_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: values.toArray((Object[]) null);","BODY: ","com.google.common.cache.EmptyCachesTest.testValues_nullToArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().hasMessageThat().isEqualTo(message);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.ListenableFutureTester.testFailedFuture(String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuture()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: FluentFuture<?> f = FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);","BODY: ","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isInstanceOf(TimeoutException.class);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FluentFutureTest.testWithTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFutureTest.testFromFluentFuturePassingAsNonFluent()","CLASS: com.google.common.util.concurrent.FluentFutureTest","com.google.common.util.concurrent.FluentFutureTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(executionException).hasCauseThat().isEqualTo(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractScheduledServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(service.failureCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRunAndThenAgainOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRunAndThenAgainOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("kaboom!");","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnShutDown()","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnShutDown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("kaboom!");","METHOD: com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnStartUp()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(service.failureCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRun()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("kaboom!");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractExecutionThreadServiceTest.testServiceThrowOnRun()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expected);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.CallablesTest.testAsAsyncCallable_exception()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStopAndWait_runThrowing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_runFailing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_runFailing()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(service.failureCause()).hasMessageThat().isEqualTo("1");","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().hasMessageThat().isEqualTo("1");","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testManualServiceFailureIdempotence()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStartAndWait()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailureCause_throwsIfNotFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailureCause_throwsIfNotFailed()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(exception.get()).hasCauseThat().isEqualTo(EXCEPTION);","METHOD: com.google.common.util.concurrent.AbstractServiceTest.testAwaitTerminated_FailedService()","com.google.common.util.concurrent.AbstractServiceTest.testAwaitTerminated_FailedService()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isNull();","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.stopping(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo((("Expected the service " + service) + " to be RUNNING, but was STOPPING"));","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.stopping(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(failure, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(failure, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(failure);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(failure);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: IllegalStateException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.failed(State,Throwable)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isNull();","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.terminated(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo((("Expected the service " + service) + " to be RUNNING, but was TERMINATED"));","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.RecordingListener.terminated(State)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_stopFailing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStopAndWait_stopFailing()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(service.exception);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testThrowingServiceStopAndWait_stopThrowing()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertEquals(EXCEPTION, e.getCause());","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStartAndWait()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isEqualTo(EXCEPTION);","CATCH_CLAUSE: IllegalStateException","com.google.common.util.concurrent.AbstractServiceTest.testFailingServiceStartAndWait()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isEqualTo(failureCause);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.FuturesGetDoneTest.testFailed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testNotifyStoppedAfterFailure()","CLASS: com.google.common.util.concurrent.ServiceManagerTest","com.google.common.util.concurrent.ServiceManagerTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.ServiceManagerTest.testDoCancelStart()","CLASS: com.google.common.util.concurrent.ServiceManagerTest","com.google.common.util.concurrent.ServiceManagerTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("Timed out waiting for Foo [STARTING] to reach the RUNNING state.");","CATCH_CLAUSE: TimeoutException","com.google.common.util.concurrent.AbstractIdleServiceTest.testTimeout()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStart_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStart_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.FunctionalTest.testStop_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(exception);","CATCH_CLAUSE: RuntimeException","com.google.common.util.concurrent.AbstractIdleServiceTest.testStop_failed()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","SWITCH_CASE: default","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: new UndeclaredThrowableException(EXCEPTION);","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","SWITCH_CASE: EXCEPTION_DATA","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: EXCEPTION;","SWITCH_STATEMENT: input","com.google.common.util.concurrent.FuturesTransformAsyncTest.ChainingFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: assertSame(e, ee.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(ee).hasCauseThat().isSameAs(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.SettableFutureTest.testSetException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.SettableFutureTest.testSetException()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","IF_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: new UndeclaredThrowableException(EXCEPTION);","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: WRAPPED_EXCEPTION;","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","IF_STATEMENT: (input.intValue() == VALID_INPUT_DATA)","com.google.common.util.concurrent.FuturesTransformTest.ComposeFunction.apply(Integer)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: listener.assertException(WRAPPED_EXCEPTION);","METHOD: com.google.common.util.concurrent.FuturesTransformTest.testFutureGetThrowsFunctionException()","com.google.common.util.concurrent.FuturesTransformTest.testFutureGetThrowsFunctionException()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.FuturesTransformTest.WRAPPED_EXCEPTION : UndeclaredThrowableException","CLASS: com.google.common.util.concurrent.FuturesTransformTest","com.google.common.util.concurrent.FuturesTransformTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new URLClassLoader(ClassPathUtil.getClassPathUrls(), classLoader) {
  public @Override Class<?> loadClass(String name) throws ClassNotFoundException {
    if (disallowedClassNames.contains(name))
        {
          throw new ClassNotFoundException("I\'m sorry Dave, I\'m afraid I can\'t do that.");
        }
    if (name.startsWith(concurrentPackage))
        {
          Class<?> c = findLoadedClass(name);
          if ((c == null))
              {
                return super.findClass(name);
              }
          return c;
        }
    return super.loadClass(name);
  }
};","METHOD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: blacklist","PARAMETERS: ","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_DELETE","PARAMETER: disallowedClassNames","PARAMETERS: ","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.getClassLoader(Set<String>)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},
   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy.
   */","FIELD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_ATOMIC_REFERENCE_FIELD_UPDATER : ClassLoader","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_ATOMIC_REFERENCE_FIELD_UPDATER : ClassLoader","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our
   * preferred strategy {@code UnsafeAtomicHelper}.
   */","FIELD: com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_UNSAFE : ClassLoader","com.google.common.util.concurrent.AbstractFutureFallbackAtomicHelperTest.NO_UNSAFE : ClassLoader","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new URLClassLoader(ClassPathUtil.getClassPathUrls(), classLoader) {
  public @Override Class<?> loadClass(String name) throws ClassNotFoundException {
    if (blocklist.contains(name))
        {
          throw new ClassNotFoundException("I\'m sorry Dave, I\'m afraid I can\'t do that.");
        }
    if (name.startsWith(concurrentPackage))
        {
          Class<?> c = findLoadedClass(name);
          if ((c == null))
              {
                return super.findClass(name);
              }
          return c;
        }
    return super.loadClass(name);
  }
};","METHOD: com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: blocklist","PARAMETERS: ","com.google.common.util.concurrent.AggregateFutureStateFallbackAtomicHelperTest.getClassLoader(Set<String>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasCauseThat().isSameAs(expectedException);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractAbstractFutureTest.assertFailed(AbstractFuture<Integer>,Throwable)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_INSERT","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_DELETE","PARAMETERIZED_TYPE: AbstractFuture<V>","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(e);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(e));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingRuntimeException(RuntimeException)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(unit);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get(timeout, unit);","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new AssertionError("Unreachable");","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","com.google.common.util.concurrent.UncheckedThrowingFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: throwOnGet();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: super.get();","BODY: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: rethrow(e);","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.get()","com.google.common.util.concurrent.UncheckedThrowingFuture.get()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: new UncheckedThrowingFuture<V>(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: future.complete(checkNotNull(error));","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: future;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","com.google.common.util.concurrent.UncheckedThrowingFuture.throwingError(Error)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_INSERT","PARAMETER: error","PARAMETERS: ","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.error = checkNotNull(error);","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: this.runtime = null;","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture()","com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(Error)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isCancelled()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.throwOnGet()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.UncheckedThrowingFuture(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.isDone()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.cancel(boolean)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.addListener(Runnable,Executor)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(RuntimeException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.incomplete()","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.rethrow(ExecutionException)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.UncheckedThrowingFuture.complete(Error)","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.runtime : RuntimeException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.util.concurrent.UncheckedThrowingFuture.error : Error","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture.WrapperException","CLASS: com.google.common.util.concurrent.UncheckedThrowingFuture","com.google.common.util.concurrent.UncheckedThrowingFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.hash.Murmur3Hash32Test.testKnownUtf8StringInputs()","CLASS: com.google.common.hash.Murmur3Hash32Test","com.google.common.hash.Murmur3Hash32Test","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo(expectedMessage);","THEN_STATEMENT: (expectedMessage != null)","com.google.common.io.BaseEncodingTest.assertFailsToDecode(BaseEncoding,String,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("readLine is not supported");","CATCH_CLAUSE: UnsupportedOperationException","com.google.common.io.LittleEndianDataInputStreamTest.testReadLine()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readFullyAndThenSome()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not supported");","CATCH_CLAUSE: IOException","com.google.common.io.ByteStreamsTest.testLimit_markNotSupported()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readByte()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(ex).hasCauseThat().isInstanceOf(EOFException.class);","CATCH_CLAUSE: IllegalStateException","com.google.common.io.ByteStreamsTest.testNewDataInput_readUnsignedByte()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not set");","CATCH_CLAUSE: IOException","com.google.common.io.ByteStreamsTest.testLimit_markNotSet()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not supported");","CATCH_CLAUSE: IOException","com.google.common.io.CountingInputStreamTest.testMarkNotSupported()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("Mark not set");","CATCH_CLAUSE: IOException","com.google.common.io.CountingInputStreamTest.testMarkNotSet()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_copiesNetworkBuilder()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_addNode()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_appliesNetworkBuilderConfig()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableNetworkTest.immutableNetworkBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableNetworkTest","com.google.common.graph.ImmutableNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetworkTest.addEdge(EndpointPair<Integer>,String)","CLASS: com.google.common.graph.AbstractNetworkTest","com.google.common.graph.AbstractNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(addEdge(N1, N2, E12)).isTrue();","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N2N1 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.AbstractUndirectedNetworkTest.ENDPOINTS_N1N2 : EndpointPair<Integer>","CLASS: com.google.common.graph.AbstractUndirectedNetworkTest","com.google.common.graph.AbstractUndirectedNetworkTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.removeEdge_directed_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_directed_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.putEdgeValue_directed_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.removeEdge_undirected_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_directed_backwards()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.hasEdgeConnecting_undirected_mismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.edgeValueOrDefault_undirected_correct()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraphTest.putEdgeValue_undirected_orderMismatch()","CLASS: com.google.common.graph.ValueGraphTest","com.google.common.graph.ValueGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_INSERT","LINE_COMMENT: // equal to unordered(N1, N2)","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_INSERT","LINE_COMMENT: // graph not directed","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // unordered endpoints not OK for directed graph (undefined behavior)","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // wrong order","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // edge not present","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: directedGraph.putEdge(N1, N1);","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: directedGraph.putEdge(N1, N2);","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Set<EndpointPair<Integer>> edges = directedGraph.edges();","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).contains(EndpointPair.ordered(N1, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).contains(EndpointPair.ordered(N1, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N1));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.unordered(N1, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N2, N2));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(edges).doesNotContain(EndpointPair.ordered(N3, N4));","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_directed_contains()","com.google.common.graph.EndpointPairTest.endpointPair_containment()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.EndpointPairTest.endpointPair_undirected_contains()","CLASS: com.google.common.graph.EndpointPairTest","com.google.common.graph.EndpointPairTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_REUSE_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_existingEdgeBetweenDifferentNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().contains(ERROR_PARALLEL_EDGE);","CATCH_CLAUSE: IllegalArgumentException","com.google.common.graph.AbstractDirectedNetworkTest.addEdge_parallelEdge()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edges_containsOrderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgesConnecting_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.addEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedNetworkTest.edgeConnectingOrNull_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedNetworkTest","com.google.common.graph.AbstractDirectedNetworkTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /** Tests for {@link ImmutableGraph}. */","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.copyOfImmutableValueGraph_optimized()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableValueGraph()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_addNode()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromNodes()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_appliesGraphBuilderConfig()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_copiesGraphBuilder()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ImmutableGraphTest.immutableGraphBuilder_putEdgeFromEndpointPair()","CLASS: com.google.common.graph.ImmutableGraphTest","com.google.common.graph.ImmutableGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(putEdge(N1, N2)).isTrue();","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingEdgeBetweenSameNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingEdgeBetweenSameNodes()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"METHOD_RENAMING","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_existingNodes()","com.google.common.graph.AbstractDirectedGraphTest.addEdge_existingNodes()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.putEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.removeEdge_orderMismatch()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_backwards()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_mismatch()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.hasEdgeConnecting_correct()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("1.0");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("UP");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(false, 1.0, RoundingMode.UP);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckInRange_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkInRangeForRoundingInputs(true, 1.0, RoundingMode.UP);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","com.google.common.math.MathPreconditionsTest.testCheckInRange_success()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(input).matches(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","METHOD: com.google.common.primitives.DoublesTest.checkTryParse(double,String)","com.google.common.primitives.DoublesTest.checkTryParse(double,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(badInput).doesNotMatch(Pattern.compile(Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));","FOREACH_STATEMENT: String badInput:BAD_TRY_PARSE_INPUTS","com.google.common.primitives.DoublesTest.testTryParseFailures()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testPatternSplitLookBehind()","com.google.common.base.SplitterTest.testPatternSplitLookBehind()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! CommonPattern.isPcreLike())","METHOD: com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","com.google.common.base.SplitterTest.testSplitterIterableIsLazy_pattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testMapSplitter_varyingTrimLevels()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.SplitterTest.testLimit1Separator()","CLASS: com.google.common.base.SplitterTest","com.google.common.base.SplitterTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString_gwtFriendly()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.StringsTest.testLenientFormat_badArgumentToString()","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.base.StringsTest.ThrowsOnToString","CLASS: com.google.common.base.StringsTest","com.google.common.base.StringsTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().isEqualTo("message");","CATCH_CLAUSE: VerifyException","com.google.common.base.VerifyTest.testVerify_simpleMessage_failure()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");","METHOD: com.google.common.base.VerifyTest.checkMessage(Exception)","com.google.common.base.VerifyTest.checkMessage(Exception)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagate_NoneDeclared_CheckedThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isInstanceOf(SomeOtherCheckedException.class);","CATCH_CLAUSE: RuntimeException","com.google.common.base.ThrowablesTest.testPropagateIfInstanceOf_UndeclaredThrown()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(thrown).hasCauseThat().isSameAs(cause);","METHOD: com.google.common.base.ThrowablesTest.testGetCauseAs()","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(expected).hasCauseThat().isSameAs(thrown);","CATCH_CLAUSE: ClassCastException","com.google.common.base.ThrowablesTest.testGetCauseAs()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Integer javaVersion = Ints.tryParse(JAVA_SPECIFICATION_VERSION.value());","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // TODO(b/64442212): Remove this guard once lazyStackTrace() works in Java 9+.","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((javaVersion != null) && (javaVersion >= 9))","METHOD: com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","com.google.common.base.ThrowablesTest.testLazyStackTraceWorksInProd()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: isJdk9OrHigher()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9OrHigher()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArray()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayEnd()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.RegularImmutableAsList.internalArrayStart()","CLASS: com.google.common.collect.RegularImmutableAsList","com.google.common.collect.RegularImmutableAsList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkArgument((existingValue == null), "duplicate key: (%s, %s)", rowKey, columnKey);","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());","FOR_STATEMENT: (i < cellList.size())","com.google.common.collect.DenseImmutableTable.DenseImmutableTable(ImmutableList<Cell<R, C, V>>,ImmutableSet<R>,ImmutableSet<C>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArray()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableList.SubList.internalArrayStart()","CLASS: com.google.common.collect.ImmutableList.SubList","com.google.common.collect.ImmutableList.SubList","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A {@link Collection} whose contents will never change, and which offers a few additional
 * guarantees detailed below.
 *
 * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as
 * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
 * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
 * of bugs and confusion.
 *
 * <h3>About <i>all</i> {@code Immutable-} collections</h3>
 *
 * <p>The remainder of this documentation applies to every public {@code Immutable-} type in this
 * package, whether it is a subtype of {@code ImmutableCollection} or not.
 *
 * <h4>Guarantees</h4>
 *
 * <p>Each makes the following guarantees:
 *
 * <ul>
 *   <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this
 *       collection. This is a stronger guarantee than that of {@link
 *       Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection
 *       is modified.
 *   <li><b>Null-hostility.</b> This collection will never contain a null element.
 *   <li><b>Deterministic iteration.</b> The iteration order is always well-defined, depending on
 *       how the collection was created. Typically this is insertion order unless an explicit
 *       ordering is otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}). See the
 *       appropriate factory method for details. View collections such as {@link
 *       ImmutableMultiset#elementSet} iterate in the same order as the parent, except as noted.
 *   <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple
 *       threads.
 *   <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow
 *       these guarantees to be violated).
 * </ul>
 *
 * <h4>"Interfaces", not implementations</h4>
 *
 * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought
 * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a
 * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the
 * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were
 * largely defined by its supertype.
 *
 * <p>For field types and method return types, you should generally use the immutable type (such as
 * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
 * This communicates to your callers all of the semantic guarantees listed above, which is almost
 * always very useful information.
 *
 * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to
 * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
 * appropriate {@code copyOf} method itself.
 *
 * <p>Expressing the immutability guarantee directly in the type that user code references is a
 * powerful advantage. Although Java offers certain immutable collection factory methods, such as
 * {@link Collections#singleton(Object)} and <a
 * href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,
 * we recommend using <i>these</i> classes instead for this reason (as well as for consistency).
 *
 * <h4>Creation</h4>
 *
 * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
 * Immutable} type provides the static operations you need to obtain instances of that type. These
 * usually include:
 *
 * <ul>
 *   <li>Static methods named {@code of}, accepting an explicit list of elements or entries.
 *   <li>Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
 *       collection whose contents should be copied.
 *   <li>A static nested {@code Builder} class which can be used to populate a new immutable
 *       instance.
 * </ul>
 *
 * <h4>Warnings</h4>
 *
 * <ul>
 *   <li><b>Warning:</b> as with any collection, it is almost always a bad idea to modify an element
 *       (in a way that affects its {@link Object#equals} behavior) while it is contained in a
 *       collection. Undefined behavior and bugs will result. It's generally best to avoid using
 *       mutable objects as elements at all, as many users may expect your "immutable" object to be
 *       <i>deeply</i> immutable.
 * </ul>
 *
 * <h4>Performance notes</h4>
 *
 * <ul>
 *   <li>Implementations can be generally assumed to prioritize memory efficiency, then speed of
 *       access, and lastly speed of creation.
 *   <li>The {@code copyOf} methods will sometimes recognize that the actual copy operation is
 *       unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
 *       once. This reduces the expense of habitually making defensive copies at API boundaries.
 *       However, the precise conditions for skipping the copy operation are undefined.
 *   <li><b>Warning:</b> a view collection such as {@link ImmutableMap#keySet} or {@link
 *       ImmutableList#subList} may retain a reference to the entire data set, preventing it from
 *       being garbage collected. If some of the data is no longer reachable through other means,
 *       this constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf}
 *       method to obtain a correctly-sized copy.
 *   <li>The performance of using the associated {@code Builder} class can be assumed to be no
 *       worse, and possibly better, than creating a mutable collection and copying it.
 *   <li>Implementations generally do not cache hash codes. If your element or key type has a slow
 *       {@code hashCode} implementation, it should cache it itself.
 * </ul>
 *
 * <h4>Example usage</h4>
 *
 * <pre>{@code
 * class Foo {
 *   private static final ImmutableSet<String> RESERVED_CODES =
 *       ImmutableSet.of("AZ", "CQ", "ZX");
 *
 *   private final ImmutableSet<String> codes;
 *
 *   public Foo(Iterable<String> codes) {
 *     this.codes = ImmutableSet.copyOf(codes);
 *     checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
 *   }
 * }
 * }</pre>
 *
 * <h3>See also</h3>
 *
 * <p>See the Guava User Guide article on <a href=
 * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"> immutable collections</a>.
 *
 * @since 2.0
 */","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int size = size();","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","IF_STATEMENT: (size == 0)","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object[] result = new Object[size];","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: copyIntoArray(result, 0);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","METHOD: com.google.common.collect.ImmutableCollection.toArray()","com.google.common.collect.ImmutableCollection.toArray()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: toArray(EMPTY_ARRAY);","THEN_STATEMENT: (size == 0)","com.google.common.collect.ImmutableCollection.toArray()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Object[] internal = internalArray();","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.copy(internal, internalArrayStart(), internalArrayEnd(), other);","THEN_STATEMENT: (internal != null)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (internal != null)","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: other = ObjectArrays.newArray(other, size);","THEN_STATEMENT: (other.length < size)","com.google.common.collect.ImmutableCollection.toArray(T[])","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArray()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayEnd()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableCollection.internalArrayStart()","CLASS: com.google.common.collect.ImmutableCollection","com.google.common.collect.ImmutableCollection","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARAMETER_RENAMING","PARAMETER: unused","PARAMETERS: ","com.google.common.collect.ImmutableSortedSet.readObject(ObjectInputStream)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_MOZ : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.EARLY_DATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_USER : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.PURPOSE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.REPORT_TO : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_PROTOCOL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_KEY : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SOURCE_MAP : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.ORIGIN_TRIAL : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_EXTENSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_SITE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_VERSIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_WEBSOCKET_ACCEPT : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_MODE : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_FETCH_DEST : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_METADATA : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/WebP">WebP image format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WEBP : MediaType","com.google.common.net.MediaType.WEBP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>,
   * compressed using the ZIP format into KMZ archives.
   */","FIELD: com.google.common.net.MediaType.KMZ : MediaType","com.google.common.net.MediaType.KMZ : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * {@code skp} files produced by the 3D Modeling software <a
   * href="https://www.sketchup.com/">SketchUp</a>
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.SKETCHUP : MediaType","com.google.common.net.MediaType.SKETCHUP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Powerpoint</a> presentations. */","FIELD: com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","com.google.common.net.MediaType.MICROSOFT_POWERPOINT : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * UTF-8 encoded <a href="https://en.wikipedia.org/wiki/Wireless_Markup_Language">Wireless Markup
   * Language</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.WML_UTF_8 : MediaType","com.google.common.net.MediaType.WML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Excel</a> spreadsheets. */","FIELD: com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","com.google.common.net.MediaType.MICROSOFT_EXCEL : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/BMP_file_format">Bitmap file format</a> ({@code bmp}
   * files).
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.BMP : MediaType","com.google.common.net.MediaType.BMP : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="http://www.opengeospatial.org/standards/kml/">OGC KML (Keyhole Markup Language)</a>.
   */","FIELD: com.google.common.net.MediaType.KML : MediaType","com.google.common.net.MediaType.KML : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * <a href="https://en.wikipedia.org/wiki/RDF/XML">RDF/XML</a> documents, which are XML
   * serializations of <a
   * href="https://en.wikipedia.org/wiki/Resource_Description_Framework">Resource Description
   * Framework</a> graphs.
   *
   * @since 14.0
   */","FIELD: com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","com.google.common.net.MediaType.RDF_XML_UTF_8 : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * The <a href="https://tools.ietf.org/html/rfc4155">mbox database format</a>.
   *
   * @since 13.0
   */","FIELD: com.google.common.net.MediaType.MBOX : MediaType","com.google.common.net.MediaType.MBOX : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /** <a href="http://goo.gl/XDQ1h2">Microsoft Word</a> documents. */","FIELD: com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","com.google.common.net.MediaType.MICROSOFT_WORD : MediaType","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.HAL_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.WASM_APPLICATION : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.JOSE_JSON : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.MICROSOFT_OUTLOOK : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: Objects.hashCode(host, port);","METHOD: com.google.common.net.HostAndPort.hashCode()","com.google.common.net.HostAndPort.hashCode()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: (Objects.equal(this.host, that.host) && (this.port == that.port));","THEN_STATEMENT: (other instanceof HostAndPort)","com.google.common.net.HostAndPort.equals(Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: boolean unused = addCausalChain(seen, tryInternalFastPathGetFailure());","THEN_STATEMENT: (! isCancelled())","com.google.common.util.concurrent.AggregateFuture.RunningState.addInitialException(Set<Throwable>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FluentFuture.from(FluentFuture<V>)","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.FluentFuture","com.google.common.util.concurrent.FluentFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: set(DONE);","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Thread.interrupt can throw aribitrary exceptions due to the nio InterruptibleChannel API
      // This will make sure that tasks don't get stuck busy waiting.
      // Some of this is fixed in jdk11 (see https://bugs.openjdk.java.net/browse/JDK-8198692) but
      // not all.  See the test cases for examples on how this can happen.","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable prev = getAndSet(DONE);","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.unpark((Thread) currentRunner);","THEN_STATEMENT: (prev == PARKED)","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (prev == PARKED)","FINALLY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","TRY_STATEMENT: ","THEN_STATEMENT: ((currentRunner instanceof Thread) && compareAndSet(currentRunner, INTERRUPTING))","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: (Thread) currentRunner.interrupt();","BODY: ","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_DELETE","JAVADOC: /**
   * Interrupts the running task. Because this internally calls {@link Thread#interrupt()} which can
   * in turn invoke arbitrary code it is not safe to call while holding a lock.
   */","METHOD: com.google.common.util.concurrent.InterruptibleTask.interruptTask()","com.google.common.util.concurrent.InterruptibleTask.interruptTask()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","WHILE_STATEMENT: (get() == INTERRUPTING)","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean restoreInterruptedBit = false;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int spinCount = 0;","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
        //  ______
        // < Spin >
        //  ------
        //        \   ^__^
        //         \  (oo)\_______
        //            (__)\       )\/\
        //                ||----w |
        //                ||     ||","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","POSTFIX_EXPRESSION: spinCount ++;","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // If we have spun a lot just park ourselves.
            // This will save CPU while we wait for a slow interrupting thread.  In theory
            // interruptTask() should be very fast but due to InterruptibleChannel and
            // JavaLangAccess.blockedOn(Thread, Interruptible), it isn't predictable what work might
            // be done.  (e.g. close a file and flush buffers to disk).  To protect ourselve from
            // this we park ourselves and tell our interrupter that we did so.","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Interrupting Cow Says:
              //  ______
              // < Park >
              //  ------
              //        \   ^__^
              //         \  (oo)\_______
              //            (__)\       )\/\
              //                ||----w |
              //                ||     ||
              // We need to clear the interrupted bit prior to calling park and maintain it in case
              // we wake up spuriously.","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: restoreInterruptedBit = (Thread.interrupted() || restoreInterruptedBit);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: LockSupport.park(this);","THEN_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((state == PARKED) || compareAndSet(INTERRUPTING, PARKED))","THEN_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: state = get();","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","WHILE_STATEMENT: ((state == INTERRUPTING) || (state == PARKED))","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","METHOD_INVOCATION: currentThread.interrupt();","THEN_STATEMENT: restoreInterruptedBit","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: restoreInterruptedBit","THEN_STATEMENT: (! compareAndSet(currentThread, DONE))","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: Thread.yield();","ELSE_STATEMENT: (spinCount > MAX_BUSY_WAIT_SPINS)","com.google.common.util.concurrent.InterruptibleTask.run()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS : int","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.util.concurrent.InterruptibleTask.PARKED : Runnable","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","SINGLE_TYPE: InternalFutureFailureAccess","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_INTERFACE_DELETE","PARAMETERIZED_TYPE: ListenableFuture<V>","SUPER_INTERFACE_TYPES: ","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: V value = getUninterruptibly(this);","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long remainingNanos = timeoutNanos;","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String unitString = unit.toString().toLowerCase(Locale.ROOT);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String message = ((("Waited " + timeout) + " ") + unit.toString().toLowerCase(Locale.ROOT));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // We over-waited for our timeout.","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " (plus ";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitNanos = (- remainingNanos);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: long overWaitLeftoverNanos = (overWaitNanos - unit.toNanos(overWaitUnits));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean shouldShowExtraNanos = ((overWaitUnits == 0) || (overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS));","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ((overWaitUnits + " ") + unitString);","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += ",";","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += " ";","THEN_STATEMENT: (overWaitUnits > 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (overWaitUnits > 0)","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += (overWaitLeftoverNanos + " nanoseconds ");","THEN_STATEMENT: shouldShowExtraNanos","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: shouldShowExtraNanos","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: message += "delay)";","THEN_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((remainingNanos + SPIN_THRESHOLD_NANOS) < 0)","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final long timeoutNanos = unit.toNanos(timeout);","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException(((message + " for ") + futureToString));","METHOD: com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new TimeoutException((message + " but future completed as timeout expired"));","THEN_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.get(long,TimeUnit)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (futureToPropagateTo instanceof Trusted)","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.cancel(boolean)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Checking isDone and listeners != TOMBSTONE may seem redundant, but our contract for
    // addListener says that listeners execute 'immediate' if the future isDone(). However, our
    // protocol for completing a future is to assign the value field (which sets isDone to true) and
    // then to release waiters, followed by executing afterDone(), followed by releasing listeners.
    // That means that it is possible to observe that the future isDone and that your listeners
    // don't execute 'immediately'.  By checking isDone here we avoid that.
    // A corollary to all that is that we don't need to check isDone inside the loop because if we
    // get into the loop we know that we weren't done when we entered and therefore we aren't under
    // an obligation to execute 'immediately'.","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! isDone())","METHOD: com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","VARIABLE_DECLARATION_STATEMENT: Listener oldHead = listeners;","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (oldHead != Listener.TOMBSTONE)","THEN_STATEMENT: (! isDone())","com.google.common.util.concurrent.AbstractFuture.addListener(Runnable,Executor)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Object valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: valueToSet;","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (future instanceof TrustedFuture)","IF_STATEMENT: (future instanceof Trusted)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","ASSIGNMENT: valueToSet = new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future)));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: ((v == null) ? NULL : v);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, new IllegalArgumentException((StringLiteralConcatenation{"get() did not throw CancellationException, despite reporting "+
"isCancelled() == true: "+
} + future), exception));","THEN_STATEMENT: wasCancelled","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: wasCancelled","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(exception.getCause());","CATCH_CLAUSE: ExecutionException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: ExecutionException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(new IllegalArgumentException(("get() threw CancellationException, despite reporting isCancelled() == false: " + future), cancellation));","THEN_STATEMENT: (! wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (! wasCancelled)","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Cancellation(false, cancellation);","CATCH_CLAUSE: CancellationException","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: CancellationException","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(t);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","CATCH_CLAUSE: Throwable","CATCH_CLAUSES: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Throwable throwable = InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: new Failure(throwable);","THEN_STATEMENT: (throwable != null)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (throwable != null)","THEN_STATEMENT: (future instanceof InternalFutureFailureAccess)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: (future instanceof InternalFutureFailureAccess)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean wasCancelled = future.isCancelled();","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","LINE_COMMENT: // Don't allocate a CancellationException if it's not necessary","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: Cancellation.CAUSELESS_CANCELLED;","THEN_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","IF_STATEMENT: ((! GENERATE_CANCELLATION_CAUSES) & wasCancelled)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_MOVE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_PARENT_CHANGE","TRY_STATEMENT: ","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_ORDERING_CHANGE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (future instanceof Trusted)","METHOD: com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_UPDATE","LINE_COMMENT: // Otherwise calculate the value by calling .get()","ELSE_STATEMENT: (future instanceof TrustedFuture)","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: Object v = getUninterruptibly(future);","BODY: ","com.google.common.util.concurrent.AbstractFuture.getFutureValue(ListenableFuture<?>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((pendingDescription != null) && (! pendingDescription.isEmpty()))","ELSE_STATEMENT: isDone()","com.google.common.util.concurrent.AbstractFuture.toString()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: future.addListener(valueToSet, DirectExecutor.INSTANCE);","BODY: ","com.google.common.util.concurrent.AbstractFuture.setFuture(ListenableFuture<? extends V>)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.trustedGetException()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.tryInternalFastPathGetFailure()","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.getUninterruptibly(Future<V>)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.util.concurrent.AbstractFuture.Trusted","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: FluentFuture.TrustedFuture","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTask","com.google.common.util.concurrent.TrustedListenableFutureTask","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(callable.call(), StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
     * Called when the service transitions to the {@linkplain State#TERMINATED TERMINATED} state.
     * The {@linkplain State#TERMINATED TERMINATED} state is a terminal state in the transition
     * diagram. Therefore, if this method is called, no other methods will be called on the {@link
     * Listener}.
     *
     * @param from The previous state that is being transitioned from. Failure can occur in any
     *     state with the exception of {@linkplain State#FAILED FAILED} and {@linkplain
     *     State#TERMINATED TERMINATED}.
     */","METHOD: com.google.common.util.concurrent.Service.Listener.terminated(State)","com.google.common.util.concurrent.Service.Listener.terminated(State)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: checkNotNull(result, StringLiteralConcatenation{"AsyncCallable.call returned null instead of a Future. "+
"Did you mean to return immediateFuture(null)? %s"+
}, callable);","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.runInterruptibly()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * A synchronization abstraction supporting waiting on arbitrary boolean conditions.
 *
 * <p>This class is intended as a replacement for {@link ReentrantLock}. Code using {@code Monitor}
 * is less error-prone and more readable than code using {@code ReentrantLock}, without significant
 * performance loss. {@code Monitor} even has the potential for performance gain by optimizing the
 * evaluation and signaling of conditions. Signaling is entirely <a
 * href="http://en.wikipedia.org/wiki/Monitor_(synchronization)#Implicit_signaling">implicit</a>. By
 * eliminating explicit signaling, this class can guarantee that only one thread is awakened when a
 * condition becomes true (no "signaling storms" due to use of {@link
 * java.util.concurrent.locks.Condition#signalAll Condition.signalAll}) and that no signals are lost
 * (no "hangs" due to incorrect use of {@link java.util.concurrent.locks.Condition#signal
 * Condition.signal}).
 *
 * <p>A thread is said to <i>occupy</i> a monitor if it has <i>entered</i> the monitor but not yet
 * <i>left</i>. Only one thread may occupy a given monitor at any moment. A monitor is also
 * reentrant, so a thread may enter a monitor any number of times, and then must leave the same
 * number of times. The <i>enter</i> and <i>leave</i> operations have the same synchronization
 * semantics as the built-in Java language synchronization primitives.
 *
 * <p>A call to any of the <i>enter</i> methods with <b>void</b> return type should always be
 * followed immediately by a <i>try/finally</i> block to ensure that the current thread leaves the
 * monitor cleanly:
 *
 * <pre>{@code
 * monitor.enter();
 * try {
 *   // do things while occupying the monitor
 * } finally {
 *   monitor.leave();
 * }
 * }</pre>
 *
 * <p>A call to any of the <i>enter</i> methods with <b>boolean</b> return type should always appear
 * as the condition of an <i>if</i> statement containing a <i>try/finally</i> block to ensure that
 * the current thread leaves the monitor cleanly:
 *
 * <pre>{@code
 * if (monitor.tryEnter()) {
 *   try {
 *     // do things while occupying the monitor
 *   } finally {
 *     monitor.leave();
 *   }
 * } else {
 *   // do other things since the monitor was not available
 * }
 * }</pre>
 *
 * <h2>Comparison with {@code synchronized} and {@code ReentrantLock}</h2>
 *
 * <p>The following examples show a simple threadsafe holder expressed using {@code synchronized},
 * {@link ReentrantLock}, and {@code Monitor}.
 *
 * <h3>{@code synchronized}</h3>
 *
 * <p>This version is the fewest lines of code, largely because the synchronization mechanism used
 * is built into the language and runtime. But the programmer has to remember to avoid a couple of
 * common bugs: The {@code wait()} must be inside a {@code while} instead of an {@code if}, and
 * {@code notifyAll()} must be used instead of {@code notify()} because there are two different
 * logical conditions being awaited.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *
 *   public synchronized V get() throws InterruptedException {
 *     while (value == null) {
 *       wait();
 *     }
 *     V result = value;
 *     value = null;
 *     notifyAll();
 *     return result;
 *   }
 *
 *   public synchronized void set(V newValue) throws InterruptedException {
 *     while (value != null) {
 *       wait();
 *     }
 *     value = newValue;
 *     notifyAll();
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code ReentrantLock}</h3>
 *
 * <p>This version is much more verbose than the {@code synchronized} version, and still suffers
 * from the need for the programmer to remember to use {@code while} instead of {@code if}. However,
 * one advantage is that we can introduce two separate {@code Condition} objects, which allows us to
 * use {@code signal()} instead of {@code signalAll()}, which may be a performance benefit.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final ReentrantLock lock = new ReentrantLock();
 *   private final Condition valuePresent = lock.newCondition();
 *   private final Condition valueAbsent = lock.newCondition();
 *
 *   public V get() throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value == null) {
 *         valuePresent.await();
 *       }
 *       V result = value;
 *       value = null;
 *       valueAbsent.signal();
 *       return result;
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     lock.lock();
 *     try {
 *       while (value != null) {
 *         valueAbsent.await();
 *       }
 *       value = newValue;
 *       valuePresent.signal();
 *     } finally {
 *       lock.unlock();
 *     }
 *   }
 * }
 * }</pre>
 *
 * <h3>{@code Monitor}</h3>
 *
 * <p>This version adds some verbosity around the {@code Guard} objects, but removes that same
 * verbosity, and more, from the {@code get} and {@code set} methods. {@code Monitor} implements the
 * same efficient signaling as we had to hand-code in the {@code ReentrantLock} version above.
 * Finally, the programmer no longer has to hand-code the wait loop, and therefore doesn't have to
 * remember to use {@code while} instead of {@code if}.
 *
 * <pre>{@code
 * public class SafeBox<V> {
 *   private V value;
 *   private final Monitor monitor = new Monitor();
 *   private final Monitor.Guard valuePresent = monitor.newGuard(() -> value != null);
 *   private final Monitor.Guard valueAbsent = monitor.newGuard(() -> value == null);
 *
 *   public V get() throws InterruptedException {
 *     monitor.enterWhen(valuePresent);
 *     try {
 *       V result = value;
 *       value = null;
 *       return result;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 *
 *   public void set(V newValue) throws InterruptedException {
 *     monitor.enterWhen(valueAbsent);
 *     try {
 *       value = newValue;
 *     } finally {
 *       monitor.leave();
 *     }
 *   }
 * }
 * }</pre>
 *
 * @author Justin T. Sampson
 * @author Martin Buchholz
 * @since 10.0
 */","CLASS: com.google.common.util.concurrent.Monitor","com.google.common.util.concurrent.Monitor","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","THROW_STATEMENT: Throwables.propagate(throwable);","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.Monitor.isSatisfied(Guard)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","THROW_STATEMENT: throwable;","CATCH_CLAUSE: Throwable","com.google.common.util.concurrent.Monitor.isSatisfied(Guard)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Network.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.Network","com.google.common.graph.Network","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableMutableValueGraph.putEdgeValue(EndpointPair<N>,V)","CLASS: com.google.common.graph.ConfigurableMutableValueGraph","com.google.common.graph.ConfigurableMutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableMutableValueGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.ConfigurableMutableValueGraph","com.google.common.graph.ConfigurableMutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: ((connectionsU != null) && connectionsU.successors().contains(nodeV));","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: hasEdgeConnecting_internal(checkNotNull(nodeU), checkNotNull(nodeV));","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N,N)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(nodeV);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: V value = ((connectionsU == null) ? null : connectionsU.value(nodeV));","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","RETURN_STATEMENT: ((value == null) ? defaultValue : value);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","RETURN_STATEMENT: edgeValueOrDefault_internal(checkNotNull(nodeU), checkNotNull(nodeV), defaultValue);","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N,N,V)","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting_internal(N,N)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault_internal(N,N,V)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ConfigurableValueGraph","com.google.common.graph.ConfigurableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableValueGraph.putEdgeValue(EndpointPair<N>,V)","CLASS: com.google.common.graph.MutableValueGraph","com.google.common.graph.MutableValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableValueGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableValueGraph","com.google.common.graph.MutableValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: new AbstractGraph<N>() {
  public @Override Set<N> nodes() {
    return AbstractNetwork.this.nodes();
  }
  public @Override Set<EndpointPair<N>> edges() {
    if (allowsParallelEdges())
        {
          return super.edges();
        }
    return new AbstractSet<EndpointPair<N>>() {
  public @Override Iterator<EndpointPair<N>> iterator() {
    return Iterators.transform(AbstractNetwork.this.edges().iterator(), new Function<E, EndpointPair<N>>() {
  public @Override EndpointPair<N> apply(E edge) {
    return incidentNodes(edge);
  }
});
  }
  public @Override int size() {
    return AbstractNetwork.this.edges().size();
  }
  public @SuppressWarnings("unchecked") @Override boolean contains(@NullableDecl Object obj) {
    if ((! (obj instanceof EndpointPair)))
        {
          return false;
        }
    EndpointPair<?> endpointPair = (EndpointPair<?>) obj;
    return ((isOrderingCompatible(endpointPair) && nodes().contains(endpointPair.nodeU())) && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV()));
  }
};
  }
  public @Override ElementOrder<N> nodeOrder() {
    return AbstractNetwork.this.nodeOrder();
  }
  public @Override boolean isDirected() {
    return AbstractNetwork.this.isDirected();
  }
  public @Override boolean allowsSelfLoops() {
    return AbstractNetwork.this.allowsSelfLoops();
  }
  public @Override Set<N> adjacentNodes(N node) {
    return AbstractNetwork.this.adjacentNodes(node);
  }
  public @Override Set<N> predecessors(N node) {
    return AbstractNetwork.this.predecessors(node);
  }
  public @Override Set<N> successors(N node) {
    return AbstractNetwork.this.successors(node);
  }
};","METHOD: com.google.common.graph.AbstractNetwork.asGraph()","com.google.common.graph.AbstractNetwork.asGraph()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.validateEndpoints(EndpointPair<?>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.isOrderingCompatible(EndpointPair<?>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractNetwork.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.AbstractNetwork","com.google.common.graph.AbstractNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableValueGraph.Builder","CLASS: com.google.common.graph.ImmutableValueGraph","com.google.common.graph.ImmutableValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
   * Adds {@code edge} connecting {@code nodeU} to {@code nodeV}.
   *
   * <p>If the graph is directed, {@code edge} will be directed in this graph; otherwise, it will be
   * undirected.
   *
   * <p><b>{@code edge} must be unique to this graph</b>, just as a {@code Map} key must be. It must
   * also be non-null.
   *
   * <p>If {@code nodeU} and {@code nodeV} are not already present in this graph, this method will
   * silently {@link #addNode(Object) add} {@code nodeU} and {@code nodeV} to the graph.
   *
   * <p>If {@code edge} already connects {@code nodeU} to {@code nodeV} (in the specified order if
   * this network {@link #isDirected()}, else in any order), then this method will have no effect.
   *
   * @return {@code true} if the network was modified as a result of this call
   * @throws IllegalArgumentException if {@code edge} already exists in the graph and does not
   *     connect {@code nodeU} to {@code nodeV}
   * @throws IllegalArgumentException if the introduction of the edge would violate {@link
   *     #allowsParallelEdges()} or {@link #allowsSelfLoops()}
   */","METHOD: com.google.common.graph.MutableNetwork.addEdge(N,N,E)","com.google.common.graph.MutableNetwork.addEdge(N,N,E)","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableNetwork.addEdge(EndpointPair<N>,E)","CLASS: com.google.common.graph.MutableNetwork","com.google.common.graph.MutableNetwork","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableGraph.Builder","CLASS: com.google.common.graph.ImmutableGraph","com.google.common.graph.ImmutableGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_CLASS","CLASS: com.google.common.graph.ImmutableNetwork.Builder","CLASS: com.google.common.graph.ImmutableNetwork","com.google.common.graph.ImmutableNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingGraph","com.google.common.graph.ForwardingGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.edgeValueOrDefault(EndpointPair<N>,V)","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingValueGraph.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingValueGraph","com.google.common.graph.ForwardingValueGraph","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.edgeConnectingOrNull(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.hasEdgeConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ForwardingNetwork.edgesConnecting(EndpointPair<N>)","CLASS: com.google.common.graph.ForwardingNetwork","com.google.common.graph.ForwardingNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableGraph.putEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableGraph","com.google.common.graph.MutableGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.MutableGraph.removeEdge(EndpointPair<N>)","CLASS: com.google.common.graph.MutableGraph","com.google.common.graph.MutableGraph","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_OBJECT_STATE","FIELD: com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH : String","CLASS: com.google.common.graph.GraphConstants","com.google.common.graph.GraphConstants","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableMutableNetwork.addEdge(EndpointPair<N>,E)","CLASS: com.google.common.graph.ConfigurableMutableNetwork","com.google.common.graph.ConfigurableMutableNetwork","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRange(boolean)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,RoundingMode)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs(((z > (MIN_INT_AS_DOUBLE - 1.0)) & (z < (MAX_INT_AS_DOUBLE + 1.0))), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","com.google.common.math.DoubleMath.roundToInt(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","METHOD_INVOCATION: checkInRangeForRoundingInputs((((MIN_LONG_AS_DOUBLE - z) < 1.0) & (z < MAX_LONG_AS_DOUBLE_PLUS_ONE)), x, mode);","METHOD: com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","com.google.common.math.DoubleMath.roundToLong(double,RoundingMode)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:\\p{XDigit}++(?:\\.\\p{XDigit}*+)?|\\.\\p{XDigit}++)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"COMMENT_DELETE","BLOCK_COMMENT: /*
     * We use # instead of * for possessive quantifiers. This lets us strip them out when building
     * the regex for RE2 (which doesn't support them) but leave them in when building it for
     * java.util.regex (where we want them in order to avoid catastrophic backtracking).
     */","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: String hex = "(?:[0-9a-fA-F]+#(?:\\.[0-9a-fA-F]*#)?|\\.[0-9a-fA-F]+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_DELETE","ASSIGNMENT: fpPattern = fpPattern.replace("#", "+");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","MEDIUM"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String decimal = "(?:\\d+#(?:\\.\\d*#)?|\\.\\d+#)";","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeDec = (decimal + "(?:[eE][+-]?\\d+#)?[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: String completeHex = (("0[xX]" + hex) + "[pP][+-]?\\d+#[fFdD]?");","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: java.util.regex.Pattern.compile(fpPattern);","METHOD: com.google.common.primitives.Doubles.fpPattern()","com.google.common.primitives.Doubles.fpPattern()","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ATTRIBUTE_TYPE_CHANGE","QUALIFIED_TYPE: java.util.regex.Pattern","FIELD: com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : java.util.regex.Pattern","com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN : Pattern","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that help a method or constructor check whether it was invoked
 * correctly (that is, whether its <i>preconditions</i> were met).
 *
 * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception
 * of a specified type, which helps the method in which the exception was thrown communicate that
 * its caller has made a mistake. This allows constructs such as
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   if (value < 0) {
 *     throw new IllegalArgumentException("input is negative: " + value);
 *   }
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>to be replaced with the more compact
 *
 * <pre>{@code
 * public static double sqrt(double value) {
 *   checkArgument(value >= 0, "input is negative: %s", value);
 *   // calculate square root
 * }
 * }</pre>
 *
 * <p>so that a hypothetical bad caller of this method, such as:
 *
 * <pre>{@code
 *   void exampleBadCaller() {
 *     double d = sqrt(-1.0);
 * }
 * }</pre>
 *
 * <p>would be flagged as having called {@code sqrt()} with an illegal argument.
 *
 * <h3>Performance</h3>
 *
 * <p>Avoid passing message arguments that are expensive to compute; your code will always compute
 * them, even though they usually won't be needed. If you have such arguments, use the conventional
 * if/throw idiom instead.
 *
 * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
 * creation. However, the methods of this class have a large number of overloads that prevent such
 * allocations in many common cases.
 *
 * <p>The message string is not formatted unless the exception will be thrown, so the cost of the
 * string formatting itself should not be a concern.
 *
 * <p>As with any performance concerns, you should consider profiling your code (in a production
 * environment if possible) before spending a lot of effort on tweaking a particular element.
 *
 * <h3>Other types of preconditions</h3>
 *
 * <p>Not every type of precondition failure is supported by these methods. Continue to throw
 * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
 * UnsupportedOperationException} in the situations they are intended for.
 *
 * <h3>Non-preconditions</h3>
 *
 * <p>It is of course possible to use the methods of this class to check for invalid conditions
 * which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
 * misleading to future readers of the code and of stack traces. See <a
 * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures
 * explained</a> in the Guava User Guide for more advice. Notably, {@link Verify} offers assertions
 * similar to those in this class for non-precondition checks.
 *
 * <h3>{@code java.util.Objects.requireNonNull()}</h3>
 *
 * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link
 * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
 * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
 * (The same goes for the message-accepting overloads.)
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template
 * strings. This only supports the {@code "%s"} specifier, not the full range of {@link
 * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the
 * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * <p>See the Guava User Guide on <a
 * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code
 * Preconditions}</a>.
 *
 * @author Kevin Bourrillion
 * @since 2.0
 */","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (reference == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("end index (%s) must not be less than start index (%s)", end, start);","METHOD: com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","com.google.common.base.Preconditions.badPositionIndexes(int,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkState(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must be less than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badElementIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be negative", desc, index);","THEN_STATEMENT: (index < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","RETURN_STATEMENT: lenientFormat("%s (%s) must not be greater than size (%s)", desc, index, size);","ELSE_STATEMENT: (size < 0)","com.google.common.base.Preconditions.badPositionIndex(int,int,String)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkArgument(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! b)","com.google.common.base.Preconditions.checkState(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (obj == null)","com.google.common.base.Preconditions.checkNotNull(T,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Preconditions.format(String,Object...)","CLASS: com.google.common.base.Preconditions","com.google.common.base.Preconditions","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientToString(Object)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Strings.lenientFormat(String,Object...)","CLASS: com.google.common.base.Strings","com.google.common.base.Strings","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.JdkMatcher.start()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.JdkPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.JdkPattern.hashCode()","CLASS: com.google.common.base.JdkPattern","com.google.common.base.JdkPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.JdkPattern.equals(Object)","CLASS: com.google.common.base.JdkPattern","com.google.common.base.JdkPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.PatternCompiler.isPcreLike()","CLASS: com.google.common.base.PatternCompiler","com.google.common.base.PatternCompiler","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.JdkPatternCompiler.isPcreLike()","CLASS: com.google.common.base.Platform.JdkPatternCompiler","com.google.common.base.Platform.JdkPatternCompiler","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.Platform.usingJdkPatternCompiler()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.patternCompilerIsPcreLike()","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.flags()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.matcher(CharSequence)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonPattern.pattern()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.hashCode()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.equals(Object)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.compile(String)","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.CommonPattern.isPcreLike()","CLASS: com.google.common.base.CommonPattern","com.google.common.base.CommonPattern","CRUCIAL"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ASCII : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.NONE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.ANY : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_ISO_CONTROL : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.INVISIBLE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.BREAKING_WHITESPACE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LOWER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_LETTER : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.JAVA_UPPER_CASE : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.base.CharMatcher.SINGLE_WIDTH : CharMatcher","CLASS: com.google.common.base.CharMatcher","com.google.common.base.CharMatcher","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DOC_UPDATE","JAVADOC: /**
 * Static convenience methods that serve the same purpose as Java language <a
 * href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html">assertions</a>,
 * except that they are always enabled. These methods should be used instead of Java assertions
 * whenever there is a chance the check may fail "in real life". Example:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 *
 * // In case bug 12345 happens again we'd rather just die
 * Verify.verify(bill.status() == Status.UNPAID,
 *     "Unexpected bill status: %s", bill.status());
 * }</pre>
 *
 * <h3>Comparison to alternatives</h3>
 *
 * <p><b>Note:</b> In some cases the differences explained below can be subtle. When it's unclear
 * which approach to use, <b>don't worry</b> too much about it; just pick something that seems
 * reasonable and it will be fine.
 *
 * <ul>
 *   <li>If checking whether the <i>caller</i> has violated your method or constructor's contract
 *       (such as by passing an invalid argument), use the utilities of the {@link Preconditions}
 *       class instead.
 *   <li>If checking an <i>impossible</i> condition (which <i>cannot</i> happen unless your own
 *       class or its <i>trusted</i> dependencies is badly broken), this is what ordinary Java
 *       assertions are for. Note that assertions are not enabled by default; they are essentially
 *       considered "compiled comments."
 *   <li>An explicit {@code if/throw} (as illustrated below) is always acceptable; we still
 *       recommend using our {@link VerifyException} exception type. Throwing a plain {@link
 *       RuntimeException} is frowned upon.
 *   <li>Use of {@link java.util.Objects#requireNonNull(Object)} is generally discouraged, since
 *       {@link #verifyNotNull(Object)} and {@link Preconditions#checkNotNull(Object)} perform the
 *       same function with more clarity.
 * </ul>
 *
 * <h3>Warning about performance</h3>
 *
 * <p>Remember that parameter values for message construction must all be computed eagerly, and
 * autoboxing and varargs array creation may happen as well, even when the verification succeeds and
 * the message ends up unneeded. Performance-sensitive verification checks should continue to use
 * usual form:
 *
 * <pre>{@code
 * Bill bill = remoteService.getLastUnpaidBill();
 * if (bill.status() != Status.UNPAID) {
 *   throw new VerifyException("Unexpected bill status: " + bill.status());
 * }
 * }</pre>
 *
 * <h3>Only {@code %s} is supported</h3>
 *
 * <p>As with {@link Preconditions}, {@code Verify} uses {@link Strings#lenientFormat} to format
 * error message template strings. This only supports the {@code "%s"} specifier, not the full range
 * of {@link java.util.Formatter} specifiers. However, note that if the number of arguments does not
 * match the number of occurrences of {@code "%s"} in the format string, {@code Verify} will still
 * behave as expected, and will still include all argument values in the error message; the message
 * will simply not be formatted exactly as intended.
 *
 * <h3>More information</h3>
 *
 * See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional
 * failures explained</a> in the Guava User Guide for advice on when this class should be used.
 *
 * @since 17.0
 */","CLASS: com.google.common.base.Verify","com.google.common.base.Verify","NONE"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object...)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2, p3));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,Object,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,long)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,Object,char)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,char,int)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,long,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"STATEMENT_UPDATE","THROW_STATEMENT: new VerifyException(lenientFormat(errorMessageTemplate, p1, p2));","THEN_STATEMENT: (! expression)","com.google.common.base.Verify.verify(boolean,String,int,Object)","LOW"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.replaceAll(String)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.end()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.matches()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find()","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.find(int)","HIGH"
8,eacf08dbdc3d67a7c7a103f177a64dae5bb273af,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.base.CommonMatcher.start()","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: SerializableTester.reserializeAndAssert(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Map<K, V> deserialized = SerializableTester.reserialize(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(getMap(), deserialized).testEquals();","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_INSERT","JAVADOC: /**
   * Copy of the {@link #testContainsEntryNullDisallowed} test. Needed because "optional" feature
   * requirements are not supported.
   */","METHOD: com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final LoadingCache<String, String> cache = CacheBuilder.newBuilder().recordStats().concurrencyLevel(2).expireAfterWrite(100, MILLISECONDS).removalListener(removalListener).maximumSize(5000).build(countingIdentityLoader);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: threadPool.awaitTermination(300, SECONDS);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.base.ThrowablesTest.AllowSettingSecurityManagerPolicy","CLASS: com.google.common.base.ThrowablesTest","com.google.common.base.ThrowablesTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: SerializableTester.reserializeAndAssert(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Map<K, V> deserialized = SerializableTester.reserialize(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(getMap(), deserialized).testEquals();","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_INSERT","JAVADOC: /**
   * Copy of the {@link #testContainsEntryNullDisallowed} test. Needed because "optional" feature
   * requirements are not supported.
   */","METHOD: com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final LoadingCache<String, String> cache = CacheBuilder.newBuilder().recordStats().concurrencyLevel(2).expireAfterWrite(100, MILLISECONDS).removalListener(removalListener).maximumSize(5000).build(countingIdentityLoader);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: threadPool.awaitTermination(300, SECONDS);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: supplier: ImmutableSupplier<Checksum>","PARAMETER: supplier","com.google.common.hash.ChecksumHashFunctionTest.assertHash32(int,Supplier<Checksum>,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: supplier: ImmutableSupplier<Checksum>","PARAMETER: supplier","com.google.common.hash.ChecksumHashFunctionTest.assertChecksum(Supplier<Checksum>,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Closer closer = Closer.create();","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int versionNumber = parseInt(javaVersion());","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","IF_STATEMENT: (versionNumber < 7)","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (versionNumber < 7)","IF_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(closer.suppressor).isInstanceOf(Closer.LoggingSuppressor.class);","THEN_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertThat(Closer.create().suppressor).isInstanceOf(Closer.SuppressingSuppressor.class);","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Closer.create().suppressor).isInstanceOf(Closer.SuppressingSuppressor.class);","ELSE_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.io.CloserTest.javaVersion()","CLASS: com.google.common.io.CloserTest","com.google.common.io.CloserTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeTwoSmallerThanActual()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_largeStream()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_emptyStream()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeOneSmallerThanActual()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreamsTest.PRE_FILLED_100 : byte[]","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"METHOD_RENAMING","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("h")), "hdabcegf");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("d")), "dabc");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("a")), "a");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_multiGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterableIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_multigraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_multigraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * A test utility that verifies that your methods and constructors throw {@link
 * NullPointerException} or {@link UnsupportedOperationException} whenever null is passed to a
 * parameter that isn't annotated with an annotation with the simple name {@code Nullable}, {@lcode
 * CheckForNull}, {@link NullableType}, or {@link NullableDecl}.
 *
 * <p>The tested methods and constructors are invoked -- each time with one parameter being null and
 * the rest not null -- and the test fails if no expected exception is thrown. {@code
 * NullPointerTester} uses best effort to pick non-null default values for many common JDK and Guava
 * types, and also for interfaces and public classes that have public parameter-less constructors.
 * When the non-null default value for a particular parameter type cannot be provided by {@code
 * NullPointerTester}, the caller can provide a custom non-null default value for the parameter type
 * via {@link #setDefault}.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATIONS : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATION_SIMPLE_NAMES : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: Assert.assertTrue((factory + " returns null but it\'s not annotated with @Nullable"), isNullable(factory));","THEN_STATEMENT: (returnValue == null)","com.google.common.testing.ClassSanityTester.invoke(Invokable<?, ? extends T>,List<?>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.base.ThrowablesTest.AllowSettingSecurityManagerPolicy","CLASS: com.google.common.base.ThrowablesTest","com.google.common.base.ThrowablesTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
    // loader of that class from being garbage-collected even if there is a SecurityManager.
    // The SecurityManager environment makes such leaks more likely because when you create
    // a URLClassLoader with a SecurityManager, the creating code's AccessControlContext is
    // captured, and that references the creating code's ClassLoader.","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_DELETE","JAVADOC: /**
   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the
   * loader of that class from being garbage-collected even if there is a {@link SecurityManager}.
   * The {@link SecurityManager} environment makes such leaks more likely because when you create a
   * {@link URLClassLoader} with a {@link SecurityManager}, the creating code's {@link
   * java.security.AccessControlContext} is captured, and that references the creating code's {@link
   * ClassLoader}.
   */","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
    // loader of that class from being garbage-collected.","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_DELETE","JAVADOC: /**
   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the
   * loader of that class from being garbage-collected.
   */","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: IndexedImmutableSet<Entry<E>>","CLASS: com.google.common.collect.ImmutableMultiset.EntrySet","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_INSERT","PARAMETERIZED_TYPE: Entry<E>","TYPE_PARAMETERS: ","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final String[] pieces = domain.split(DOT_REGEX, 2);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> pieces = DOT_SPLITTER.limit(2).splitToList(domain);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ((pieces.size() == 2) && matchesType(desiredType, Optional.fromNullable(PublicSuffixPatterns.UNDER.get(pieces.get(1)))));","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DOT_REGEX : String","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_PROVIDED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_TOKEN_BINDING : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_DOWNLOAD_OPTIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_REFERRED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.L16_AUDIO : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String[] parts = ipString.split(":", (IPV6_PART_COUNT + 2));","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> parts = IPV6_SPLITTER.splitToList(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((parts.size() < 3) || (parts.size() > (IPV6_PART_COUNT + 1)))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i < (parts.size() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (parts.get(i).length() == 0)","FOR_STATEMENT: (i < (parts.size() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: partsLo = ((parts.size() - skipIndex) - 1);","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((parts.get(0).length() == 0) && ((-- partsHi) != 0))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((Iterables.getLast(parts).length() == 0) && ((-- partsLo) != 0))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: partsHi = parts.size();","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get(i)));","FOR_STATEMENT: (i < partsHi)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get((parts.size() - i))));","FOR_STATEMENT: (i > 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Read in array length and allocate array","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Read in all elements in the proper order.","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: set(i, s.readDouble());","FOR_STATEMENT: (i < length)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ImmutableLongArray.Builder builder = ImmutableLongArray.builder();","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: builder.add(doubleToRawLongBits(s.readDouble()));","FOR_STATEMENT: (i < length)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: this.longs = new AtomicLongArray(builder.build().toArray());","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: this.longs = new AtomicLongArray(builder.build().toArray());","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: checksumSupplier: ImmutableSupplier<? extends Checksum>","PARAMETER: checksumSupplier","com.google.common.hash.ChecksumHashFunction.ChecksumHashFunction(Supplier<? extends Checksum>,int,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ImmutableSupplier<? extends Checksum>","FIELD: com.google.common.hash.ChecksumHashFunction.checksumSupplier : ImmutableSupplier<? extends Checksum>","com.google.common.hash.ChecksumHashFunction.checksumSupplier : Supplier<? extends Checksum>","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Presize the ByteArrayOutputStream since we know how large it will need
    // to be, unless that value is less than the default ByteArrayOutputStream
    // size (32).","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ByteArrayOutputStream out = new ByteArrayOutputStream(Math.max(32, in.available()));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: copy(in, out);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: out.toByteArray();","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(in);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: toByteArrayInternal(in, new ArrayDeque<byte[]>(TO_BYTE_ARRAY_DEQUE_SIZE), 0);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: new byte[8192];","METHOD: com.google.common.io.ByteStreams.createBuffer()","com.google.common.io.ByteStreams.createBuffer()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: new byte[BUFFER_SIZE];","METHOD: com.google.common.io.ByteStreams.createBuffer()","com.google.common.io.ByteStreams.createBuffer()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","SINGLE_TYPE: expectedSize: long","PARAMETER: expectedSize","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: FastByteArrayOutputStream out = new FastByteArrayOutputStream();","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: out.write(b);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // write the byte we read when testing for end of stream","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: copy(in, out);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: byte[] result = new byte[(bytes.length + out.size())];","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(bytes, 0, result, 0, bytes.length);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: out.writeTo(result, bytes.length);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((expectedSize >= 0), "expectedSize (%s) must be non-negative", expectedSize);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","THROW_STATEMENT: new OutOfMemoryError((expectedSize + " bytes is too large to fit in a byte array"));","THEN_STATEMENT: (expectedSize > MAX_ARRAY_LEN)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (expectedSize > MAX_ARRAY_LEN)","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Deque<byte[]> bufs = new ArrayDeque<byte[]>((TO_BYTE_ARRAY_DEQUE_SIZE + 2));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: bufs.add(bytes);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: bufs.add(new byte[]{(byte) b});","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: toByteArrayInternal(in, bufs, (bytes.length + 1));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: byte[] bytes = new byte[(int) expectedSize];","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int remaining = (int) expectedSize;","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int off = ((int) expectedSize - remaining);","WHILE_STATEMENT: (remaining > 0)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreams.toByteArrayInternal(InputStream,Deque<byte[]>,int)","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.TO_BYTE_ARRAY_DEQUE_SIZE : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.MAX_ARRAY_LEN : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.BUFFER_SIZE : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.io.ByteStreams.FastByteArrayOutputStream","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Optional<Long> size = sizeIfKnown();","BODY: ","com.google.common.io.ByteSource.read()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (size.isPresent() ? ByteStreams.toByteArray(in, size.get()) : ByteStreams.toByteArray(in));","BODY: ","com.google.common.io.ByteSource.read()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Overflow (or one or more sources that returned a negative size, but all bets are off in
          // that case)
          // Can't represent anything higher, and realistically there probably isn't anything that
          // can actually be done anyway with the supposed 8+ exbibytes of data the source is
          // claiming to have if we get here, so just stop.","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Long.MAX_VALUE;","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (result < 0)","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Infinite Iterables can cause problems here. Of course, it's true that most of the other
        // methods on this class also have potential problems with infinite  Iterables. But unlike
        // those, this method can cause issues even if the user is dealing with a (finite) slice()
        // of this source, since the slice's sizeIfKnown() method needs to know the size of the
        // underlying source to know what its size actually is.","THEN_STATEMENT: (! (sources instanceof Collection))","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Optional.absent();","THEN_STATEMENT: (! sizeIfKnown.isPresent())","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (! sizeIfKnown.isPresent())","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Overflow (or one or more sources that returned a negative size, but all bets are off in
          // that case)
          // Can't represent anything higher, and realistically there probably isn't anything that
          // can actually be done anyway with the supposed 8+ exbibytes of data the source is
          // claiming to have if we get here, so just stop.","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Optional.of(Long.MAX_VALUE);","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (result < 0)","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (! (sources instanceof Collection))","METHOD: com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! (sources instanceof Collection))","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isUpperCase(c)","com.google.common.base.Ascii.toLowerCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (char) ((c | CASE_MASK) - 'a');","METHOD: com.google.common.base.Ascii.getAlphaIndex(char)","com.google.common.base.Ascii.getAlphaIndex(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isLowerCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toUpperCase(char)","com.google.common.base.Ascii.toUpperCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isUpperCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toLowerCase(char)","com.google.common.base.Ascii.toLowerCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isLowerCase(c)","com.google.common.base.Ascii.toUpperCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.Ascii.CASE_MASK : char","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: ((string == null) ? "" : string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.nullToEmpty(string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (isNullOrEmpty(string) ? null : string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.emptyToNull(string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(Lists.<CharSequence>newLinkedList(), encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.parseTrie(CharSequence)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.
   */","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: idx;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: (idx - start);","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int idx = start;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: stack.add(0, reverse(encoded.subSequence(start, idx)));","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(stack, encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: IndexedImmutableSet<Entry<E>>","CLASS: com.google.common.collect.ImmutableMultiset.EntrySet","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_INSERT","PARAMETERIZED_TYPE: Entry<E>","TYPE_PARAMETERS: ","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: List<Object> elements = Lists.newArrayList();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: Collection_CustomFieldSerializerBase.deserialize(reader, elements);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","BLOCK_COMMENT: /*
     * For this custom field serializer to be invoked, the set must have been
     * RegularImmutableMultiset before it's serialized. Since
     * RegularImmutableMultiset always have one or more elements,
     * ImmutableMultiset.copyOf always return a RegularImmutableMultiset back.
     */","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (RegularImmutableMultiset<Object>) ImmutableMultiset.copyOf(elements);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ImmutableMultiset.copyOf(Multiset_CustomFieldSerializerBase.populate(reader, LinkedHashMultiset.create()));","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader): ImmutableMultiset<Object>","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableMultiset<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.deserialize(SerializationStreamReader,RegularImmutableMultiset<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableMultiset<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableMultiset<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: Multiset_CustomFieldSerializerBase.serialize(writer, instance);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableMultiset<?>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","BLOCK_COMMENT: /*
     * For this custom field serializer to be invoked, the set must have been
     * RegularImmutableSet before it's serialized.  Since RegularImmutableSet
     * always have two or more elements, ImmutableSet.copyOf always return
     * a RegularImmutableSet back.
     */","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ImmutableSet.copyOf(elements);","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader): ImmutableSet<Object>","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableSet<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.deserialize(SerializationStreamReader,RegularImmutableSet<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableSet<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableSet<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final String[] pieces = domain.split(DOT_REGEX, 2);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> pieces = DOT_SPLITTER.limit(2).splitToList(domain);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ((pieces.size() == 2) && matchesType(desiredType, Optional.fromNullable(PublicSuffixPatterns.UNDER.get(pieces.get(1)))));","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DOT_REGEX : String","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_PROVIDED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_TOKEN_BINDING : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_DOWNLOAD_OPTIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_REFERRED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.L16_AUDIO : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isUpperCase(c)","com.google.common.base.Ascii.toLowerCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (char) ((c | CASE_MASK) - 'a');","METHOD: com.google.common.base.Ascii.getAlphaIndex(char)","com.google.common.base.Ascii.getAlphaIndex(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isLowerCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toUpperCase(char)","com.google.common.base.Ascii.toUpperCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isUpperCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toLowerCase(char)","com.google.common.base.Ascii.toLowerCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isLowerCase(c)","com.google.common.base.Ascii.toUpperCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.Ascii.CASE_MASK : char","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: ((string == null) ? "" : string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.nullToEmpty(string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (isNullOrEmpty(string) ? null : string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.emptyToNull(string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(Lists.<CharSequence>newLinkedList(), encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.parseTrie(CharSequence)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.
   */","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: idx;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: (idx - start);","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int idx = start;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: stack.add(0, reverse(encoded.subSequence(start, idx)));","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(stack, encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: IndexedImmutableSet<Entry<E>>","CLASS: com.google.common.collect.ImmutableMultiset.EntrySet","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_INSERT","PARAMETERIZED_TYPE: Entry<E>","TYPE_PARAMETERS: ","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final String[] pieces = domain.split(DOT_REGEX, 2);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> pieces = DOT_SPLITTER.limit(2).splitToList(domain);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ((pieces.size() == 2) && matchesType(desiredType, Optional.fromNullable(PublicSuffixPatterns.UNDER.get(pieces.get(1)))));","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DOT_REGEX : String","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_PROVIDED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_TOKEN_BINDING : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_DOWNLOAD_OPTIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_REFERRED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.L16_AUDIO : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isUpperCase(c)","com.google.common.base.Ascii.toLowerCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (char) ((c | CASE_MASK) - 'a');","METHOD: com.google.common.base.Ascii.getAlphaIndex(char)","com.google.common.base.Ascii.getAlphaIndex(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isLowerCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toUpperCase(char)","com.google.common.base.Ascii.toUpperCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isUpperCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toLowerCase(char)","com.google.common.base.Ascii.toLowerCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isLowerCase(c)","com.google.common.base.Ascii.toUpperCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.Ascii.CASE_MASK : char","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: ((string == null) ? "" : string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.nullToEmpty(string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (isNullOrEmpty(string) ? null : string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.emptyToNull(string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(Lists.<CharSequence>newLinkedList(), encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.parseTrie(CharSequence)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.
   */","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: idx;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: (idx - start);","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int idx = start;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: stack.add(0, reverse(encoded.subSequence(start, idx)));","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(stack, encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: SerializableTester.reserializeAndAssert(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Map<K, V> deserialized = SerializableTester.reserialize(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(getMap(), deserialized).testEquals();","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_INSERT","JAVADOC: /**
   * Copy of the {@link #testContainsEntryNullDisallowed} test. Needed because "optional" feature
   * requirements are not supported.
   */","METHOD: com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final LoadingCache<String, String> cache = CacheBuilder.newBuilder().recordStats().concurrencyLevel(2).expireAfterWrite(100, MILLISECONDS).removalListener(removalListener).maximumSize(5000).build(countingIdentityLoader);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: threadPool.awaitTermination(300, SECONDS);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.base.ThrowablesTest.AllowSettingSecurityManagerPolicy","CLASS: com.google.common.base.ThrowablesTest","com.google.common.base.ThrowablesTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: List<Object> elements = Lists.newArrayList();","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: Collection_CustomFieldSerializerBase.deserialize(reader, elements);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","BLOCK_COMMENT: /*
     * For this custom field serializer to be invoked, the set must have been
     * RegularImmutableMultiset before it's serialized. Since
     * RegularImmutableMultiset always have one or more elements,
     * ImmutableMultiset.copyOf always return a RegularImmutableMultiset back.
     */","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (RegularImmutableMultiset<Object>) ImmutableMultiset.copyOf(elements);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ImmutableMultiset.copyOf(Multiset_CustomFieldSerializerBase.populate(reader, LinkedHashMultiset.create()));","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader): ImmutableMultiset<Object>","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.instantiate(SerializationStreamReader)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableMultiset<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.deserialize(SerializationStreamReader,RegularImmutableMultiset<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableMultiset<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableMultiset<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: Multiset_CustomFieldSerializerBase.serialize(writer, instance);","METHOD: com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,ImmutableMultiset<?>)","com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableMultiset<?>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","BLOCK_COMMENT: /*
     * For this custom field serializer to be invoked, the set must have been
     * RegularImmutableSet before it's serialized.  Since RegularImmutableSet
     * always have two or more elements, ImmutableSet.copyOf always return
     * a RegularImmutableSet back.
     */","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ImmutableSet.copyOf(elements);","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"RETURN_TYPE_CHANGE","PARAMETERIZED_TYPE: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader): ImmutableSet<Object>","METHOD: com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.instantiate(SerializationStreamReader)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableSet<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.deserialize(SerializationStreamReader,RegularImmutableSet<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: instance: ImmutableSet<?>","PARAMETER: instance","com.google.common.collect.RegularImmutableSet_CustomFieldSerializer.serialize(SerializationStreamWriter,RegularImmutableSet<?>)","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: SerializableTester.reserializeAndAssert(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Map<K, V> deserialized = SerializableTester.reserialize(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(getMap(), deserialized).testEquals();","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_INSERT","JAVADOC: /**
   * Copy of the {@link #testContainsEntryNullDisallowed} test. Needed because "optional" feature
   * requirements are not supported.
   */","METHOD: com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * A test utility that verifies that your methods and constructors throw {@link
 * NullPointerException} or {@link UnsupportedOperationException} whenever null is passed to a
 * parameter that isn't annotated with an annotation with the simple name {@code Nullable}, {@lcode
 * CheckForNull}, {@link NullableType}, or {@link NullableDecl}.
 *
 * <p>The tested methods and constructors are invoked -- each time with one parameter being null and
 * the rest not null -- and the test fails if no expected exception is thrown. {@code
 * NullPointerTester} uses best effort to pick non-null default values for many common JDK and Guava
 * types, and also for interfaces and public classes that have public parameter-less constructors.
 * When the non-null default value for a particular parameter type cannot be provided by {@code
 * NullPointerTester}, the caller can provide a custom non-null default value for the parameter type
 * via {@link #setDefault}.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATIONS : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATION_SIMPLE_NAMES : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: Assert.assertTrue((factory + " returns null but it\'s not annotated with @Nullable"), isNullable(factory));","THEN_STATEMENT: (returnValue == null)","com.google.common.testing.ClassSanityTester.invoke(Invokable<?, ? extends T>,List<?>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final LoadingCache<String, String> cache = CacheBuilder.newBuilder().recordStats().concurrencyLevel(2).expireAfterWrite(100, MILLISECONDS).removalListener(removalListener).maximumSize(5000).build(countingIdentityLoader);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: threadPool.awaitTermination(300, SECONDS);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: supplier: ImmutableSupplier<Checksum>","PARAMETER: supplier","com.google.common.hash.ChecksumHashFunctionTest.assertHash32(int,Supplier<Checksum>,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: supplier: ImmutableSupplier<Checksum>","PARAMETER: supplier","com.google.common.hash.ChecksumHashFunctionTest.assertChecksum(Supplier<Checksum>,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Closer closer = Closer.create();","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int versionNumber = parseInt(javaVersion());","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","IF_STATEMENT: (versionNumber < 7)","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (versionNumber < 7)","IF_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(closer.suppressor).isInstanceOf(Closer.LoggingSuppressor.class);","THEN_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertThat(Closer.create().suppressor).isInstanceOf(Closer.SuppressingSuppressor.class);","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Closer.create().suppressor).isInstanceOf(Closer.SuppressingSuppressor.class);","ELSE_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.io.CloserTest.javaVersion()","CLASS: com.google.common.io.CloserTest","com.google.common.io.CloserTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: MoreFiles.deleteRecursively(rootDir);","METHOD: com.google.common.io.MoreFilesFileTraverserTest.tearDown()","com.google.common.io.MoreFilesFileTraverserTest.tearDown()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: rootDir.getFileSystem().close();","METHOD: com.google.common.io.MoreFilesFileTraverserTest.tearDown()","com.google.common.io.MoreFilesFileTraverserTest.tearDown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: file.toFile().createNewFile();","METHOD: com.google.common.io.MoreFilesFileTraverserTest.newFile(String)","com.google.common.io.MoreFilesFileTraverserTest.newFile(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: MoreFiles.touch(file);","METHOD: com.google.common.io.MoreFilesFileTraverserTest.newFile(String)","com.google.common.io.MoreFilesFileTraverserTest.newFile(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","ASSIGNMENT: rootDir = Files.createTempDir().toPath();","METHOD: com.google.common.io.MoreFilesFileTraverserTest.setUp()","com.google.common.io.MoreFilesFileTraverserTest.setUp()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","ASSIGNMENT: rootDir = Jimfs.newFileSystem(Configuration.unix()).getPath("/tmp");","METHOD: com.google.common.io.MoreFilesFileTraverserTest.setUp()","com.google.common.io.MoreFilesFileTraverserTest.setUp()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: Files.createDirectory(rootDir);","METHOD: com.google.common.io.MoreFilesFileTraverserTest.setUp()","com.google.common.io.MoreFilesFileTraverserTest.setUp()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: dir.toFile().mkdir();","METHOD: com.google.common.io.MoreFilesFileTraverserTest.newDir(String)","com.google.common.io.MoreFilesFileTraverserTest.newDir(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: Files.createDirectory(dir);","METHOD: com.google.common.io.MoreFilesFileTraverserTest.newDir(String)","com.google.common.io.MoreFilesFileTraverserTest.newDir(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeTwoSmallerThanActual()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_largeStream()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_emptyStream()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeOneSmallerThanActual()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreamsTest.PRE_FILLED_100 : byte[]","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"METHOD_RENAMING","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("h")), "hdabcegf");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("d")), "dabc");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("a")), "a");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_multiGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterableIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_multigraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_multigraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.base.ThrowablesTest.AllowSettingSecurityManagerPolicy","CLASS: com.google.common.base.ThrowablesTest","com.google.common.base.ThrowablesTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
    // loader of that class from being garbage-collected even if there is a SecurityManager.
    // The SecurityManager environment makes such leaks more likely because when you create
    // a URLClassLoader with a SecurityManager, the creating code's AccessControlContext is
    // captured, and that references the creating code's ClassLoader.","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_DELETE","JAVADOC: /**
   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the
   * loader of that class from being garbage-collected even if there is a {@link SecurityManager}.
   * The {@link SecurityManager} environment makes such leaks more likely because when you create a
   * {@link URLClassLoader} with a {@link SecurityManager}, the creating code's {@link
   * java.security.AccessControlContext} is captured, and that references the creating code's {@link
   * ClassLoader}.
   */","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
    // loader of that class from being garbage-collected.","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_DELETE","JAVADOC: /**
   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the
   * loader of that class from being garbage-collected.
   */","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: IndexedImmutableSet<Entry<E>>","CLASS: com.google.common.collect.ImmutableMultiset.EntrySet","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_INSERT","PARAMETERIZED_TYPE: Entry<E>","TYPE_PARAMETERS: ","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final String[] pieces = domain.split(DOT_REGEX, 2);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> pieces = DOT_SPLITTER.limit(2).splitToList(domain);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ((pieces.size() == 2) && matchesType(desiredType, Optional.fromNullable(PublicSuffixPatterns.UNDER.get(pieces.get(1)))));","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DOT_REGEX : String","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_PROVIDED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_TOKEN_BINDING : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_DOWNLOAD_OPTIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_REFERRED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.L16_AUDIO : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String[] parts = ipString.split(":", (IPV6_PART_COUNT + 2));","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> parts = IPV6_SPLITTER.splitToList(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((parts.size() < 3) || (parts.size() > (IPV6_PART_COUNT + 1)))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i < (parts.size() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (parts.get(i).length() == 0)","FOR_STATEMENT: (i < (parts.size() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: partsLo = ((parts.size() - skipIndex) - 1);","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((parts.get(0).length() == 0) && ((-- partsHi) != 0))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((Iterables.getLast(parts).length() == 0) && ((-- partsLo) != 0))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: partsHi = parts.size();","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get(i)));","FOR_STATEMENT: (i < partsHi)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get((parts.size() - i))));","FOR_STATEMENT: (i > 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Read in array length and allocate array","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Read in all elements in the proper order.","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: set(i, s.readDouble());","FOR_STATEMENT: (i < length)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ImmutableLongArray.Builder builder = ImmutableLongArray.builder();","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: builder.add(doubleToRawLongBits(s.readDouble()));","FOR_STATEMENT: (i < length)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: this.longs = new AtomicLongArray(builder.build().toArray());","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: this.longs = new AtomicLongArray(builder.build().toArray());","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: checksumSupplier: ImmutableSupplier<? extends Checksum>","PARAMETER: checksumSupplier","com.google.common.hash.ChecksumHashFunction.ChecksumHashFunction(Supplier<? extends Checksum>,int,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ImmutableSupplier<? extends Checksum>","FIELD: com.google.common.hash.ChecksumHashFunction.checksumSupplier : ImmutableSupplier<? extends Checksum>","com.google.common.hash.ChecksumHashFunction.checksumSupplier : Supplier<? extends Checksum>","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Presize the ByteArrayOutputStream since we know how large it will need
    // to be, unless that value is less than the default ByteArrayOutputStream
    // size (32).","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ByteArrayOutputStream out = new ByteArrayOutputStream(Math.max(32, in.available()));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: copy(in, out);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: out.toByteArray();","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(in);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: toByteArrayInternal(in, new ArrayDeque<byte[]>(TO_BYTE_ARRAY_DEQUE_SIZE), 0);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: new byte[8192];","METHOD: com.google.common.io.ByteStreams.createBuffer()","com.google.common.io.ByteStreams.createBuffer()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: new byte[BUFFER_SIZE];","METHOD: com.google.common.io.ByteStreams.createBuffer()","com.google.common.io.ByteStreams.createBuffer()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","SINGLE_TYPE: expectedSize: long","PARAMETER: expectedSize","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: FastByteArrayOutputStream out = new FastByteArrayOutputStream();","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: out.write(b);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // write the byte we read when testing for end of stream","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: copy(in, out);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: byte[] result = new byte[(bytes.length + out.size())];","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(bytes, 0, result, 0, bytes.length);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: out.writeTo(result, bytes.length);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((expectedSize >= 0), "expectedSize (%s) must be non-negative", expectedSize);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","THROW_STATEMENT: new OutOfMemoryError((expectedSize + " bytes is too large to fit in a byte array"));","THEN_STATEMENT: (expectedSize > MAX_ARRAY_LEN)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (expectedSize > MAX_ARRAY_LEN)","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Deque<byte[]> bufs = new ArrayDeque<byte[]>((TO_BYTE_ARRAY_DEQUE_SIZE + 2));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: bufs.add(bytes);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: bufs.add(new byte[]{(byte) b});","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: toByteArrayInternal(in, bufs, (bytes.length + 1));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: byte[] bytes = new byte[(int) expectedSize];","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int remaining = (int) expectedSize;","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int off = ((int) expectedSize - remaining);","WHILE_STATEMENT: (remaining > 0)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreams.toByteArrayInternal(InputStream,Deque<byte[]>,int)","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.TO_BYTE_ARRAY_DEQUE_SIZE : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.MAX_ARRAY_LEN : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.BUFFER_SIZE : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.io.ByteStreams.FastByteArrayOutputStream","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Optional<Long> size = sizeIfKnown();","BODY: ","com.google.common.io.ByteSource.read()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (size.isPresent() ? ByteStreams.toByteArray(in, size.get()) : ByteStreams.toByteArray(in));","BODY: ","com.google.common.io.ByteSource.read()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Overflow (or one or more sources that returned a negative size, but all bets are off in
          // that case)
          // Can't represent anything higher, and realistically there probably isn't anything that
          // can actually be done anyway with the supposed 8+ exbibytes of data the source is
          // claiming to have if we get here, so just stop.","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Long.MAX_VALUE;","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (result < 0)","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Infinite Iterables can cause problems here. Of course, it's true that most of the other
        // methods on this class also have potential problems with infinite  Iterables. But unlike
        // those, this method can cause issues even if the user is dealing with a (finite) slice()
        // of this source, since the slice's sizeIfKnown() method needs to know the size of the
        // underlying source to know what its size actually is.","THEN_STATEMENT: (! (sources instanceof Collection))","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Optional.absent();","THEN_STATEMENT: (! sizeIfKnown.isPresent())","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (! sizeIfKnown.isPresent())","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Overflow (or one or more sources that returned a negative size, but all bets are off in
          // that case)
          // Can't represent anything higher, and realistically there probably isn't anything that
          // can actually be done anyway with the supposed 8+ exbibytes of data the source is
          // claiming to have if we get here, so just stop.","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Optional.of(Long.MAX_VALUE);","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (result < 0)","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (! (sources instanceof Collection))","METHOD: com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! (sources instanceof Collection))","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isUpperCase(c)","com.google.common.base.Ascii.toLowerCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (char) ((c | CASE_MASK) - 'a');","METHOD: com.google.common.base.Ascii.getAlphaIndex(char)","com.google.common.base.Ascii.getAlphaIndex(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isLowerCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toUpperCase(char)","com.google.common.base.Ascii.toUpperCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isUpperCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toLowerCase(char)","com.google.common.base.Ascii.toLowerCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isLowerCase(c)","com.google.common.base.Ascii.toUpperCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.Ascii.CASE_MASK : char","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: ((string == null) ? "" : string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.nullToEmpty(string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (isNullOrEmpty(string) ? null : string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.emptyToNull(string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(Lists.<CharSequence>newLinkedList(), encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.parseTrie(CharSequence)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.
   */","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: idx;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: (idx - start);","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int idx = start;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: stack.add(0, reverse(encoded.subSequence(start, idx)));","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(stack, encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: SerializableTester.reserializeAndAssert(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Map<K, V> deserialized = SerializableTester.reserialize(getMap());","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: new EqualsTester().addEqualityGroup(getMap(), deserialized).testEquals();","METHOD: com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","com.google.common.collect.testing.testers.MapSerializationTester.testReserializeMap()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_INSERT","JAVADOC: /**
   * Copy of the {@link #testContainsEntryNullDisallowed} test. Needed because "optional" feature
   * requirements are not supported.
   */","METHOD: com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","com.google.common.collect.testing.google.MultimapContainsEntryTester.testContainsEntryNullDisallowedBecauseValueQueriesDisallowed()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * A test utility that verifies that your methods and constructors throw {@link
 * NullPointerException} or {@link UnsupportedOperationException} whenever null is passed to a
 * parameter that isn't annotated with an annotation with the simple name {@code Nullable}, {@lcode
 * CheckForNull}, {@link NullableType}, or {@link NullableDecl}.
 *
 * <p>The tested methods and constructors are invoked -- each time with one parameter being null and
 * the rest not null -- and the test fails if no expected exception is thrown. {@code
 * NullPointerTester} uses best effort to pick non-null default values for many common JDK and Guava
 * types, and also for interfaces and public classes that have public parameter-less constructors.
 * When the non-null default value for a particular parameter type cannot be provided by {@code
 * NullPointerTester}, the caller can provide a custom non-null default value for the parameter type
 * via {@link #setDefault}.
 *
 * @author Kevin Bourrillion
 * @since 10.0
 */","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATIONS : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATION_SIMPLE_NAMES : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: Assert.assertTrue((factory + " returns null but it\'s not annotated with @Nullable"), isNullable(factory));","THEN_STATEMENT: (returnValue == null)","com.google.common.testing.ClassSanityTester.invoke(Invokable<?, ? extends T>,List<?>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final LoadingCache<String, String> cache = CacheBuilder.newBuilder().recordStats().concurrencyLevel(2).expireAfterWrite(100, MILLISECONDS).removalListener(removalListener).maximumSize(5000).build(countingIdentityLoader);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: threadPool.awaitTermination(300, SECONDS);","METHOD: com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","com.google.common.cache.CacheBuilderTest.testRemovalNotification_get_basher()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: supplier: ImmutableSupplier<Checksum>","PARAMETER: supplier","com.google.common.hash.ChecksumHashFunctionTest.assertHash32(int,Supplier<Checksum>,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: supplier: ImmutableSupplier<Checksum>","PARAMETER: supplier","com.google.common.hash.ChecksumHashFunctionTest.assertChecksum(Supplier<Checksum>,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Closer closer = Closer.create();","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int versionNumber = parseInt(javaVersion());","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","IF_STATEMENT: (versionNumber < 7)","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (versionNumber < 7)","IF_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(closer.suppressor).isInstanceOf(Closer.LoggingSuppressor.class);","THEN_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: assertThat(Closer.create().suppressor).isInstanceOf(Closer.SuppressingSuppressor.class);","METHOD: com.google.common.io.CloserTest.testCreate()","com.google.common.io.CloserTest.testCreate()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertThat(Closer.create().suppressor).isInstanceOf(Closer.SuppressingSuppressor.class);","ELSE_STATEMENT: (versionNumber < 7)","com.google.common.io.CloserTest.testCreate()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.io.CloserTest.javaVersion()","CLASS: com.google.common.io.CloserTest","com.google.common.io.CloserTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSmallerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenCorrectSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeZero()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: InputStream in = new ByteArrayInputStream(PRE_FILLED_100);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(PRE_FILLED_100, b);","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenLargerSize()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeTwoSmallerThanActual()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_largeStream()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_emptyStream()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray_withSize_givenSizeOneSmallerThanActual()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreamsTest.testToByteArray()","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreamsTest.PRE_FILLED_100 : byte[]","CLASS: com.google.common.io.ByteStreamsTest","com.google.common.io.ByteStreamsTest","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"METHOD_RENAMING","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("h")), "hdabcegf");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("d")), "dabc");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEqualCharNodes(traverser.depthFirstPreOrder(charactersOf("a")), "a");","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_tree()","com.google.common.graph.TraverserTest.forTree_depthFirstPreOrder_tree()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_multiGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterableIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_multigraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_cyclicGraphContainingTree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_multigraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPreOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_javadocExample_canBeIteratedMultipleTimes()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPreOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_diamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_cycle()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_breadthFirstIterable_graphContainingTreeAndDiamond()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_emptyGraph()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_tree()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_breadthFirstIterable_twoCycles()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_singleRoot()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forGraph_depthFirstPostOrderIterable_iterableIsLazy()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.TraverserTest.forTree_depthFirstPostOrderIterable_twoTrees()","CLASS: com.google.common.graph.TraverserTest","com.google.common.graph.TraverserTest","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.base.ThrowablesTest.AllowSettingSecurityManagerPolicy","CLASS: com.google.common.base.ThrowablesTest","com.google.common.base.ThrowablesTest","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
    // loader of that class from being garbage-collected even if there is a SecurityManager.
    // The SecurityManager environment makes such leaks more likely because when you create
    // a URLClassLoader with a SecurityManager, the creating code's AccessControlContext is
    // captured, and that references the creating code's ClassLoader.","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_DELETE","JAVADOC: /**
   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the
   * loader of that class from being garbage-collected even if there is a {@link SecurityManager}.
   * The {@link SecurityManager} environment makes such leaks more likely because when you create a
   * {@link URLClassLoader} with a {@link SecurityManager}, the creating code's {@link
   * java.security.AccessControlContext} is captured, and that references the creating code's {@link
   * ClassLoader}.
   */","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableInStaticFieldIfClosed()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Test that the use of a FinalizableReferenceQueue does not subsequently prevent the
    // loader of that class from being garbage-collected.","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: ","THEN_STATEMENT: isJdk9()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: isJdk9()","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_DELETE","JAVADOC: /**
   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the
   * loader of that class from being garbage-collected.
   */","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.testUnloadableWithoutSecurityManager()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.isJdk9()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: IndexedImmutableSet<Entry<E>>","CLASS: com.google.common.collect.ImmutableMultiset.EntrySet","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARENT_CLASS_INSERT","PARAMETERIZED_TYPE: Entry<E>","TYPE_PARAMETERS: ","com.google.common.collect.ImmutableMultiset.EntrySet","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 6)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable set containing the given elements, minus duplicates, in the order each was
   * first specified. That is, if multiple elements are {@linkplain Object#equals equal}, all except
   * the first are ignored.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 6}.
   *
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableSet.of(E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ImmutableSet.Indexed","CLASS: com.google.common.collect.ImmutableSet","com.google.common.collect.ImmutableSet","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((others.length <= (Integer.MAX_VALUE - 12)), "the total number of elements must fit in an int");","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable list containing the given elements, in order.
   *
   * <p>The array {@code others} must not be longer than {@code Integer.MAX_VALUE - 12}.
   *
   * @throws NullPointerException if any element is null
   * @since 3.0 (source-compatible since 2.0)
   */","METHOD: com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","com.google.common.collect.ImmutableList.of(E,E,E,E,E,E,E,E,E,E,E,E,E...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final String[] pieces = domain.split(DOT_REGEX, 2);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> pieces = DOT_SPLITTER.limit(2).splitToList(domain);","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: ((pieces.size() == 2) && matchesType(desiredType, Optional.fromNullable(PublicSuffixPatterns.UNDER.get(pieces.get(1)))));","METHOD: com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","com.google.common.net.InternetDomainName.matchesWildcardSuffixType(Optional<PublicSuffixType>,String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.net.InternetDomainName.DOT_REGEX : String","CLASS: com.google.common.net.InternetDomainName","com.google.common.net.InternetDomainName","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_PROVIDED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_TOKEN_BINDING : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.X_DOWNLOAD_OPTIONS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.SEC_REFERRED_TOKEN_BINDING_ID : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.MediaType.L16_AUDIO : MediaType","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String[] parts = ipString.split(":", (IPV6_PART_COUNT + 2));","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: List<String> parts = IPV6_SPLITTER.splitToList(ipString);","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((parts.size() < 3) || (parts.size() > (IPV6_PART_COUNT + 1)))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","FOR_STATEMENT: (i < (parts.size() - 1))","METHOD: com.google.common.net.InetAddresses.textToNumericFormatV6(String)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (parts.get(i).length() == 0)","FOR_STATEMENT: (i < (parts.size() - 1))","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: partsLo = ((parts.size() - skipIndex) - 1);","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((parts.get(0).length() == 0) && ((-- partsHi) != 0))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: ((Iterables.getLast(parts).length() == 0) && ((-- partsLo) != 0))","THEN_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: partsHi = parts.size();","ELSE_STATEMENT: (skipIndex >= 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get(i)));","FOR_STATEMENT: (i < partsHi)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: rawBytes.putShort(parseHextet(parts.get((parts.size() - i))));","FOR_STATEMENT: (i > 0)","com.google.common.net.InetAddresses.textToNumericFormatV6(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.InetAddresses.IPV6_SPLITTER : Splitter","CLASS: com.google.common.net.InetAddresses","com.google.common.net.InetAddresses","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Read in array length and allocate array","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Read in all elements in the proper order.","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: set(i, s.readDouble());","FOR_STATEMENT: (i < length)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ImmutableLongArray.Builder builder = ImmutableLongArray.builder();","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: builder.add(doubleToRawLongBits(s.readDouble()));","FOR_STATEMENT: (i < length)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_ORDERING_CHANGE","ASSIGNMENT: this.longs = new AtomicLongArray(builder.build().toArray());","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: this.longs = new AtomicLongArray(builder.build().toArray());","METHOD: com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","com.google.common.util.concurrent.AtomicDoubleArray.readObject(java.io.ObjectInputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: checksumSupplier: ImmutableSupplier<? extends Checksum>","PARAMETER: checksumSupplier","com.google.common.hash.ChecksumHashFunction.ChecksumHashFunction(Supplier<? extends Checksum>,int,String)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ImmutableSupplier<? extends Checksum>","FIELD: com.google.common.hash.ChecksumHashFunction.checksumSupplier : ImmutableSupplier<? extends Checksum>","com.google.common.hash.ChecksumHashFunction.checksumSupplier : Supplier<? extends Checksum>","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // Presize the ByteArrayOutputStream since we know how large it will need
    // to be, unless that value is less than the default ByteArrayOutputStream
    // size (32).","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ByteArrayOutputStream out = new ByteArrayOutputStream(Math.max(32, in.available()));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: copy(in, out);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: out.toByteArray();","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(in);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: toByteArrayInternal(in, new ArrayDeque<byte[]>(TO_BYTE_ARRAY_DEQUE_SIZE), 0);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream)","com.google.common.io.ByteStreams.toByteArray(InputStream)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: new byte[8192];","METHOD: com.google.common.io.ByteStreams.createBuffer()","com.google.common.io.ByteStreams.createBuffer()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: new byte[BUFFER_SIZE];","METHOD: com.google.common.io.ByteStreams.createBuffer()","com.google.common.io.ByteStreams.createBuffer()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_TYPE_CHANGE","SINGLE_TYPE: expectedSize: long","PARAMETER: expectedSize","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: FastByteArrayOutputStream out = new FastByteArrayOutputStream();","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: out.write(b);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_INSERT","LINE_COMMENT: // write the byte we read when testing for end of stream","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: copy(in, out);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: byte[] result = new byte[(bytes.length + out.size())];","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: System.arraycopy(bytes, 0, result, 0, bytes.length);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","METHOD_INVOCATION: out.writeTo(result, bytes.length);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: result;","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((expectedSize >= 0), "expectedSize (%s) must be non-negative", expectedSize);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","THROW_STATEMENT: new OutOfMemoryError((expectedSize + " bytes is too large to fit in a byte array"));","THEN_STATEMENT: (expectedSize > MAX_ARRAY_LEN)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (expectedSize > MAX_ARRAY_LEN)","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Deque<byte[]> bufs = new ArrayDeque<byte[]>((TO_BYTE_ARRAY_DEQUE_SIZE + 2));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: bufs.add(bytes);","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: bufs.add(new byte[]{(byte) b});","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: toByteArrayInternal(in, bufs, (bytes.length + 1));","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: byte[] bytes = new byte[(int) expectedSize];","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int remaining = (int) expectedSize;","METHOD: com.google.common.io.ByteStreams.toByteArray(InputStream,long)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int off = ((int) expectedSize - remaining);","WHILE_STATEMENT: (remaining > 0)","com.google.common.io.ByteStreams.toByteArray(InputStream,int)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreams.combineBuffers(Deque<byte[]>,int)","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.io.ByteStreams.toByteArrayInternal(InputStream,Deque<byte[]>,int)","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.TO_BYTE_ARRAY_DEQUE_SIZE : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.MAX_ARRAY_LEN : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.io.ByteStreams.BUFFER_SIZE : int","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"ADDITIONAL_CLASS","CLASS: com.google.common.io.ByteStreams.FastByteArrayOutputStream","CLASS: com.google.common.io.ByteStreams","com.google.common.io.ByteStreams","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Optional<Long> size = sizeIfKnown();","BODY: ","com.google.common.io.ByteSource.read()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (size.isPresent() ? ByteStreams.toByteArray(in, size.get()) : ByteStreams.toByteArray(in));","BODY: ","com.google.common.io.ByteSource.read()","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Overflow (or one or more sources that returned a negative size, but all bets are off in
          // that case)
          // Can't represent anything higher, and realistically there probably isn't anything that
          // can actually be done anyway with the supposed 8+ exbibytes of data the source is
          // claiming to have if we get here, so just stop.","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Long.MAX_VALUE;","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (result < 0)","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.size()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Infinite Iterables can cause problems here. Of course, it's true that most of the other
        // methods on this class also have potential problems with infinite  Iterables. But unlike
        // those, this method can cause issues even if the user is dealing with a (finite) slice()
        // of this source, since the slice's sizeIfKnown() method needs to know the size of the
        // underlying source to know what its size actually is.","THEN_STATEMENT: (! (sources instanceof Collection))","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Optional.absent();","THEN_STATEMENT: (! sizeIfKnown.isPresent())","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (! sizeIfKnown.isPresent())","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"COMMENT_DELETE","LINE_COMMENT: // Overflow (or one or more sources that returned a negative size, but all bets are off in
          // that case)
          // Can't represent anything higher, and realistically there probably isn't anything that
          // can actually be done anyway with the supposed 8+ exbibytes of data the source is
          // claiming to have if we get here, so just stop.","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Optional.of(Long.MAX_VALUE);","THEN_STATEMENT: (result < 0)","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","IF_STATEMENT: (result < 0)","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: (! (sources instanceof Collection))","METHOD: com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (! (sources instanceof Collection))","FOREACH_STATEMENT: ByteSource source:sources","com.google.common.io.ByteSource.ConcatenatedByteSource.sizeIfKnown()","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","com.google.common.primitives.ImmutableDoubleArray.of(double,double...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableLongArray.of(long,long...)","com.google.common.primitives.ImmutableLongArray.of(long,long...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","METHOD_INVOCATION: checkArgument((rest.length <= (Integer.MAX_VALUE - 1)), "the total number of elements must fit in an int");","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Returns an immutable array containing the given values, in order.
   *
   * <p>The array {@code rest} must not be longer than {@code Integer.MAX_VALUE - 1}.
   */","METHOD: com.google.common.primitives.ImmutableIntArray.of(int,int...)","com.google.common.primitives.ImmutableIntArray.of(int,int...)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
 * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through
 * {@code 0x7F}), and to strings containing such characters.
 *
 * <p>ASCII utilities also exist in other classes of this package:
 *
 * <ul>
 *   <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
 *   <li>{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
 *   <li>{@link CharMatcher#ascii} matches ASCII characters and provides text processing methods
 *       which operate only on the ASCII characters of a string.
 * </ul>
 *
 * @author Catherine Berry
 * @author Gregory Kick
 * @since 7.0
 */","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isUpperCase(c)","com.google.common.base.Ascii.toLowerCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (char) ((c | CASE_MASK) - 'a');","METHOD: com.google.common.base.Ascii.getAlphaIndex(char)","com.google.common.base.Ascii.getAlphaIndex(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isLowerCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toUpperCase(char)","com.google.common.base.Ascii.toUpperCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","RETURN_STATEMENT: (isUpperCase(c) ? (char) (c ^ CASE_MASK) : c);","METHOD: com.google.common.base.Ascii.toLowerCase(char)","com.google.common.base.Ascii.toLowerCase(char)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: chars[i] = (char) (c ^ CASE_MASK);","THEN_STATEMENT: isLowerCase(c)","com.google.common.base.Ascii.toUpperCase(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_OBJECT_STATE","FIELD: com.google.common.base.Ascii.CASE_MASK : char","CLASS: com.google.common.base.Ascii","com.google.common.base.Ascii","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: ((string == null) ? "" : string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.nullToEmpty(string);","METHOD: com.google.common.base.Strings.nullToEmpty(String)","com.google.common.base.Strings.nullToEmpty(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: (isNullOrEmpty(string) ? null : string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: Platform.emptyToNull(string);","METHOD: com.google.common.base.Strings.emptyToNull(String)","com.google.common.base.Strings.emptyToNull(String)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.nullToEmpty(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.Platform.emptyToNull(String)","CLASS: com.google.common.base.Platform","com.google.common.base.Platform","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(Lists.<CharSequence>newLinkedList(), encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.parseTrie(CharSequence)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"PARAMETER_DELETE","PARAMETER: start","PARAMETERS: ","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","HIGH"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"DOC_UPDATE","JAVADOC: /**
   * Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.
   */","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","NONE"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_INSERT","RETURN_STATEMENT: idx;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_DELETE","RETURN_STATEMENT: (idx - start);","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","MEDIUM"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int idx = start;","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","METHOD_INVOCATION: stack.add(0, reverse(encoded.subSequence(start, idx)));","METHOD: com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,int,ImmutableMap.Builder<String, PublicSuffixType>)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
9,0a2258e6691a22aa7ff2604871b520d44bbac01f,"STATEMENT_UPDATE","ASSIGNMENT: idx += doParseTrieToBuilder(stack, encoded, idx, builder);","WHILE_STATEMENT: (idx < encodedLen)","com.google.thirdparty.publicsuffix.TrieParser.doParseTrieToBuilder(List<CharSequence>,CharSequence,ImmutableMap.Builder<String, PublicSuffixType>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");","METHOD: com.google.common.collect.TreeTraverserTest.testBreadthOrder()","com.google.common.collect.TreeTraverserTest.testBreadthOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");","METHOD: com.google.common.collect.TreeTraverserTest.testPreOrder()","com.google.common.collect.TreeTraverserTest.testPreOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: tester.testAllPublicInstanceMethods(BIN_ADAPTER);","METHOD: com.google.common.collect.TreeTraverserTest.testNulls()","com.google.common.collect.TreeTraverserTest.testNulls()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");","METHOD: com.google.common.collect.TreeTraverserTest.testPostOrder()","com.google.common.collect.TreeTraverserTest.testPostOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_DELETE","SINGLE_TYPE: Node","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.value = value;","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","CONSTRUCTOR_INVOCATION: super(value);","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.Tree.value : char","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: iterable: Iterable<? extends Node>","PARAMETER: iterable","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Node t:iterable","METHOD: com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<? extends Node>)","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.binaryIterationOrder(Iterable<BinaryTree>)","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.testInOrder()","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.BIN_ADAPTER : BinaryTreeTraverser<BinaryTree>","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bg : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bf : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bc : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bd : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bb : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.be : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.ba : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.Node","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.getElementSetDuplicateInitializingMethods()","CLASS: com.google.common.collect.testing.google.MultisetElementSetTester","com.google.common.collect.testing.google.MultisetElementSetTester","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nullValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_invalidAttribute()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testToString()","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTaskTest","com.google.common.util.concurrent.TrustedListenableFutureTaskTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(true, "testCheckNoOverflow_success", 0, 0);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("testCheckNoOverflow_failure(0, 0)");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(false, "testCheckNoOverflow_failure", 0, 0);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assert_().fail(template, args);","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = System.getProperties().getProperty("java.runtime.name").contains("Android");","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = TestPlatform.isAndroid();","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");","METHOD: com.google.common.collect.TreeTraverserTest.testBreadthOrder()","com.google.common.collect.TreeTraverserTest.testBreadthOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");","METHOD: com.google.common.collect.TreeTraverserTest.testPreOrder()","com.google.common.collect.TreeTraverserTest.testPreOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: tester.testAllPublicInstanceMethods(BIN_ADAPTER);","METHOD: com.google.common.collect.TreeTraverserTest.testNulls()","com.google.common.collect.TreeTraverserTest.testNulls()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");","METHOD: com.google.common.collect.TreeTraverserTest.testPostOrder()","com.google.common.collect.TreeTraverserTest.testPostOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_DELETE","SINGLE_TYPE: Node","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.value = value;","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","CONSTRUCTOR_INVOCATION: super(value);","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.Tree.value : char","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: iterable: Iterable<? extends Node>","PARAMETER: iterable","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Node t:iterable","METHOD: com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<? extends Node>)","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.binaryIterationOrder(Iterable<BinaryTree>)","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.testInOrder()","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.BIN_ADAPTER : BinaryTreeTraverser<BinaryTree>","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bg : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bf : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bc : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bd : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bb : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.be : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.ba : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.Node","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.getElementSetDuplicateInitializingMethods()","CLASS: com.google.common.collect.testing.google.MultisetElementSetTester","com.google.common.collect.testing.google.MultisetElementSetTester","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
 * Benchmarks for the {@code TreeTraverser} operations on binary trees.
 *
 * @author Louis Wasserman
 */","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);","METHOD: com.google.common.collect.BinaryTreeTraverserBenchmark.setUp()","com.google.common.collect.BinaryTreeTraverserBenchmark.setUp()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.BinaryTreeTraverserBenchmark.BINARY_VIEWER : BinaryTreeTraverser<BinaryNode>","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.BinaryTreeTraverserBenchmark.useBinaryTraverser : boolean","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> uppercaseAcronyms = ImmutableSet.of("ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UID", "URL", "WWW", "XSS");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nullValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_invalidAttribute()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, numCalls.get());","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testDelegateRejection()","com.google.common.util.concurrent.SequentialExecutorTest.testDelegateRejection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testRejectedExecutionThrownWithMultipleCalls()","CLASS: com.google.common.util.concurrent.SequentialExecutorTest","com.google.common.util.concurrent.SequentialExecutorTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testToString()","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTaskTest","com.google.common.util.concurrent.TrustedListenableFutureTaskTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractChainedListenableFutureTest.testInputFutureToString()","CLASS: com.google.common.util.concurrent.AbstractChainedListenableFutureTest","com.google.common.util.concurrent.AbstractChainedListenableFutureTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FuturesTransformAsyncTest.testAsyncToString()","CLASS: com.google.common.util.concurrent.FuturesTransformAsyncTest","com.google.common.util.concurrent.FuturesTransformAsyncTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableDirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableDirectedGraphTest","com.google.common.graph.ConfigurableDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleDirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleDirectedGraphTest","com.google.common.graph.ConfigurableSimpleDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableUndirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableUndirectedGraphTest","com.google.common.graph.ConfigurableUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(true, "testCheckNoOverflow_success", 0, 0);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("testCheckNoOverflow_failure(0, 0)");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(false, "testCheckNoOverflow_failure", 0, 0);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assert_().fail(template, args);","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = System.getProperties().getProperty("java.runtime.name").contains("Android");","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = TestPlatform.isAndroid();","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ((e.isAnnotationPresent(javax.annotation.CheckForNull.class) || e.isAnnotationPresent(javax.annotation.Nullable.class)) || e.isAnnotationPresent(NullableDecl.class));","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: true;","THEN_STATEMENT: NULLABLE_ANNOTATIONS.contains(annotation.annotationType().getName())","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: NULLABLE_ANNOTATIONS.contains(annotation.annotationType().getName())","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: false;","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATIONS : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.testing.AbstractPackageSanityTestsTest.ConcretePackageSanityTests","CLASS: com.google.common.testing.AbstractPackageSanityTestsTest","com.google.common.testing.AbstractPackageSanityTestsTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final URL[] urls = myLoader.getURLs();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final ClassLoader myLoader = getClass().getClassLoader();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final URL[] urls = myLoader.getURLs();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final ClassLoader myLoader = getClass().getClassLoader();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.parseJavaClassPath()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.getClassPathUrls()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.count(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final Iterator<Entry<E>> backingEntries = backingMap.entrySet().iterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new Iterator<Multiset.Entry<E>>() {
  Entry<E> toRemove;
  boolean canRemove;
  public @Override boolean hasNext() {
    return backingEntries.hasNext();
  }
  public @Override Multiset.Entry<E> next() {
    final Entry<E> mapEntry = backingEntries.next();
    toRemove = mapEntry;
    canRemove = true;
    return mapEntry;
  }
  public @Override void remove() {
    checkRemove(canRemove);
    size -= toRemove.getCount();
    backingEntries.remove();
    canRemove = false;
    toRemove = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: new Itr<Entry<E>>() {
  @Override Entry<E> result(int entryIndex) {
    return backingMap.getEntry(entryIndex);
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.distinctElements()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new MapBasedMultisetIterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (int) newCount);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: size += occurrences;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: backingMap.put(element, occurrences);","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","ASSIGNMENT: size += occurrences;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.put(element, occurrences);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: size = 0;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.clear()","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (oldCount - occurrences));","THEN_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.removeEntry(entryIndex);","ELSE_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size : long","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_INSERT","JAVADOC: /** Standard constructor. */","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_INSERT","PARAMETER: backingMap","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: distinctElements","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.backingMap = checkNotNull(backingMap);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.size = super.size();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: init(distinctElements);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createEntrySet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObjectNoData()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setBackingMap(AbstractObjectCountMap<E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createElementSet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObject(ObjectInputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.writeObject(ObjectOutputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.elementIterator()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int,int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.addTo(Multiset<? super E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.init(int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.AbstractMapBasedMultiset.backingMap : ObjectCountHashMap<E>","com.google.common.collect.AbstractMapBasedMultiset.backingMap : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.Itr","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSet.of();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptySet();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.SortedMultisets.ElementSet.iterator()","CLASS: com.google.common.collect.SortedMultisets.ElementSet","com.google.common.collect.SortedMultisets.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: Multisets.linearTimeSizeImpl(this);","METHOD: com.google.common.collect.ForwardingMultiset.standardSize()","com.google.common.collect.ForwardingMultiset.standardSize()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ForwardingMultiset.StandardElementSet.iterator()","CLASS: com.google.common.collect.ForwardingMultiset.StandardElementSet","com.google.common.collect.ForwardingMultiset.StandardElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.ImmutableMultiset.createEntrySet()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ObjectCountHashMap<? extends E> backingMap = tryGetMap(multiset);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), backingMap.size()));","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: addCopies(backingMap.getKey(i), backingMap.getValue(i));","FOR_STATEMENT: (i >= 0)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = backingMap.firstIndex();","FOR_INIT: int i = backingMap.firstIndex();","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: i = backingMap.nextIndex(i);","FOR_INCR: i = backingMap.nextIndex(i)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOR_STATEMENT: (i >= 0)","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Set<? extends Entry<? extends E>> entries = multiset.entrySet();","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), entries.size()));","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // might overlap","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (backingMap != null)","IF_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (backingMap != null)","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","FOREACH_STATEMENT: Entry<? extends E> entry:multiset.entrySet()","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (contents.size() == 0)","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new RegularImmutableMultiset<E>(contents);","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableMultiset.Builder.tryGetMap(Iterable<T>)","CLASS: com.google.common.collect.ImmutableMultiset.Builder","com.google.common.collect.ImmutableMultiset.Builder","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.ImmutableMultiset.Builder.contents : ObjectCountHashMap<E>","com.google.common.collect.ImmutableMultiset.Builder.contents : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @MonotonicNonNullDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedKeySortedSetMultimap.createKeySet()","CLASS: com.google.common.collect.AbstractSortedKeySortedSetMultimap","com.google.common.collect.AbstractSortedKeySortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.addAll(Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.hashCode()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.add(E)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.retainAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.remove(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.removeAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.clear(entryIterator());","METHOD: com.google.common.collect.AbstractMultiset.clear()","com.google.common.collect.AbstractMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.clear()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.equals(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.ElementSet.iterator()","CLASS: com.google.common.collect.AbstractMultiset.ElementSet","com.google.common.collect.AbstractMultiset.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.count(Object)","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.size()","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: true;","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Multiset<? extends E> that = cast(elements);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: self.add(entry.getElement(), entry.getCount());","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: elements.isEmpty()","IF_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(self);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(elements);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: addAllImpl(self, cast(elements));","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: elements.isEmpty()","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int count(Object element) {
    return Math.max(multiset1.count(element), multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = Math.max(entry1.getCount(), multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: ViewMultiset<E>","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.clear()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.distinctElements()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.elementIterator()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int size() {
    return IntMath.saturatedAdd(multiset1.size(), multiset2.size());
  }
  public @Override int count(Object element) {
    return (multiset1.count(element) + multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = (entry1.getCount() + multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.min(count1, multiset2.count(element)));
  }
  @Override Set<E> createElementSet() {
    return Sets.intersection(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = Math.min(entry1.getCount(), multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(@NullableDecl Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.max(0, (count1 - multiset2.count(element))));
  }
  public @Override void clear() {
    throw new UnsupportedOperationException();
  }
  @Override Iterator<E> elementIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<E>() {
  protected @Override E computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        if ((entry1.getCount() > multiset2.count(element)))
            {
              return element;
            }
      }
    return endOfData();
  }
};
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = (entry1.getCount() - multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
  @Override int distinctElements() {
    return Iterators.size(entryIterator());
  }
};","METHOD: com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new TransformedIterator<Entry<E>, E>(multiset().entrySet().iterator()) {
  @Override E transform(Entry<E> entry) {
    return entry.getElement();
  }
};","METHOD: com.google.common.collect.Multisets.ElementSet.iterator()","com.google.common.collect.Multisets.ElementSet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.Multisets.ElementSet.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","com.google.common.collect.Multisets.sizeImpl(Multiset<?>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Multiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,AbstractMapBasedMultiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.elementIterator(Iterator<Entry<E>>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.Multisets.ViewMultiset","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableList.of();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptyList();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Comparator<? super V> comparator = valueComparator();","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (comparator == null)","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (comparator == null)","IF_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSortedSet.emptySet(valueComparator());","ELSE_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","THEN_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ForwardingIterator<Entry<E>>() {
  private @NullableDecl Entry<E> last;
  protected @Override Iterator<Entry<E>> delegate() {
    return readOnlyIterator;
  }
  public @Override Entry<E> next() {
    last = super.next();
    return last;
  }
  public @Override void remove() {
    checkRemove((last != null));
    ConcurrentHashMultiset.this.setCount(last.getElement(), 0);
    last = null;
  }
};","METHOD: com.google.common.collect.ConcurrentHashMultiset.entryIterator()","com.google.common.collect.ConcurrentHashMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ConcurrentHashMultiset.iterator()","CLASS: com.google.common.collect.ConcurrentHashMultiset","com.google.common.collect.ConcurrentHashMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ConcurrentHashMultiset.elementIterator()","CLASS: com.google.common.collect.ConcurrentHashMultiset","com.google.common.collect.ConcurrentHashMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Sets.unmodifiableNavigableSet((NavigableSet<E>) collection);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSortedSet((SortedSet<E>) collection);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSet((Set<E>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableList((List<E>) collection);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Collections.unmodifiableCollection(collection);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new Iterator<K>() {
  @NullableDecl Entry<K, Collection<V>> entry;
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    entry = entryIterator.next();
    return entry.getKey();
  }
  public @Override void remove() {
    checkRemove((entry != null));
    Collection<V> collection = entry.getValue();
    entryIterator.remove();
    totalSize -= collection.size();
    collection.clear();
    entry = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedNavigableSet(key, (NavigableSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSortedSet(key, (SortedSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSet(key, (Set<V>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: wrapList(key, (List<V>) collection, null);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new WrappedCollection(key, collection, null);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkRemove((collection != null));","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: collection = null;","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableKeySet((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedKeySet((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new KeySet(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableAsMap((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedAsMap((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new AsMap(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableAsMap()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableKeySet()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.HTTP2_SETTINGS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String normalizedAttribute = normalizeToken(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(normalizedAttribute, normalizeParameterValue(normalizedAttribute, value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: MediaType mediaType = new MediaType(type, subtype, builder.build());","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // if the attribute isn't charset, we can just inherit the current parsedCharset","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // Return one of the constants if the media type is a known type.","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: MoreObjects.firstNonNull(KNOWN_TYPES.get(mediaType), mediaType);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String key = entry.getKey();","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(key))","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: mediaType.parsedCharset = this.parsedCharset;","THEN_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(key, entry.getValue());","THEN_STATEMENT: (! normalizedAttribute.equals(key))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: withParameters(attribute, ImmutableSet.of(value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
   */","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.withParameters(String,Iterable<String>)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.WrappingExecutorService.wrapTasks(Collection<? extends Callable<T>>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.RateLimiter.SleepingStopwatch.createFromSystemTimer()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s outgoing edges in the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * <p>This is <i>not</i> the same as "all nodes reachable from {@code node} by following outgoing
   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.successors(N)","com.google.common.graph.Graph.successors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns the order of iteration for the elements of {@link #nodes()}. */","METHOD: com.google.common.graph.Graph.nodeOrder()","com.google.common.graph.Graph.nodeOrder()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.inDegree(N)","com.google.common.graph.Graph.inDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting
   * to add a self-loop to a graph that does not allow them will throw an {@link
   * IllegalArgumentException}.
   */","METHOD: com.google.common.graph.Graph.allowsSelfLoops()","com.google.common.graph.Graph.allowsSelfLoops()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if the edges in this graph are directed. Directed edges connect a {@link
   * EndpointPair#source() source node} to a {@link EndpointPair#target() target node}, while
   * undirected edges connect a pair of nodes to each other.
   */","METHOD: com.google.common.graph.Graph.isDirected()","com.google.common.graph.Graph.isDirected()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,
   * the number of times an edge touches {@code node}).
   *
   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}.
   *
   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of
   * self-loops incident to {@code node}).
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.degree(N)","com.google.common.graph.Graph.degree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}. */","METHOD: com.google.common.graph.Graph.nodes()","com.google.common.graph.Graph.nodes()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.predecessors(N)","com.google.common.graph.Graph.predecessors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.outDegree(N)","com.google.common.graph.Graph.outDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.adjacentNodes(N)","com.google.common.graph.Graph.adjacentNodes(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.incidentEdges(N)","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s outgoing edges in the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * <p>This is <i>not</i> the same as "all nodes reachable from {@code node} by following outgoing
   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.successors(N)","com.google.common.graph.ValueGraph.successors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns the order of iteration for the elements of {@link #nodes()}. */","METHOD: com.google.common.graph.ValueGraph.nodeOrder()","com.google.common.graph.ValueGraph.nodeOrder()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.inDegree(N)","com.google.common.graph.ValueGraph.inDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting
   * to add a self-loop to a graph that does not allow them will throw an {@link
   * IllegalArgumentException}.
   */","METHOD: com.google.common.graph.ValueGraph.allowsSelfLoops()","com.google.common.graph.ValueGraph.allowsSelfLoops()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if the edges in this graph are directed. Directed edges connect a {@link
   * EndpointPair#source() source node} to a {@link EndpointPair#target() target node}, while
   * undirected edges connect a pair of nodes to each other.
   */","METHOD: com.google.common.graph.ValueGraph.isDirected()","com.google.common.graph.ValueGraph.isDirected()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,
   * the number of times an edge touches {@code node}).
   *
   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}.
   *
   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of
   * self-loops incident to {@code node}).
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.degree(N)","com.google.common.graph.ValueGraph.degree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}. */","METHOD: com.google.common.graph.ValueGraph.nodes()","com.google.common.graph.ValueGraph.nodes()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.predecessors(N)","com.google.common.graph.ValueGraph.predecessors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.outDegree(N)","com.google.common.graph.ValueGraph.outDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.adjacentNodes(N)","com.google.common.graph.ValueGraph.adjacentNodes(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.incidentEdges(N)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.incidentEdges(N)","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((leadingZeros >= Long.SIZE), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a >= 0) | (b != Long.MIN_VALUE)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a == 0) || ((result / a) == b)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) < 0) | ((a ^ result) >= 0)), "checkedAdd", a, b);","METHOD: com.google.common.math.LongMath.checkedAdd(long,long)","com.google.common.math.LongMath.checkedAdd(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) >= 0) | ((a ^ result) >= 0)), "checkedSubtract", a, b);","METHOD: com.google.common.math.LongMath.checkedSubtract(long,long)","com.google.common.math.LongMath.checkedSubtract(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Long.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Long.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_LONG) <= b) && (b <= FLOOR_SQRT_MAX_LONG)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedMultiply", a, b);","METHOD: com.google.common.math.IntMath.checkedMultiply(int,int)","com.google.common.math.IntMath.checkedMultiply(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedAdd", a, b);","METHOD: com.google.common.math.IntMath.checkedAdd(int,int)","com.google.common.math.IntMath.checkedAdd(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Integer.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Integer.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_INT) <= b) & (b <= FLOOR_SQRT_MAX_INT)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedSubtract", a, b);","METHOD: com.google.common.math.IntMath.checkedSubtract(int,int)","com.google.common.math.IntMath.checkedSubtract(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: methodName","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: a","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: b","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","THROW_STATEMENT: new ArithmeticException((((((("overflow: " + methodName) + "(") + a) + ", ") + b) + ")"));","THEN_STATEMENT: (! condition)","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkNoOverflow(boolean,String,int,int)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.count(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final Iterator<Entry<E>> backingEntries = backingMap.entrySet().iterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new Iterator<Multiset.Entry<E>>() {
  Entry<E> toRemove;
  boolean canRemove;
  public @Override boolean hasNext() {
    return backingEntries.hasNext();
  }
  public @Override Multiset.Entry<E> next() {
    final Entry<E> mapEntry = backingEntries.next();
    toRemove = mapEntry;
    canRemove = true;
    return mapEntry;
  }
  public @Override void remove() {
    checkRemove(canRemove);
    size -= toRemove.getCount();
    backingEntries.remove();
    canRemove = false;
    toRemove = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: new Itr<Entry<E>>() {
  @Override Entry<E> result(int entryIndex) {
    return backingMap.getEntry(entryIndex);
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.distinctElements()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new MapBasedMultisetIterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (int) newCount);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: size += occurrences;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: backingMap.put(element, occurrences);","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","ASSIGNMENT: size += occurrences;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.put(element, occurrences);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: size = 0;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.clear()","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (oldCount - occurrences));","THEN_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.removeEntry(entryIndex);","ELSE_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size : long","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_INSERT","JAVADOC: /** Standard constructor. */","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_INSERT","PARAMETER: backingMap","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: distinctElements","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.backingMap = checkNotNull(backingMap);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.size = super.size();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: init(distinctElements);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createEntrySet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObjectNoData()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setBackingMap(AbstractObjectCountMap<E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createElementSet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObject(ObjectInputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.writeObject(ObjectOutputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.elementIterator()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int,int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.addTo(Multiset<? super E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.init(int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.AbstractMapBasedMultiset.backingMap : ObjectCountHashMap<E>","com.google.common.collect.AbstractMapBasedMultiset.backingMap : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.Itr","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSet.of();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptySet();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.SortedMultisets.ElementSet.iterator()","CLASS: com.google.common.collect.SortedMultisets.ElementSet","com.google.common.collect.SortedMultisets.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: Multisets.linearTimeSizeImpl(this);","METHOD: com.google.common.collect.ForwardingMultiset.standardSize()","com.google.common.collect.ForwardingMultiset.standardSize()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ForwardingMultiset.StandardElementSet.iterator()","CLASS: com.google.common.collect.ForwardingMultiset.StandardElementSet","com.google.common.collect.ForwardingMultiset.StandardElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.ImmutableMultiset.createEntrySet()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ObjectCountHashMap<? extends E> backingMap = tryGetMap(multiset);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), backingMap.size()));","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: addCopies(backingMap.getKey(i), backingMap.getValue(i));","FOR_STATEMENT: (i >= 0)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = backingMap.firstIndex();","FOR_INIT: int i = backingMap.firstIndex();","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: i = backingMap.nextIndex(i);","FOR_INCR: i = backingMap.nextIndex(i)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOR_STATEMENT: (i >= 0)","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Set<? extends Entry<? extends E>> entries = multiset.entrySet();","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), entries.size()));","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // might overlap","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (backingMap != null)","IF_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (backingMap != null)","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","FOREACH_STATEMENT: Entry<? extends E> entry:multiset.entrySet()","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (contents.size() == 0)","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new RegularImmutableMultiset<E>(contents);","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableMultiset.Builder.tryGetMap(Iterable<T>)","CLASS: com.google.common.collect.ImmutableMultiset.Builder","com.google.common.collect.ImmutableMultiset.Builder","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.ImmutableMultiset.Builder.contents : ObjectCountHashMap<E>","com.google.common.collect.ImmutableMultiset.Builder.contents : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @MonotonicNonNullDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedKeySortedSetMultimap.createKeySet()","CLASS: com.google.common.collect.AbstractSortedKeySortedSetMultimap","com.google.common.collect.AbstractSortedKeySortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.addAll(Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.hashCode()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.add(E)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.retainAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.remove(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.removeAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.clear(entryIterator());","METHOD: com.google.common.collect.AbstractMultiset.clear()","com.google.common.collect.AbstractMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.clear()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.equals(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.ElementSet.iterator()","CLASS: com.google.common.collect.AbstractMultiset.ElementSet","com.google.common.collect.AbstractMultiset.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.count(Object)","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.size()","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: true;","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Multiset<? extends E> that = cast(elements);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: self.add(entry.getElement(), entry.getCount());","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: elements.isEmpty()","IF_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(self);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(elements);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: addAllImpl(self, cast(elements));","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: elements.isEmpty()","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int count(Object element) {
    return Math.max(multiset1.count(element), multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = Math.max(entry1.getCount(), multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: ViewMultiset<E>","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.clear()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.distinctElements()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.elementIterator()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int size() {
    return IntMath.saturatedAdd(multiset1.size(), multiset2.size());
  }
  public @Override int count(Object element) {
    return (multiset1.count(element) + multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = (entry1.getCount() + multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.min(count1, multiset2.count(element)));
  }
  @Override Set<E> createElementSet() {
    return Sets.intersection(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = Math.min(entry1.getCount(), multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(@NullableDecl Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.max(0, (count1 - multiset2.count(element))));
  }
  public @Override void clear() {
    throw new UnsupportedOperationException();
  }
  @Override Iterator<E> elementIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<E>() {
  protected @Override E computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        if ((entry1.getCount() > multiset2.count(element)))
            {
              return element;
            }
      }
    return endOfData();
  }
};
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = (entry1.getCount() - multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
  @Override int distinctElements() {
    return Iterators.size(entryIterator());
  }
};","METHOD: com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new TransformedIterator<Entry<E>, E>(multiset().entrySet().iterator()) {
  @Override E transform(Entry<E> entry) {
    return entry.getElement();
  }
};","METHOD: com.google.common.collect.Multisets.ElementSet.iterator()","com.google.common.collect.Multisets.ElementSet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.Multisets.ElementSet.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","com.google.common.collect.Multisets.sizeImpl(Multiset<?>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Multiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,AbstractMapBasedMultiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.elementIterator(Iterator<Entry<E>>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.Multisets.ViewMultiset","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableList.of();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptyList();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Comparator<? super V> comparator = valueComparator();","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (comparator == null)","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (comparator == null)","IF_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSortedSet.emptySet(valueComparator());","ELSE_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","THEN_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Sets.unmodifiableNavigableSet((NavigableSet<E>) collection);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSortedSet((SortedSet<E>) collection);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSet((Set<E>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableList((List<E>) collection);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Collections.unmodifiableCollection(collection);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new Iterator<K>() {
  @NullableDecl Entry<K, Collection<V>> entry;
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    entry = entryIterator.next();
    return entry.getKey();
  }
  public @Override void remove() {
    checkRemove((entry != null));
    Collection<V> collection = entry.getValue();
    entryIterator.remove();
    totalSize -= collection.size();
    collection.clear();
    entry = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedNavigableSet(key, (NavigableSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSortedSet(key, (SortedSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSet(key, (Set<V>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: wrapList(key, (List<V>) collection, null);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new WrappedCollection(key, collection, null);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkRemove((collection != null));","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: collection = null;","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableKeySet((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedKeySet((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new KeySet(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableAsMap((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedAsMap((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new AsMap(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableAsMap()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableKeySet()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.HTTP2_SETTINGS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String normalizedAttribute = normalizeToken(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(normalizedAttribute, normalizeParameterValue(normalizedAttribute, value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: MediaType mediaType = new MediaType(type, subtype, builder.build());","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // if the attribute isn't charset, we can just inherit the current parsedCharset","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // Return one of the constants if the media type is a known type.","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: MoreObjects.firstNonNull(KNOWN_TYPES.get(mediaType), mediaType);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String key = entry.getKey();","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(key))","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: mediaType.parsedCharset = this.parsedCharset;","THEN_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(key, entry.getValue());","THEN_STATEMENT: (! normalizedAttribute.equals(key))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: withParameters(attribute, ImmutableSet.of(value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
   */","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.withParameters(String,Iterable<String>)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((leadingZeros >= Long.SIZE), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a >= 0) | (b != Long.MIN_VALUE)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a == 0) || ((result / a) == b)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) < 0) | ((a ^ result) >= 0)), "checkedAdd", a, b);","METHOD: com.google.common.math.LongMath.checkedAdd(long,long)","com.google.common.math.LongMath.checkedAdd(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) >= 0) | ((a ^ result) >= 0)), "checkedSubtract", a, b);","METHOD: com.google.common.math.LongMath.checkedSubtract(long,long)","com.google.common.math.LongMath.checkedSubtract(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Long.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Long.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_LONG) <= b) && (b <= FLOOR_SQRT_MAX_LONG)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedMultiply", a, b);","METHOD: com.google.common.math.IntMath.checkedMultiply(int,int)","com.google.common.math.IntMath.checkedMultiply(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedAdd", a, b);","METHOD: com.google.common.math.IntMath.checkedAdd(int,int)","com.google.common.math.IntMath.checkedAdd(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Integer.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Integer.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_INT) <= b) & (b <= FLOOR_SQRT_MAX_INT)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedSubtract", a, b);","METHOD: com.google.common.math.IntMath.checkedSubtract(int,int)","com.google.common.math.IntMath.checkedSubtract(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: methodName","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: a","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: b","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","THROW_STATEMENT: new ArithmeticException((((((("overflow: " + methodName) + "(") + a) + ", ") + b) + ")"));","THEN_STATEMENT: (! condition)","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkNoOverflow(boolean,String,int,int)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.count(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final Iterator<Entry<E>> backingEntries = backingMap.entrySet().iterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new Iterator<Multiset.Entry<E>>() {
  Entry<E> toRemove;
  boolean canRemove;
  public @Override boolean hasNext() {
    return backingEntries.hasNext();
  }
  public @Override Multiset.Entry<E> next() {
    final Entry<E> mapEntry = backingEntries.next();
    toRemove = mapEntry;
    canRemove = true;
    return mapEntry;
  }
  public @Override void remove() {
    checkRemove(canRemove);
    size -= toRemove.getCount();
    backingEntries.remove();
    canRemove = false;
    toRemove = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: new Itr<Entry<E>>() {
  @Override Entry<E> result(int entryIndex) {
    return backingMap.getEntry(entryIndex);
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.distinctElements()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new MapBasedMultisetIterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (int) newCount);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: size += occurrences;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: backingMap.put(element, occurrences);","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","ASSIGNMENT: size += occurrences;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.put(element, occurrences);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: size = 0;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.clear()","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (oldCount - occurrences));","THEN_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.removeEntry(entryIndex);","ELSE_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size : long","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_INSERT","JAVADOC: /** Standard constructor. */","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_INSERT","PARAMETER: backingMap","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: distinctElements","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.backingMap = checkNotNull(backingMap);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.size = super.size();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: init(distinctElements);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createEntrySet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObjectNoData()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setBackingMap(AbstractObjectCountMap<E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createElementSet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObject(ObjectInputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.writeObject(ObjectOutputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.elementIterator()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int,int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.addTo(Multiset<? super E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.init(int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.AbstractMapBasedMultiset.backingMap : ObjectCountHashMap<E>","com.google.common.collect.AbstractMapBasedMultiset.backingMap : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.Itr","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSet.of();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptySet();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.SortedMultisets.ElementSet.iterator()","CLASS: com.google.common.collect.SortedMultisets.ElementSet","com.google.common.collect.SortedMultisets.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: Multisets.linearTimeSizeImpl(this);","METHOD: com.google.common.collect.ForwardingMultiset.standardSize()","com.google.common.collect.ForwardingMultiset.standardSize()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ForwardingMultiset.StandardElementSet.iterator()","CLASS: com.google.common.collect.ForwardingMultiset.StandardElementSet","com.google.common.collect.ForwardingMultiset.StandardElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.ImmutableMultiset.createEntrySet()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ObjectCountHashMap<? extends E> backingMap = tryGetMap(multiset);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), backingMap.size()));","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: addCopies(backingMap.getKey(i), backingMap.getValue(i));","FOR_STATEMENT: (i >= 0)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = backingMap.firstIndex();","FOR_INIT: int i = backingMap.firstIndex();","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: i = backingMap.nextIndex(i);","FOR_INCR: i = backingMap.nextIndex(i)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOR_STATEMENT: (i >= 0)","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Set<? extends Entry<? extends E>> entries = multiset.entrySet();","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), entries.size()));","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // might overlap","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (backingMap != null)","IF_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (backingMap != null)","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","FOREACH_STATEMENT: Entry<? extends E> entry:multiset.entrySet()","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (contents.size() == 0)","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new RegularImmutableMultiset<E>(contents);","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableMultiset.Builder.tryGetMap(Iterable<T>)","CLASS: com.google.common.collect.ImmutableMultiset.Builder","com.google.common.collect.ImmutableMultiset.Builder","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.ImmutableMultiset.Builder.contents : ObjectCountHashMap<E>","com.google.common.collect.ImmutableMultiset.Builder.contents : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @MonotonicNonNullDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedKeySortedSetMultimap.createKeySet()","CLASS: com.google.common.collect.AbstractSortedKeySortedSetMultimap","com.google.common.collect.AbstractSortedKeySortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.addAll(Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.hashCode()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.add(E)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.retainAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.remove(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.removeAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.clear(entryIterator());","METHOD: com.google.common.collect.AbstractMultiset.clear()","com.google.common.collect.AbstractMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.clear()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.equals(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.ElementSet.iterator()","CLASS: com.google.common.collect.AbstractMultiset.ElementSet","com.google.common.collect.AbstractMultiset.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.count(Object)","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.size()","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: true;","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Multiset<? extends E> that = cast(elements);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: self.add(entry.getElement(), entry.getCount());","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: elements.isEmpty()","IF_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(self);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(elements);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: addAllImpl(self, cast(elements));","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: elements.isEmpty()","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int count(Object element) {
    return Math.max(multiset1.count(element), multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = Math.max(entry1.getCount(), multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: ViewMultiset<E>","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.clear()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.distinctElements()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.elementIterator()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int size() {
    return IntMath.saturatedAdd(multiset1.size(), multiset2.size());
  }
  public @Override int count(Object element) {
    return (multiset1.count(element) + multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = (entry1.getCount() + multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.min(count1, multiset2.count(element)));
  }
  @Override Set<E> createElementSet() {
    return Sets.intersection(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = Math.min(entry1.getCount(), multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(@NullableDecl Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.max(0, (count1 - multiset2.count(element))));
  }
  public @Override void clear() {
    throw new UnsupportedOperationException();
  }
  @Override Iterator<E> elementIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<E>() {
  protected @Override E computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        if ((entry1.getCount() > multiset2.count(element)))
            {
              return element;
            }
      }
    return endOfData();
  }
};
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = (entry1.getCount() - multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
  @Override int distinctElements() {
    return Iterators.size(entryIterator());
  }
};","METHOD: com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new TransformedIterator<Entry<E>, E>(multiset().entrySet().iterator()) {
  @Override E transform(Entry<E> entry) {
    return entry.getElement();
  }
};","METHOD: com.google.common.collect.Multisets.ElementSet.iterator()","com.google.common.collect.Multisets.ElementSet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.Multisets.ElementSet.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","com.google.common.collect.Multisets.sizeImpl(Multiset<?>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Multiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,AbstractMapBasedMultiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.elementIterator(Iterator<Entry<E>>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.Multisets.ViewMultiset","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableList.of();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptyList();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Comparator<? super V> comparator = valueComparator();","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (comparator == null)","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (comparator == null)","IF_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSortedSet.emptySet(valueComparator());","ELSE_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","THEN_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Sets.unmodifiableNavigableSet((NavigableSet<E>) collection);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSortedSet((SortedSet<E>) collection);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSet((Set<E>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableList((List<E>) collection);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Collections.unmodifiableCollection(collection);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new Iterator<K>() {
  @NullableDecl Entry<K, Collection<V>> entry;
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    entry = entryIterator.next();
    return entry.getKey();
  }
  public @Override void remove() {
    checkRemove((entry != null));
    Collection<V> collection = entry.getValue();
    entryIterator.remove();
    totalSize -= collection.size();
    collection.clear();
    entry = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedNavigableSet(key, (NavigableSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSortedSet(key, (SortedSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSet(key, (Set<V>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: wrapList(key, (List<V>) collection, null);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new WrappedCollection(key, collection, null);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkRemove((collection != null));","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: collection = null;","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableKeySet((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedKeySet((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new KeySet(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableAsMap((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedAsMap((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new AsMap(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableAsMap()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableKeySet()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.HTTP2_SETTINGS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String normalizedAttribute = normalizeToken(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(normalizedAttribute, normalizeParameterValue(normalizedAttribute, value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: MediaType mediaType = new MediaType(type, subtype, builder.build());","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // if the attribute isn't charset, we can just inherit the current parsedCharset","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // Return one of the constants if the media type is a known type.","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: MoreObjects.firstNonNull(KNOWN_TYPES.get(mediaType), mediaType);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String key = entry.getKey();","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(key))","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: mediaType.parsedCharset = this.parsedCharset;","THEN_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(key, entry.getValue());","THEN_STATEMENT: (! normalizedAttribute.equals(key))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: withParameters(attribute, ImmutableSet.of(value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
   */","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.withParameters(String,Iterable<String>)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((leadingZeros >= Long.SIZE), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a >= 0) | (b != Long.MIN_VALUE)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a == 0) || ((result / a) == b)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) < 0) | ((a ^ result) >= 0)), "checkedAdd", a, b);","METHOD: com.google.common.math.LongMath.checkedAdd(long,long)","com.google.common.math.LongMath.checkedAdd(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) >= 0) | ((a ^ result) >= 0)), "checkedSubtract", a, b);","METHOD: com.google.common.math.LongMath.checkedSubtract(long,long)","com.google.common.math.LongMath.checkedSubtract(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Long.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Long.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_LONG) <= b) && (b <= FLOOR_SQRT_MAX_LONG)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedMultiply", a, b);","METHOD: com.google.common.math.IntMath.checkedMultiply(int,int)","com.google.common.math.IntMath.checkedMultiply(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedAdd", a, b);","METHOD: com.google.common.math.IntMath.checkedAdd(int,int)","com.google.common.math.IntMath.checkedAdd(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Integer.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Integer.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_INT) <= b) & (b <= FLOOR_SQRT_MAX_INT)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedSubtract", a, b);","METHOD: com.google.common.math.IntMath.checkedSubtract(int,int)","com.google.common.math.IntMath.checkedSubtract(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: methodName","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: a","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: b","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","THROW_STATEMENT: new ArithmeticException((((((("overflow: " + methodName) + "(") + a) + ", ") + b) + ")"));","THEN_STATEMENT: (! condition)","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkNoOverflow(boolean,String,int,int)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");","METHOD: com.google.common.collect.TreeTraverserTest.testBreadthOrder()","com.google.common.collect.TreeTraverserTest.testBreadthOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");","METHOD: com.google.common.collect.TreeTraverserTest.testPreOrder()","com.google.common.collect.TreeTraverserTest.testPreOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: tester.testAllPublicInstanceMethods(BIN_ADAPTER);","METHOD: com.google.common.collect.TreeTraverserTest.testNulls()","com.google.common.collect.TreeTraverserTest.testNulls()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");","METHOD: com.google.common.collect.TreeTraverserTest.testPostOrder()","com.google.common.collect.TreeTraverserTest.testPostOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_DELETE","SINGLE_TYPE: Node","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.value = value;","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","CONSTRUCTOR_INVOCATION: super(value);","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.Tree.value : char","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: iterable: Iterable<? extends Node>","PARAMETER: iterable","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Node t:iterable","METHOD: com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<? extends Node>)","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.binaryIterationOrder(Iterable<BinaryTree>)","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.testInOrder()","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.BIN_ADAPTER : BinaryTreeTraverser<BinaryTree>","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bg : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bf : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bc : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bd : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bb : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.be : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.ba : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.Node","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.getElementSetDuplicateInitializingMethods()","CLASS: com.google.common.collect.testing.google.MultisetElementSetTester","com.google.common.collect.testing.google.MultisetElementSetTester","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nullValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_invalidAttribute()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testToString()","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTaskTest","com.google.common.util.concurrent.TrustedListenableFutureTaskTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(true, "testCheckNoOverflow_success", 0, 0);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("testCheckNoOverflow_failure(0, 0)");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(false, "testCheckNoOverflow_failure", 0, 0);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assert_().fail(template, args);","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = System.getProperties().getProperty("java.runtime.name").contains("Android");","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = TestPlatform.isAndroid();","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.testing.AbstractPackageSanityTestsTest.ConcretePackageSanityTests","CLASS: com.google.common.testing.AbstractPackageSanityTestsTest","com.google.common.testing.AbstractPackageSanityTestsTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.getElementSetDuplicateInitializingMethods()","CLASS: com.google.common.collect.testing.google.MultisetElementSetTester","com.google.common.collect.testing.google.MultisetElementSetTester","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ((e.isAnnotationPresent(javax.annotation.CheckForNull.class) || e.isAnnotationPresent(javax.annotation.Nullable.class)) || e.isAnnotationPresent(NullableDecl.class));","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: true;","THEN_STATEMENT: NULLABLE_ANNOTATIONS.contains(annotation.annotationType().getName())","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: NULLABLE_ANNOTATIONS.contains(annotation.annotationType().getName())","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: false;","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATIONS : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
 * Benchmarks for the {@code TreeTraverser} operations on binary trees.
 *
 * @author Louis Wasserman
 */","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);","METHOD: com.google.common.collect.BinaryTreeTraverserBenchmark.setUp()","com.google.common.collect.BinaryTreeTraverserBenchmark.setUp()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.BinaryTreeTraverserBenchmark.BINARY_VIEWER : BinaryTreeTraverser<BinaryNode>","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.BinaryTreeTraverserBenchmark.useBinaryTraverser : boolean","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");","METHOD: com.google.common.collect.TreeTraverserTest.testBreadthOrder()","com.google.common.collect.TreeTraverserTest.testBreadthOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");","METHOD: com.google.common.collect.TreeTraverserTest.testPreOrder()","com.google.common.collect.TreeTraverserTest.testPreOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: tester.testAllPublicInstanceMethods(BIN_ADAPTER);","METHOD: com.google.common.collect.TreeTraverserTest.testNulls()","com.google.common.collect.TreeTraverserTest.testNulls()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");","METHOD: com.google.common.collect.TreeTraverserTest.testPostOrder()","com.google.common.collect.TreeTraverserTest.testPostOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_DELETE","SINGLE_TYPE: Node","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.value = value;","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","CONSTRUCTOR_INVOCATION: super(value);","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.Tree.value : char","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: iterable: Iterable<? extends Node>","PARAMETER: iterable","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Node t:iterable","METHOD: com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<? extends Node>)","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.binaryIterationOrder(Iterable<BinaryTree>)","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.testInOrder()","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.BIN_ADAPTER : BinaryTreeTraverser<BinaryTree>","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bg : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bf : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bc : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bd : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bb : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.be : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.ba : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.Node","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> uppercaseAcronyms = ImmutableSet.of("ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UID", "URL", "WWW", "XSS");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nullValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_invalidAttribute()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, numCalls.get());","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testDelegateRejection()","com.google.common.util.concurrent.SequentialExecutorTest.testDelegateRejection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testRejectedExecutionThrownWithMultipleCalls()","CLASS: com.google.common.util.concurrent.SequentialExecutorTest","com.google.common.util.concurrent.SequentialExecutorTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testToString()","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTaskTest","com.google.common.util.concurrent.TrustedListenableFutureTaskTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractChainedListenableFutureTest.testInputFutureToString()","CLASS: com.google.common.util.concurrent.AbstractChainedListenableFutureTest","com.google.common.util.concurrent.AbstractChainedListenableFutureTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FuturesTransformAsyncTest.testAsyncToString()","CLASS: com.google.common.util.concurrent.FuturesTransformAsyncTest","com.google.common.util.concurrent.FuturesTransformAsyncTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableDirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableDirectedGraphTest","com.google.common.graph.ConfigurableDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleDirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleDirectedGraphTest","com.google.common.graph.ConfigurableSimpleDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableUndirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableUndirectedGraphTest","com.google.common.graph.ConfigurableUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(true, "testCheckNoOverflow_success", 0, 0);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("testCheckNoOverflow_failure(0, 0)");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(false, "testCheckNoOverflow_failure", 0, 0);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assert_().fail(template, args);","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = System.getProperties().getProperty("java.runtime.name").contains("Android");","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = TestPlatform.isAndroid();","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final URL[] urls = myLoader.getURLs();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final ClassLoader myLoader = getClass().getClassLoader();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final URL[] urls = myLoader.getURLs();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final ClassLoader myLoader = getClass().getClassLoader();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.parseJavaClassPath()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.getClassPathUrls()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.count(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final Iterator<Entry<E>> backingEntries = backingMap.entrySet().iterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new Iterator<Multiset.Entry<E>>() {
  Entry<E> toRemove;
  boolean canRemove;
  public @Override boolean hasNext() {
    return backingEntries.hasNext();
  }
  public @Override Multiset.Entry<E> next() {
    final Entry<E> mapEntry = backingEntries.next();
    toRemove = mapEntry;
    canRemove = true;
    return mapEntry;
  }
  public @Override void remove() {
    checkRemove(canRemove);
    size -= toRemove.getCount();
    backingEntries.remove();
    canRemove = false;
    toRemove = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: new Itr<Entry<E>>() {
  @Override Entry<E> result(int entryIndex) {
    return backingMap.getEntry(entryIndex);
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.distinctElements()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new MapBasedMultisetIterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (int) newCount);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: size += occurrences;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: backingMap.put(element, occurrences);","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","ASSIGNMENT: size += occurrences;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.put(element, occurrences);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: size = 0;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.clear()","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (oldCount - occurrences));","THEN_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.removeEntry(entryIndex);","ELSE_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size : long","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_INSERT","JAVADOC: /** Standard constructor. */","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_INSERT","PARAMETER: backingMap","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: distinctElements","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.backingMap = checkNotNull(backingMap);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.size = super.size();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: init(distinctElements);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createEntrySet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObjectNoData()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setBackingMap(AbstractObjectCountMap<E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createElementSet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObject(ObjectInputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.writeObject(ObjectOutputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.elementIterator()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int,int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.addTo(Multiset<? super E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.init(int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.AbstractMapBasedMultiset.backingMap : ObjectCountHashMap<E>","com.google.common.collect.AbstractMapBasedMultiset.backingMap : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.Itr","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSet.of();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptySet();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.SortedMultisets.ElementSet.iterator()","CLASS: com.google.common.collect.SortedMultisets.ElementSet","com.google.common.collect.SortedMultisets.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: Multisets.linearTimeSizeImpl(this);","METHOD: com.google.common.collect.ForwardingMultiset.standardSize()","com.google.common.collect.ForwardingMultiset.standardSize()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ForwardingMultiset.StandardElementSet.iterator()","CLASS: com.google.common.collect.ForwardingMultiset.StandardElementSet","com.google.common.collect.ForwardingMultiset.StandardElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.ImmutableMultiset.createEntrySet()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ObjectCountHashMap<? extends E> backingMap = tryGetMap(multiset);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), backingMap.size()));","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: addCopies(backingMap.getKey(i), backingMap.getValue(i));","FOR_STATEMENT: (i >= 0)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = backingMap.firstIndex();","FOR_INIT: int i = backingMap.firstIndex();","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: i = backingMap.nextIndex(i);","FOR_INCR: i = backingMap.nextIndex(i)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOR_STATEMENT: (i >= 0)","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Set<? extends Entry<? extends E>> entries = multiset.entrySet();","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), entries.size()));","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // might overlap","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (backingMap != null)","IF_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (backingMap != null)","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","FOREACH_STATEMENT: Entry<? extends E> entry:multiset.entrySet()","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (contents.size() == 0)","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new RegularImmutableMultiset<E>(contents);","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableMultiset.Builder.tryGetMap(Iterable<T>)","CLASS: com.google.common.collect.ImmutableMultiset.Builder","com.google.common.collect.ImmutableMultiset.Builder","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.ImmutableMultiset.Builder.contents : ObjectCountHashMap<E>","com.google.common.collect.ImmutableMultiset.Builder.contents : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @MonotonicNonNullDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedKeySortedSetMultimap.createKeySet()","CLASS: com.google.common.collect.AbstractSortedKeySortedSetMultimap","com.google.common.collect.AbstractSortedKeySortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.addAll(Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.hashCode()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.add(E)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.retainAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.remove(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.removeAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.clear(entryIterator());","METHOD: com.google.common.collect.AbstractMultiset.clear()","com.google.common.collect.AbstractMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.clear()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.equals(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.ElementSet.iterator()","CLASS: com.google.common.collect.AbstractMultiset.ElementSet","com.google.common.collect.AbstractMultiset.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.count(Object)","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.size()","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: true;","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Multiset<? extends E> that = cast(elements);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: self.add(entry.getElement(), entry.getCount());","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: elements.isEmpty()","IF_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(self);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(elements);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: addAllImpl(self, cast(elements));","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: elements.isEmpty()","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int count(Object element) {
    return Math.max(multiset1.count(element), multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = Math.max(entry1.getCount(), multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: ViewMultiset<E>","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.clear()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.distinctElements()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.elementIterator()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int size() {
    return IntMath.saturatedAdd(multiset1.size(), multiset2.size());
  }
  public @Override int count(Object element) {
    return (multiset1.count(element) + multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = (entry1.getCount() + multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.min(count1, multiset2.count(element)));
  }
  @Override Set<E> createElementSet() {
    return Sets.intersection(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = Math.min(entry1.getCount(), multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(@NullableDecl Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.max(0, (count1 - multiset2.count(element))));
  }
  public @Override void clear() {
    throw new UnsupportedOperationException();
  }
  @Override Iterator<E> elementIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<E>() {
  protected @Override E computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        if ((entry1.getCount() > multiset2.count(element)))
            {
              return element;
            }
      }
    return endOfData();
  }
};
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = (entry1.getCount() - multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
  @Override int distinctElements() {
    return Iterators.size(entryIterator());
  }
};","METHOD: com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new TransformedIterator<Entry<E>, E>(multiset().entrySet().iterator()) {
  @Override E transform(Entry<E> entry) {
    return entry.getElement();
  }
};","METHOD: com.google.common.collect.Multisets.ElementSet.iterator()","com.google.common.collect.Multisets.ElementSet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.Multisets.ElementSet.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","com.google.common.collect.Multisets.sizeImpl(Multiset<?>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Multiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,AbstractMapBasedMultiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.elementIterator(Iterator<Entry<E>>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.Multisets.ViewMultiset","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableList.of();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptyList();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Comparator<? super V> comparator = valueComparator();","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (comparator == null)","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (comparator == null)","IF_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSortedSet.emptySet(valueComparator());","ELSE_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","THEN_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ForwardingIterator<Entry<E>>() {
  private @NullableDecl Entry<E> last;
  protected @Override Iterator<Entry<E>> delegate() {
    return readOnlyIterator;
  }
  public @Override Entry<E> next() {
    last = super.next();
    return last;
  }
  public @Override void remove() {
    checkRemove((last != null));
    ConcurrentHashMultiset.this.setCount(last.getElement(), 0);
    last = null;
  }
};","METHOD: com.google.common.collect.ConcurrentHashMultiset.entryIterator()","com.google.common.collect.ConcurrentHashMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ConcurrentHashMultiset.iterator()","CLASS: com.google.common.collect.ConcurrentHashMultiset","com.google.common.collect.ConcurrentHashMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ConcurrentHashMultiset.elementIterator()","CLASS: com.google.common.collect.ConcurrentHashMultiset","com.google.common.collect.ConcurrentHashMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Sets.unmodifiableNavigableSet((NavigableSet<E>) collection);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSortedSet((SortedSet<E>) collection);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSet((Set<E>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableList((List<E>) collection);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Collections.unmodifiableCollection(collection);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new Iterator<K>() {
  @NullableDecl Entry<K, Collection<V>> entry;
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    entry = entryIterator.next();
    return entry.getKey();
  }
  public @Override void remove() {
    checkRemove((entry != null));
    Collection<V> collection = entry.getValue();
    entryIterator.remove();
    totalSize -= collection.size();
    collection.clear();
    entry = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedNavigableSet(key, (NavigableSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSortedSet(key, (SortedSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSet(key, (Set<V>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: wrapList(key, (List<V>) collection, null);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new WrappedCollection(key, collection, null);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkRemove((collection != null));","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: collection = null;","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableKeySet((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedKeySet((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new KeySet(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableAsMap((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedAsMap((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new AsMap(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableAsMap()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableKeySet()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.HTTP2_SETTINGS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String normalizedAttribute = normalizeToken(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(normalizedAttribute, normalizeParameterValue(normalizedAttribute, value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: MediaType mediaType = new MediaType(type, subtype, builder.build());","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // if the attribute isn't charset, we can just inherit the current parsedCharset","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // Return one of the constants if the media type is a known type.","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: MoreObjects.firstNonNull(KNOWN_TYPES.get(mediaType), mediaType);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String key = entry.getKey();","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(key))","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: mediaType.parsedCharset = this.parsedCharset;","THEN_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(key, entry.getValue());","THEN_STATEMENT: (! normalizedAttribute.equals(key))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: withParameters(attribute, ImmutableSet.of(value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
   */","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.withParameters(String,Iterable<String>)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.WrappingExecutorService.wrapTasks(Collection<? extends Callable<T>>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.RateLimiter.SleepingStopwatch.createFromSystemTimer()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s outgoing edges in the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * <p>This is <i>not</i> the same as "all nodes reachable from {@code node} by following outgoing
   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.successors(N)","com.google.common.graph.Graph.successors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns the order of iteration for the elements of {@link #nodes()}. */","METHOD: com.google.common.graph.Graph.nodeOrder()","com.google.common.graph.Graph.nodeOrder()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.inDegree(N)","com.google.common.graph.Graph.inDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting
   * to add a self-loop to a graph that does not allow them will throw an {@link
   * IllegalArgumentException}.
   */","METHOD: com.google.common.graph.Graph.allowsSelfLoops()","com.google.common.graph.Graph.allowsSelfLoops()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if the edges in this graph are directed. Directed edges connect a {@link
   * EndpointPair#source() source node} to a {@link EndpointPair#target() target node}, while
   * undirected edges connect a pair of nodes to each other.
   */","METHOD: com.google.common.graph.Graph.isDirected()","com.google.common.graph.Graph.isDirected()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,
   * the number of times an edge touches {@code node}).
   *
   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}.
   *
   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of
   * self-loops incident to {@code node}).
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.degree(N)","com.google.common.graph.Graph.degree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}. */","METHOD: com.google.common.graph.Graph.nodes()","com.google.common.graph.Graph.nodes()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.predecessors(N)","com.google.common.graph.Graph.predecessors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.outDegree(N)","com.google.common.graph.Graph.outDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.adjacentNodes(N)","com.google.common.graph.Graph.adjacentNodes(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.incidentEdges(N)","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s outgoing edges in the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * <p>This is <i>not</i> the same as "all nodes reachable from {@code node} by following outgoing
   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.successors(N)","com.google.common.graph.ValueGraph.successors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns the order of iteration for the elements of {@link #nodes()}. */","METHOD: com.google.common.graph.ValueGraph.nodeOrder()","com.google.common.graph.ValueGraph.nodeOrder()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.inDegree(N)","com.google.common.graph.ValueGraph.inDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting
   * to add a self-loop to a graph that does not allow them will throw an {@link
   * IllegalArgumentException}.
   */","METHOD: com.google.common.graph.ValueGraph.allowsSelfLoops()","com.google.common.graph.ValueGraph.allowsSelfLoops()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if the edges in this graph are directed. Directed edges connect a {@link
   * EndpointPair#source() source node} to a {@link EndpointPair#target() target node}, while
   * undirected edges connect a pair of nodes to each other.
   */","METHOD: com.google.common.graph.ValueGraph.isDirected()","com.google.common.graph.ValueGraph.isDirected()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,
   * the number of times an edge touches {@code node}).
   *
   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}.
   *
   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of
   * self-loops incident to {@code node}).
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.degree(N)","com.google.common.graph.ValueGraph.degree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}. */","METHOD: com.google.common.graph.ValueGraph.nodes()","com.google.common.graph.ValueGraph.nodes()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.predecessors(N)","com.google.common.graph.ValueGraph.predecessors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.outDegree(N)","com.google.common.graph.ValueGraph.outDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.adjacentNodes(N)","com.google.common.graph.ValueGraph.adjacentNodes(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.incidentEdges(N)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.incidentEdges(N)","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((leadingZeros >= Long.SIZE), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a >= 0) | (b != Long.MIN_VALUE)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a == 0) || ((result / a) == b)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) < 0) | ((a ^ result) >= 0)), "checkedAdd", a, b);","METHOD: com.google.common.math.LongMath.checkedAdd(long,long)","com.google.common.math.LongMath.checkedAdd(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) >= 0) | ((a ^ result) >= 0)), "checkedSubtract", a, b);","METHOD: com.google.common.math.LongMath.checkedSubtract(long,long)","com.google.common.math.LongMath.checkedSubtract(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Long.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Long.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_LONG) <= b) && (b <= FLOOR_SQRT_MAX_LONG)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedMultiply", a, b);","METHOD: com.google.common.math.IntMath.checkedMultiply(int,int)","com.google.common.math.IntMath.checkedMultiply(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedAdd", a, b);","METHOD: com.google.common.math.IntMath.checkedAdd(int,int)","com.google.common.math.IntMath.checkedAdd(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Integer.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Integer.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_INT) <= b) & (b <= FLOOR_SQRT_MAX_INT)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedSubtract", a, b);","METHOD: com.google.common.math.IntMath.checkedSubtract(int,int)","com.google.common.math.IntMath.checkedSubtract(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: methodName","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: a","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: b","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","THROW_STATEMENT: new ArithmeticException((((((("overflow: " + methodName) + "(") + a) + ", ") + b) + ")"));","THEN_STATEMENT: (! condition)","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkNoOverflow(boolean,String,int,int)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.testing.AbstractPackageSanityTestsTest.ConcretePackageSanityTests","CLASS: com.google.common.testing.AbstractPackageSanityTestsTest","com.google.common.testing.AbstractPackageSanityTestsTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemoveDuplicatePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int size = getNumElements();","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int expectedSize = (size - getMultiset().count(e0()));","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertEquals(expectedSize, getMultiset().size());","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","com.google.common.collect.testing.google.MultisetElementSetTester.testElementSetRemovePropagatesToMultiset()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.testing.google.MultisetElementSetTester.getElementSetDuplicateInitializingMethods()","CLASS: com.google.common.collect.testing.google.MultisetElementSetTester","com.google.common.collect.testing.google.MultisetElementSetTester","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ((e.isAnnotationPresent(javax.annotation.CheckForNull.class) || e.isAnnotationPresent(javax.annotation.Nullable.class)) || e.isAnnotationPresent(NullableDecl.class));","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: true;","THEN_STATEMENT: NULLABLE_ANNOTATIONS.contains(annotation.annotationType().getName())","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: NULLABLE_ANNOTATIONS.contains(annotation.annotationType().getName())","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOREACH_STATEMENT: Annotation annotation:e.getAnnotations()","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: false;","METHOD: com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","com.google.common.testing.NullPointerTester.isNullable(AnnotatedElement)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.testing.NullPointerTester.NULLABLE_ANNOTATIONS : ImmutableSet<String>","CLASS: com.google.common.testing.NullPointerTester","com.google.common.testing.NullPointerTester","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
 * Benchmarks for the {@code TreeTraverser} operations on binary trees.
 *
 * @author Louis Wasserman
 */","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);","METHOD: com.google.common.collect.BinaryTreeTraverserBenchmark.setUp()","com.google.common.collect.BinaryTreeTraverserBenchmark.setUp()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.BinaryTreeTraverserBenchmark.BINARY_VIEWER : BinaryTreeTraverser<BinaryNode>","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.BinaryTreeTraverserBenchmark.useBinaryTraverser : boolean","CLASS: com.google.common.collect.BinaryTreeTraverserBenchmark","com.google.common.collect.BinaryTreeTraverserBenchmark","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");","METHOD: com.google.common.collect.TreeTraverserTest.testBreadthOrder()","com.google.common.collect.TreeTraverserTest.testBreadthOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");","METHOD: com.google.common.collect.TreeTraverserTest.testPreOrder()","com.google.common.collect.TreeTraverserTest.testPreOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: tester.testAllPublicInstanceMethods(BIN_ADAPTER);","METHOD: com.google.common.collect.TreeTraverserTest.testNulls()","com.google.common.collect.TreeTraverserTest.testNulls()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");","METHOD: com.google.common.collect.TreeTraverserTest.testPostOrder()","com.google.common.collect.TreeTraverserTest.testPostOrder()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_DELETE","SINGLE_TYPE: Node","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.value = value;","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","CONSTRUCTOR_INVOCATION: super(value);","METHOD: com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","com.google.common.collect.TreeTraverserTest.Tree.Tree(char,Tree...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.Tree.value : char","CLASS: com.google.common.collect.TreeTraverserTest.Tree","com.google.common.collect.TreeTraverserTest.Tree","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: iterable: Iterable<? extends Node>","PARAMETER: iterable","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","FOREACH_STATEMENT: Node t:iterable","METHOD: com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<? extends Node>)","com.google.common.collect.TreeTraverserTest.iterationOrder(Iterable<Tree>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.binaryIterationOrder(Iterable<BinaryTree>)","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.TreeTraverserTest.testInOrder()","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.BIN_ADAPTER : BinaryTreeTraverser<BinaryTree>","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bg : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bf : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bc : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bd : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.bb : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.be : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_OBJECT_STATE","FIELD: com.google.common.collect.TreeTraverserTest.ba : BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.BinaryTree","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.TreeTraverserTest.Node","CLASS: com.google.common.collect.TreeTraverserTest","com.google.common.collect.TreeTraverserTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactHashSetTest","com.google.common.collect.CompactHashSetTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.CompactLinkedHashSetTest.testDummyMethod()","CLASS: com.google.common.collect.CompactLinkedHashSetTest","com.google.common.collect.CompactLinkedHashSetTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: ImmutableSet<String> uppercaseAcronyms = ImmutableSet.of("ID", "DNT", "DNS", "HTTP2", "IP", "MD5", "P3P", "TE", "UID", "URL", "WWW", "XSS");","METHOD: com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","com.google.common.net.HttpHeadersTest.testConstantNameMatchesString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_nullValue()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaTypeTest.testWithParametersIterable_invalidAttribute()","CLASS: com.google.common.net.MediaTypeTest","com.google.common.net.MediaTypeTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assertEquals(1, numCalls.get());","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testDelegateRejection()","com.google.common.util.concurrent.SequentialExecutorTest.testDelegateRejection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.SequentialExecutorTest.testRejectedExecutionThrownWithMultipleCalls()","CLASS: com.google.common.util.concurrent.SequentialExecutorTest","com.google.common.util.concurrent.SequentialExecutorTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTaskTest.testToString()","CLASS: com.google.common.util.concurrent.TrustedListenableFutureTaskTest","com.google.common.util.concurrent.TrustedListenableFutureTaskTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractChainedListenableFutureTest.testInputFutureToString()","CLASS: com.google.common.util.concurrent.AbstractChainedListenableFutureTest","com.google.common.util.concurrent.AbstractChainedListenableFutureTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.FuturesTransformAsyncTest.testAsyncToString()","CLASS: com.google.common.util.concurrent.FuturesTransformAsyncTest","com.google.common.util.concurrent.FuturesTransformAsyncTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableDirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableDirectedGraphTest","com.google.common.graph.ConfigurableDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleDirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleDirectedGraphTest","com.google.common.graph.ConfigurableSimpleDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableUndirectedGraphTest.incidentEdges_selfLoop()","CLASS: com.google.common.graph.ConfigurableUndirectedGraphTest","com.google.common.graph.ConfigurableUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractDirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractDirectedGraphTest","com.google.common.graph.AbstractDirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest.incidentEdges_checkReturnedSetMutability()","CLASS: com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","com.google.common.graph.ConfigurableSimpleUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.AbstractUndirectedGraphTest.incidentEdges_oneEdge()","CLASS: com.google.common.graph.AbstractUndirectedGraphTest","com.google.common.graph.AbstractUndirectedGraphTest","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(true, "testCheckNoOverflow_success", 0, 0);","METHOD: com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_success()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: assertThat(expected).hasMessageThat().contains("testCheckNoOverflow_failure(0, 0)");","CATCH_CLAUSE: ArithmeticException","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","CATCH_CLAUSE: ArithmeticException","CATCH_CLAUSES: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: MathPreconditions.checkNoOverflow(false, "testCheckNoOverflow_failure", 0, 0);","BODY: ","com.google.common.math.MathPreconditionsTest.testCheckNoOverflow_failure()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: assert_().fail(template, args);","METHOD: com.google.common.math.LongMathTest.failFormat(String,Object...)","com.google.common.math.LongMathTest.failFormat(String,Object...)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = System.getProperties().getProperty("java.runtime.name").contains("Android");","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: boolean isAndroid = TestPlatform.isAndroid();","METHOD: com.google.common.math.LongMathTest.testCheckedMultiply()","com.google.common.math.LongMathTest.testCheckedMultiply()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final URL[] urls = myLoader.getURLs();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final ClassLoader myLoader = getClass().getClassLoader();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.doTestUnloadableInStaticFieldIfClosed()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final URL[] urls = myLoader.getURLs();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: final ClassLoader myLoader = getClass().getClassLoader();","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.useFrqInSeparateLoader()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.parseJavaClassPath()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest.getClassPathUrls()","CLASS: com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","com.google.common.base.FinalizableReferenceQueueClassLoaderUnloadingTest","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.count(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: final Iterator<Entry<E>> backingEntries = backingMap.entrySet().iterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new Iterator<Multiset.Entry<E>>() {
  Entry<E> toRemove;
  boolean canRemove;
  public @Override boolean hasNext() {
    return backingEntries.hasNext();
  }
  public @Override Multiset.Entry<E> next() {
    final Entry<E> mapEntry = backingEntries.next();
    toRemove = mapEntry;
    canRemove = true;
    return mapEntry;
  }
  public @Override void remove() {
    checkRemove(canRemove);
    size -= toRemove.getCount();
    backingEntries.remove();
    canRemove = false;
    toRemove = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: new Itr<Entry<E>>() {
  @Override Entry<E> result(int entryIndex) {
    return backingMap.getEntry(entryIndex);
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.distinctElements()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new MapBasedMultisetIterator();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.iterator()","com.google.common.collect.AbstractMapBasedMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (int) newCount);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: size += occurrences;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: backingMap.put(element, occurrences);","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","ASSIGNMENT: size += occurrences;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.put(element, occurrences);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.add(E,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","ASSIGNMENT: size = 0;","METHOD: com.google.common.collect.AbstractMapBasedMultiset.clear()","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int entryIndex = backingMap.indexOf(element);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: 0;","THEN_STATEMENT: (entryIndex == (- 1))","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (entryIndex == (- 1))","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: int oldCount = backingMap.getValue(entryIndex);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.setValue(entryIndex, (oldCount - occurrences));","THEN_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: backingMap.removeEntry(entryIndex);","ELSE_STATEMENT: (oldCount > occurrences)","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.remove(Object,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.size : long","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_INSERT","JAVADOC: /** Standard constructor. */","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: protected","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_INSERT","PARAMETER: backingMap","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: distinctElements","PARAMETERS: ","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.backingMap = checkNotNull(backingMap);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: this.size = super.size();","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: init(distinctElements);","METHOD: com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(int)","com.google.common.collect.AbstractMapBasedMultiset.AbstractMapBasedMultiset(AbstractObjectCountMap<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createEntrySet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObjectNoData()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setBackingMap(AbstractObjectCountMap<E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.createElementSet()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.readObject(ObjectInputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.writeObject(ObjectOutputStream)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.elementIterator()","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.setCount(E,int,int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.addTo(Multiset<? super E>)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultiset.init(int)","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.AbstractMapBasedMultiset.backingMap : ObjectCountHashMap<E>","com.google.common.collect.AbstractMapBasedMultiset.backingMap : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.MapBasedMultisetIterator","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.AbstractMapBasedMultiset.Itr","CLASS: com.google.common.collect.AbstractMapBasedMultiset","com.google.common.collect.AbstractMapBasedMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSet.of();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptySet();","METHOD: com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSetMultimap","com.google.common.collect.AbstractSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.SortedMultisets.ElementSet.iterator()","CLASS: com.google.common.collect.SortedMultisets.ElementSet","com.google.common.collect.SortedMultisets.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: Multisets.linearTimeSizeImpl(this);","METHOD: com.google.common.collect.ForwardingMultiset.standardSize()","com.google.common.collect.ForwardingMultiset.standardSize()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ForwardingMultiset.StandardElementSet.iterator()","CLASS: com.google.common.collect.ForwardingMultiset.StandardElementSet","com.google.common.collect.ForwardingMultiset.StandardElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.ImmutableMultiset.createEntrySet()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: ObjectCountHashMap<? extends E> backingMap = tryGetMap(multiset);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), backingMap.size()));","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: addCopies(backingMap.getKey(i), backingMap.getValue(i));","FOR_STATEMENT: (i >= 0)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int i = backingMap.firstIndex();","FOR_INIT: int i = backingMap.firstIndex();","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: i = backingMap.nextIndex(i);","FOR_INCR: i = backingMap.nextIndex(i)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","FOR_STATEMENT: (i >= 0)","THEN_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Set<? extends Entry<? extends E>> entries = multiset.entrySet();","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: contents.ensureCapacity(Math.max(contents.size(), entries.size()));","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // might overlap","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (backingMap != null)","IF_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (backingMap != null)","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","FOREACH_STATEMENT: Entry<? extends E> entry:multiset.entrySet()","ELSE_STATEMENT: (backingMap != null)","com.google.common.collect.ImmutableMultiset.Builder.addAll(Iterable<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"CONDITION_EXPRESSION_CHANGE","IF_STATEMENT: (contents.size() == 0)","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new RegularImmutableMultiset<E>(contents);","METHOD: com.google.common.collect.ImmutableMultiset.Builder.build()","com.google.common.collect.ImmutableMultiset.Builder.build()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableMultiset.Builder.tryGetMap(Iterable<T>)","CLASS: com.google.common.collect.ImmutableMultiset.Builder","com.google.common.collect.ImmutableMultiset.Builder","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ATTRIBUTE_TYPE_CHANGE","PARAMETERIZED_TYPE: ObjectCountHashMap<E>","FIELD: com.google.common.collect.ImmutableMultiset.Builder.contents : ObjectCountHashMap<E>","com.google.common.collect.ImmutableMultiset.Builder.contents : AbstractObjectCountMap<E>","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new UnmodifiableIterator<E>() {
  int remaining;
  @MonotonicNonNullDecl E element;
  public @Override boolean hasNext() {
    return ((remaining > 0) || entryIterator.hasNext());
  }
  public @Override E next() {
    if ((remaining <= 0))
        {
          Entry<E> entry = entryIterator.next();
          element = entry.getElement();
          remaining = entry.getCount();
        }
    remaining --;
    return element;
  }
};","METHOD: com.google.common.collect.ImmutableMultiset.iterator()","com.google.common.collect.ImmutableMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ImmutableSet.Indexed.copyIntoArray(Object[],int)","CLASS: com.google.common.collect.ImmutableSet.Indexed","com.google.common.collect.ImmutableSet.Indexed","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_INSERT","PARAMETERIZED_TYPE: AbstractObjectCountMap<K>","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: map: ObjectCountHashMap<? extends K>","PARAMETER: map","com.google.common.collect.ObjectCountHashMap.ObjectCountHashMap(AbstractObjectCountMap<K>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.createEntrySet()","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.firstIndex()","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.ensureCapacity(int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.getKey(int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.getEntry(int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.getValue(int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.nextIndex(int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.size()","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.nextIndexAfterRemove(int,int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountHashMap.setValue(int,int)","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.collect.ObjectCountHashMap.keys : Object[]","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.collect.ObjectCountHashMap.modCount : int","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.collect.ObjectCountHashMap.size : int","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.collect.ObjectCountHashMap.values : int[]","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ObjectCountHashMap.HashEntrySetView","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.ObjectCountHashMap.MapEntry","CLASS: com.google.common.collect.ObjectCountHashMap","com.google.common.collect.ObjectCountHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedKeySortedSetMultimap.createKeySet()","CLASS: com.google.common.collect.AbstractSortedKeySortedSetMultimap","com.google.common.collect.AbstractSortedKeySortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.addAll(Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.hashCode()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.add(E)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.retainAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.remove(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.removeAll(Collection<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.clear(entryIterator());","METHOD: com.google.common.collect.AbstractMultiset.clear()","com.google.common.collect.AbstractMultiset.clear()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.clear()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMultiset.equals(Object)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.ElementSet.iterator()","CLASS: com.google.common.collect.AbstractMultiset.ElementSet","com.google.common.collect.AbstractMultiset.ElementSet","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.AbstractMultiset.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Multisets.iteratorImpl(this);","METHOD: com.google.common.collect.AbstractMultiset.elementIterator()","com.google.common.collect.AbstractMultiset.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.count(Object)","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMultiset.size()","CLASS: com.google.common.collect.AbstractMultiset","com.google.common.collect.AbstractMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: true;","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Multiset<? extends E> that = cast(elements);","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: self.add(entry.getElement(), entry.getCount());","FOREACH_STATEMENT: Entry<? extends E> entry:that.entrySet()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Iterators.addAll(self, elements.iterator());","ELSE_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: elements.isEmpty()","IF_STATEMENT: elements.isEmpty()","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(self);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkNotNull(elements);","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: addAllImpl(self, cast(elements));","THEN_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (elements instanceof Multiset)","IF_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (elements instanceof Multiset)","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","IF_STATEMENT: elements.isEmpty()","ELSE_STATEMENT: (elements instanceof Multiset)","com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Collection<? extends E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int count(Object element) {
    return Math.max(multiset1.count(element), multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = Math.max(entry1.getCount(), multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.union(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARENT_CLASS_CHANGE","PARAMETERIZED_TYPE: ViewMultiset<E>","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.clear()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.distinctElements()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.FilteredMultiset.elementIterator()","CLASS: com.google.common.collect.Multisets.FilteredMultiset","com.google.common.collect.Multisets.FilteredMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override boolean contains(@NullableDecl Object element) {
    return (multiset1.contains(element) || multiset2.contains(element));
  }
  public @Override boolean isEmpty() {
    return (multiset1.isEmpty() && multiset2.isEmpty());
  }
  public @Override int size() {
    return IntMath.saturatedAdd(multiset1.size(), multiset2.size());
  }
  public @Override int count(Object element) {
    return (multiset1.count(element) + multiset2.count(element));
  }
  @Override Set<E> createElementSet() {
    return Sets.union(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<? extends Entry<? extends E>> iterator1 = multiset1.entrySet().iterator();
    final Iterator<? extends Entry<? extends E>> iterator2 = multiset2.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    if (iterator1.hasNext())
        {
          Entry<? extends E> entry1 = iterator1.next();
          E element = entry1.getElement();
          int count = (entry1.getCount() + multiset2.count(element));
          return immutableEntry(element, count);
        }
    while (iterator2.hasNext())      {
        Entry<? extends E> entry2 = iterator2.next();
        E element = entry2.getElement();
        if ((! multiset1.contains(element)))
            {
              return immutableEntry(element, entry2.getCount());
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","com.google.common.collect.Multisets.sum(Multiset<? extends E>,Multiset<? extends E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.min(count1, multiset2.count(element)));
  }
  @Override Set<E> createElementSet() {
    return Sets.intersection(multiset1.elementSet(), multiset2.elementSet());
  }
  @Override Iterator<E> elementIterator() {
    throw new AssertionError("should never be called");
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = Math.min(entry1.getCount(), multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
};","METHOD: com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.intersection(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ViewMultiset<E>() {
  public @Override int count(@NullableDecl Object element) {
    int count1 = multiset1.count(element);
    return ((count1 == 0) ? 0 : Math.max(0, (count1 - multiset2.count(element))));
  }
  public @Override void clear() {
    throw new UnsupportedOperationException();
  }
  @Override Iterator<E> elementIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<E>() {
  protected @Override E computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        if ((entry1.getCount() > multiset2.count(element)))
            {
              return element;
            }
      }
    return endOfData();
  }
};
  }
  @Override Iterator<Entry<E>> entryIterator() {
    final Iterator<Entry<E>> iterator1 = multiset1.entrySet().iterator();
    return new AbstractIterator<Entry<E>>() {
  protected @Override Entry<E> computeNext() {
    while (iterator1.hasNext())      {
        Entry<E> entry1 = iterator1.next();
        E element = entry1.getElement();
        int count = (entry1.getCount() - multiset2.count(element));
        if ((count > 0))
            {
              return immutableEntry(element, count);
            }
      }
    return endOfData();
  }
};
  }
  @Override int distinctElements() {
    return Iterators.size(entryIterator());
  }
};","METHOD: com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","com.google.common.collect.Multisets.difference(Multiset<E>,Multiset<?>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new TransformedIterator<Entry<E>, E>(multiset().entrySet().iterator()) {
  @Override E transform(Entry<E> entry) {
    return entry.getElement();
  }
};","METHOD: com.google.common.collect.Multisets.ElementSet.iterator()","com.google.common.collect.Multisets.ElementSet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"UNCLASSIFIED_CHANGE","MODIFIER: abstract","MODIFIERS: ","com.google.common.collect.Multisets.ElementSet.iterator()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","METHOD: com.google.common.collect.Multisets.linearTimeSizeImpl(Multiset<?>)","com.google.common.collect.Multisets.sizeImpl(Multiset<?>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,Multiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.addAllImpl(Multiset<E>,AbstractMapBasedMultiset<? extends E>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.Multisets.elementIterator(Iterator<Entry<E>>)","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_CLASS","CLASS: com.google.common.collect.Multisets.ViewMultiset","CLASS: com.google.common.collect.Multisets","com.google.common.collect.Multisets","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: int oldCapacity = links.length;","METHOD: com.google.common.collect.ObjectCountLinkedHashMap.resizeEntries(int)","com.google.common.collect.ObjectCountLinkedHashMap.resizeEntries(int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: Arrays.fill(links, oldCapacity, newCapacity, UNSET);","METHOD: com.google.common.collect.ObjectCountLinkedHashMap.resizeEntries(int)","com.google.common.collect.ObjectCountLinkedHashMap.resizeEntries(int)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_TYPE_CHANGE","PARAMETERIZED_TYPE: map: ObjectCountHashMap<K>","PARAMETER: map","com.google.common.collect.ObjectCountLinkedHashMap.ObjectCountLinkedHashMap(AbstractObjectCountMap<K>)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountLinkedHashMap.createEntrySet()","CLASS: com.google.common.collect.ObjectCountLinkedHashMap","com.google.common.collect.ObjectCountLinkedHashMap","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountLinkedHashMap.createKeySet()","CLASS: com.google.common.collect.ObjectCountLinkedHashMap","com.google.common.collect.ObjectCountLinkedHashMap","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ObjectCountLinkedHashMap.nextIndexAfterRemove(int,int)","CLASS: com.google.common.collect.ObjectCountLinkedHashMap","com.google.common.collect.ObjectCountLinkedHashMap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDITIONAL_CLASS","CLASS: com.google.common.collect.ObjectCountLinkedHashMap.LinkedItr","CLASS: com.google.common.collect.ObjectCountLinkedHashMap","com.google.common.collect.ObjectCountLinkedHashMap","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableList.of();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: Collections.emptyList();","METHOD: com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractListMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractListMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractListMultimap","com.google.common.collect.AbstractListMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: Comparator<? super V> comparator = valueComparator();","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (comparator == null)","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (comparator == null)","IF_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: ImmutableSortedSet.emptySet(valueComparator());","ELSE_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","METHOD: com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: unmodifiableCollectionSubclass(createCollection());","THEN_STATEMENT: (comparator == null)","com.google.common.collect.AbstractSortedSetMultimap.createUnmodifiableEmptyCollection()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.unmodifiableCollectionSubclass(Collection<E>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractSortedSetMultimap.wrapCollection(K,Collection<V>)","CLASS: com.google.common.collect.AbstractSortedSetMultimap","com.google.common.collect.AbstractSortedSetMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new ForwardingIterator<Entry<E>>() {
  private @NullableDecl Entry<E> last;
  protected @Override Iterator<Entry<E>> delegate() {
    return readOnlyIterator;
  }
  public @Override Entry<E> next() {
    last = super.next();
    return last;
  }
  public @Override void remove() {
    checkRemove((last != null));
    ConcurrentHashMultiset.this.setCount(last.getElement(), 0);
    last = null;
  }
};","METHOD: com.google.common.collect.ConcurrentHashMultiset.entryIterator()","com.google.common.collect.ConcurrentHashMultiset.entryIterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ConcurrentHashMultiset.iterator()","CLASS: com.google.common.collect.ConcurrentHashMultiset","com.google.common.collect.ConcurrentHashMultiset","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.ConcurrentHashMultiset.elementIterator()","CLASS: com.google.common.collect.ConcurrentHashMultiset","com.google.common.collect.ConcurrentHashMultiset","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Sets.unmodifiableNavigableSet((NavigableSet<E>) collection);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSortedSet((SortedSet<E>) collection);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableSet((Set<E>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: Collections.unmodifiableList((List<E>) collection);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: Collections.unmodifiableCollection(collection);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","com.google.common.collect.AbstractMapBasedMultimap.unmodifiableCollectionSubclass(Collection<E>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.wrapList(K,List<V>,WrappedCollection)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: new Iterator<K>() {
  @NullableDecl Entry<K, Collection<V>> entry;
  public @Override boolean hasNext() {
    return entryIterator.hasNext();
  }
  public @Override K next() {
    entry = entryIterator.next();
    return entry.getKey();
  }
  public @Override void remove() {
    checkRemove((entry != null));
    Collection<V> collection = entry.getValue();
    entryIterator.remove();
    totalSize -= collection.size();
    collection.clear();
    entry = null;
  }
};","METHOD: com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","com.google.common.collect.AbstractMapBasedMultimap.KeySet.iterator()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof NavigableSet)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof NavigableSet)","IF_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedNavigableSet(key, (NavigableSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof SortedSet)","ELSE_STATEMENT: (collection instanceof NavigableSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof SortedSet)","IF_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSortedSet(key, (SortedSet<V>) collection, null);","THEN_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof Set)","ELSE_STATEMENT: (collection instanceof SortedSet)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof Set)","IF_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new WrappedSet(key, (Set<V>) collection);","THEN_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (collection instanceof List)","ELSE_STATEMENT: (collection instanceof Set)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (collection instanceof List)","IF_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: wrapList(key, (List<V>) collection, null);","THEN_STATEMENT: (collection instanceof List)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new WrappedCollection(key, collection, null);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","com.google.common.collect.AbstractMapBasedMultimap.wrapCollection(K,Collection<V>)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","METHOD_INVOCATION: checkRemove((collection != null));","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: collection = null;","METHOD: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator.remove()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableKeySet((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedKeySet((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new KeySet(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","com.google.common.collect.AbstractMapBasedMultimap.createKeySet()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DECREASING_ACCESSIBILITY_CHANGE","MODIFIER: private","MODIFIERS: ","com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof NavigableMap)","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof NavigableMap)","IF_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new NavigableAsMap((NavigableMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (map instanceof SortedMap)","ELSE_STATEMENT: (map instanceof NavigableMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: (map instanceof SortedMap)","IF_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: new SortedAsMap((SortedMap<K, Collection<V>>) map);","THEN_STATEMENT: (map instanceof SortedMap)","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_PARENT_CHANGE","RETURN_STATEMENT: new AsMap(map);","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","com.google.common.collect.AbstractMapBasedMultimap.createAsMap()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableAsMap()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.collect.AbstractMapBasedMultimap.createMaybeNavigableKeySet()","CLASS: com.google.common.collect.AbstractMapBasedMultimap","com.google.common.collect.AbstractMapBasedMultimap","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_OBJECT_STATE","FIELD: com.google.common.net.HttpHeaders.HTTP2_SETTINGS : String","CLASS: com.google.common.net.HttpHeaders","com.google.common.net.HttpHeaders","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: checkNotNull(value);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String normalizedAttribute = normalizeToken(attribute);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(normalizedAttribute, normalizeParameterValue(normalizedAttribute, value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: MediaType mediaType = new MediaType(type, subtype, builder.build());","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // if the attribute isn't charset, we can just inherit the current parsedCharset","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_INSERT","LINE_COMMENT: // Return one of the constants if the media type is a known type.","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: MoreObjects.firstNonNull(KNOWN_TYPES.get(mediaType), mediaType);","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: String key = entry.getKey();","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","IF_STATEMENT: (! normalizedAttribute.equals(key))","FOREACH_STATEMENT: Entry<String, String> entry:parameters.entries()","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","ASSIGNMENT: mediaType.parsedCharset = this.parsedCharset;","THEN_STATEMENT: (! normalizedAttribute.equals(CHARSET_ATTRIBUTE))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","METHOD_INVOCATION: builder.put(key, entry.getValue());","THEN_STATEMENT: (! normalizedAttribute.equals(key))","com.google.common.net.MediaType.withParameter(String,String)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: withParameters(attribute, ImmutableSet.of(value));","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
   */","METHOD: com.google.common.net.MediaType.withParameter(String,String)","com.google.common.net.MediaType.withParameter(String,String)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.net.MediaType.withParameters(String,Iterable<String>)","CLASS: com.google.common.net.MediaType","com.google.common.net.MediaType","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.WrappingExecutorService.wrapTasks(Collection<? extends Callable<T>>)","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: Runnable state = get();","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","VARIABLE_DECLARATION_STATEMENT: final String result;","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[DONE]";","THEN_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[INTERRUPTED]";","THEN_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"COMMENT_DELETE","LINE_COMMENT: // getName is final on Thread, no need to worry about exceptions","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = (("running=[RUNNING ON " + (Thread) state.getName()) + "]");","THEN_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","ASSIGNMENT: result = "running=[NOT STARTED YET]";","ELSE_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state instanceof Thread)","IF_STATEMENT: (state instanceof Thread)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state instanceof Thread)","ELSE_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == INTERRUPTING)","IF_STATEMENT: (state == INTERRUPTING)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == INTERRUPTING)","ELSE_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ALTERNATIVE_PART_DELETE","ELSE_STATEMENT: (state == DONE)","IF_STATEMENT: (state == DONE)","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","IF_STATEMENT: (state == DONE)","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: ((result + ", ") + toPendingString());","METHOD: com.google.common.util.concurrent.InterruptibleTask.toString()","com.google.common.util.concurrent.InterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"ADDING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.InterruptibleTask.toString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.InterruptibleTask.toPendingString()","CLASS: com.google.common.util.concurrent.InterruptibleTask","com.google.common.util.concurrent.InterruptibleTask","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: builder.append("SUCCESS, result=[").append(userObjectToString(value)).append("]");","BODY: ","com.google.common.util.concurrent.AbstractFuture.addDoneString(StringBuilder)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","RETURN_STATEMENT: (("setFuture=[" + userObjectToString((SetFuture) localValue.future)) + "]");","THEN_STATEMENT: (localValue instanceof SetFuture)","com.google.common.util.concurrent.AbstractFuture.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.util.concurrent.AbstractFuture.userObjectToString(Object)","CLASS: com.google.common.util.concurrent.AbstractFuture","com.google.common.util.concurrent.AbstractFuture","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_INSERT","RETURN_STATEMENT: null;","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_DELETE","RETURN_STATEMENT: super.pendingToString();","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","com.google.common.util.concurrent.TrustedListenableFutureTask.pendingToString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","METHOD: com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toPendingString()","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVING_METHOD_OVERRIDABILITY","MODIFIER: final","MODIFIERS: ","com.google.common.util.concurrent.RateLimiter.SleepingStopwatch.createFromSystemTimer()","CRUCIAL"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"METHOD_RENAMING","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","METHOD: com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toPendingString()","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"INCREASING_ACCESSIBILITY_CHANGE","MODIFIER: public","MODIFIERS: ","com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask.toString()","MEDIUM"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s outgoing edges in the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * <p>This is <i>not</i> the same as "all nodes reachable from {@code node} by following outgoing
   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.successors(N)","com.google.common.graph.Graph.successors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns the order of iteration for the elements of {@link #nodes()}. */","METHOD: com.google.common.graph.Graph.nodeOrder()","com.google.common.graph.Graph.nodeOrder()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.inDegree(N)","com.google.common.graph.Graph.inDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting
   * to add a self-loop to a graph that does not allow them will throw an {@link
   * IllegalArgumentException}.
   */","METHOD: com.google.common.graph.Graph.allowsSelfLoops()","com.google.common.graph.Graph.allowsSelfLoops()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if the edges in this graph are directed. Directed edges connect a {@link
   * EndpointPair#source() source node} to a {@link EndpointPair#target() target node}, while
   * undirected edges connect a pair of nodes to each other.
   */","METHOD: com.google.common.graph.Graph.isDirected()","com.google.common.graph.Graph.isDirected()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,
   * the number of times an edge touches {@code node}).
   *
   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}.
   *
   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of
   * self-loops incident to {@code node}).
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.degree(N)","com.google.common.graph.Graph.degree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}. */","METHOD: com.google.common.graph.Graph.nodes()","com.google.common.graph.Graph.nodes()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.predecessors(N)","com.google.common.graph.Graph.predecessors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.outDegree(N)","com.google.common.graph.Graph.outDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.Graph.adjacentNodes(N)","com.google.common.graph.Graph.adjacentNodes(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.Graph.incidentEdges(N)","CLASS: com.google.common.graph.Graph","com.google.common.graph.Graph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s outgoing edges in the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * <p>This is <i>not</i> the same as "all nodes reachable from {@code node} by following outgoing
   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.successors(N)","com.google.common.graph.ValueGraph.successors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns the order of iteration for the elements of {@link #nodes()}. */","METHOD: com.google.common.graph.ValueGraph.nodeOrder()","com.google.common.graph.ValueGraph.nodeOrder()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.inDegree(N)","com.google.common.graph.ValueGraph.inDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if this graph allows self-loops (edges that connect a node to itself). Attempting
   * to add a self-loop to a graph that does not allow them will throw an {@link
   * IllegalArgumentException}.
   */","METHOD: com.google.common.graph.ValueGraph.allowsSelfLoops()","com.google.common.graph.ValueGraph.allowsSelfLoops()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns true if the edges in this graph are directed. Directed edges connect a {@link
   * EndpointPair#source() source node} to a {@link EndpointPair#target() target node}, while
   * undirected edges connect a pair of nodes to each other.
   */","METHOD: com.google.common.graph.ValueGraph.isDirected()","com.google.common.graph.ValueGraph.isDirected()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,
   * the number of times an edge touches {@code node}).
   *
   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}.
   *
   * <p>For undirected graphs, this is equal to {@code incidentEdges(node).size()} + (number of
   * self-loops incident to {@code node}).
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.degree(N)","com.google.common.graph.ValueGraph.degree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /** Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}. */","METHOD: com.google.common.graph.ValueGraph.nodes()","com.google.common.graph.ValueGraph.nodes()","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing
   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.
   *
   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.predecessors(N)","com.google.common.graph.ValueGraph.predecessors(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})
   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.
   *
   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.outDegree(N)","com.google.common.graph.ValueGraph.outDegree(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"DOC_UPDATE","JAVADOC: /**
   * Returns the nodes which have an incident edge in common with {@code node} in this graph.
   *
   * @throws IllegalArgumentException if {@code node} is not an element of this graph
   */","METHOD: com.google.common.graph.ValueGraph.adjacentNodes(N)","com.google.common.graph.ValueGraph.adjacentNodes(N)","NONE"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.ValueGraph.incidentEdges(N)","CLASS: com.google.common.graph.ValueGraph","com.google.common.graph.ValueGraph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.graph.BaseGraph.incidentEdges(N)","CLASS: com.google.common.graph.BaseGraph","com.google.common.graph.BaseGraph","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((leadingZeros >= Long.SIZE), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a >= 0) | (b != Long.MIN_VALUE)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow(((a == 0) || ((result / a) == b)), "checkedMultiply", a, b);","METHOD: com.google.common.math.LongMath.checkedMultiply(long,long)","com.google.common.math.LongMath.checkedMultiply(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) < 0) | ((a ^ result) >= 0)), "checkedAdd", a, b);","METHOD: com.google.common.math.LongMath.checkedAdd(long,long)","com.google.common.math.LongMath.checkedAdd(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((a ^ b) >= 0) | ((a ^ result) >= 0)), "checkedSubtract", a, b);","METHOD: com.google.common.math.LongMath.checkedSubtract(long,long)","com.google.common.math.LongMath.checkedSubtract(long,long)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Long.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Long.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: (int) b","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_LONG) <= b) && (b <= FLOOR_SQRT_MAX_LONG)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.LongMath.checkedPow(long,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedMultiply", a, b);","METHOD: com.google.common.math.IntMath.checkedMultiply(int,int)","com.google.common.math.IntMath.checkedMultiply(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedAdd", a, b);","METHOD: com.google.common.math.IntMath.checkedAdd(int,int)","com.google.common.math.IntMath.checkedAdd(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < (Integer.SIZE - 1)), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((k < Integer.SIZE), "checkedPow", b, k);","SWITCH_STATEMENT: b","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((((- FLOOR_SQRT_MAX_INT) <= b) & (b <= FLOOR_SQRT_MAX_INT)), "checkedPow", b, k);","THEN_STATEMENT: (k > 0)","com.google.common.math.IntMath.checkedPow(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","METHOD_INVOCATION: checkNoOverflow((result == (int) result), "checkedSubtract", a, b);","METHOD: com.google.common.math.IntMath.checkedSubtract(int,int)","com.google.common.math.IntMath.checkedSubtract(int,int)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: methodName","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: a","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"PARAMETER_DELETE","PARAMETER: b","PARAMETERS: ","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","HIGH"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"STATEMENT_UPDATE","THROW_STATEMENT: new ArithmeticException((((((("overflow: " + methodName) + "(") + a) + ", ") + b) + ")"));","THEN_STATEMENT: (! condition)","com.google.common.math.MathPreconditions.checkNoOverflow(boolean)","LOW"
10,41fa39fa7279c8fc94c7c3bb0367e2a5068d78c7,"REMOVED_FUNCTIONALITY","METHOD: com.google.common.math.MathPreconditions.checkNoOverflow(boolean,String,int,int)","CLASS: com.google.common.math.MathPreconditions","com.google.common.math.MathPreconditions","HIGH"
